<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Spark | Eugene Zhulenev]]></title>
  <link href="http://eugenezhulenev.com/blog/categories/spark/atom.xml" rel="self"/>
  <link href="http://eugenezhulenev.com/"/>
  <updated>2014-11-13T21:41:09-05:00</updated>
  <id>http://eugenezhulenev.com/</id>
  <author>
    <name><![CDATA[Eugene Zhulenev]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Stock Price Prediction With Big Data and Machine Learning]]></title>
    <link href="http://eugenezhulenev.com/blog/2014/11/14/stock-price-prediction-with-big-data-and-machine-learning/"/>
    <updated>2014-11-14T21:03:35-05:00</updated>
    <id>http://eugenezhulenev.com/blog/2014/11/14/stock-price-prediction-with-big-data-and-machine-learning</id>
    <content type="html"><![CDATA[<p>Apache Spark and Spark MLLib for building price movement prediction model based from order log data.</p>

<blockquote>
  <p>The code for this application app can be found on <a href="https://github.com/ezhulenev/orderbook-dynamics">Github</a></p>
</blockquote>

<h3 id="synopsis">Synopsis</h3>

<p>This post is based on <a href="https://raw.github.com/ezhulenev/scala-openbook/master/assets/Modeling-high-frequency-limit-order-book-dynamics-with-support-vector-machines.pdf">Modeling high-frequency limit order book dynamics with support vector machines</a> paper.
Roughly speaking I’m implementing ideas introduced in this paper in scala with <a href="https://spark.apache.org/">Spark</a> and <a href="https://spark.apache.org/mllib/">Spark MLLib</a>.
Authors are using sampling, I’m going to use full order log from <a href="http://www.nyxdata.com/Data-Products/NYSE-OpenBook-History">NYSE</a> (sample data is available from <a href="ftp://ftp.nyxdata.com/Historical%20Data%20Samples/TAQ%20NYSE%20OpenBook/">NYSE FTP</a>), just because
I can easily do it with Spark. Instead of using SVM, I’m going to use <a href="http://spark.apache.org/docs/latest/mllib-decision-tree.html">Decision Tree</a> algorithm for classification,
because in Spark MLLib it supports multiclass classification out of the box.</p>

<p>If you want to get deep understanding of the problem and proposed solution, you need to read the paper.
I’m going to give high level overview of the problem in less academic language, in one or two paragraphs.</p>

<blockquote>
  <p>Predictive modelling is the process by which a model is created or chosen to try to best predict the probability of an outcome.</p>
</blockquote>

<!-- more -->

<h4 id="model-architecture">Model Architecture</h4>

<p>Authors are proposing framework for extracting feature vectors from from raw order log data, that can be used as input to
machine learning classification method (SVM or Decision Tree for example) to predict price movement (Up, Down, Stationary). Given a set of training data
with assigned labels (price movement) classification algorithm builds a model that assigns new examples into one of pre-defined categories.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
Time(sec)            Price($)   Volume      Event Type      Direction
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
34203.011926972      598.68     10          submission      ask
34203.011926973      594.47     15          submission      bid
34203.011926974      594.49     20          submission      bid
34203.011926981      597.68     30          submission      ask
34203.011926991      594.47     15          execution       ask
34203.011927072      597.68     10          cancellation    ask
34203.011927082      599.88     12          submission      ask
34203.011927097      598.38     11          submission      ask
</pre></div>
</div>
 </figure></notextile></div></p>

<p>In the table, each row of the message book represents a trading event that could be either a order submission,
order cancellation, or order execution. The arrival time measured from midnight,
is in seconds and nanoseconds; price is in US dollars, and the Volume is in number of shares.
Ask - I’m selling and asking for this price, Bid - I want to buy for this price.</p>

<p>From this log it’s very easy to reconstruct state of order book after each entry. You can read more about <a href="http://www.investopedia.com/terms/o/order-book.asp">order book</a>
and <a href="http://www.investopedia.com/university/intro-to-order-types/limit-orders.asp">limit order book</a> in Investopedia,
I’m not going to dive into details. Concepts are super easy for understanding.</p>

<blockquote>
  <p>An electronic list of buy and sell orders for a specific security or financial instrument, organized by price level.</p>
</blockquote>

<h4 id="feature-extraction-and-training-data-preparation">Feature Extraction and Training Data Preparation</h4>

<p>After order books are reconstructed from order log, we can derive attributes, that will form feature vectors used as input to <code>classification model</code>.</p>

<p>Attributes are divided into three categories: basic, time-insensitive, and time-sensitive, all of which can be directly computed from the data.
Attributes in the basic set are the prices and volumes at both ask and bid sides up to n = 10 different levels (that is, price levels in the order book at a given moment),
which can be directly fetched from the order book. Attributes in the time-insensitive set are easily computed from the basic set at a single point in time.
Of this, bid-ask spread and mid-price, price ranges, as well as average price and volume at different price levels are calculated in feature sets <code>v2</code>, <code>v3</code>, and <code>v5</code>, respectively;
while <code>v5</code> is designed to track the accumulated differences of price and volume between ask and bid sides. By further taking the recent history of current data into consideration,
we devise the features in the time-sensitive set. More about calculating other attributes can be found in <a href="https://raw.github.com/ezhulenev/scala-openbook/master/assets/Modeling-high-frequency-limit-order-book-dynamics-with-support-vector-machines.pdf">original paper</a>.</p>

<p><img class="center" src="https://raw.github.com/ezhulenev/scala-openbook/master/assets/features.png"></p>

<h4 id="labeling-training-data">Labeling Training Data</h4>

<p>To prepare training data for machine learning it’s also required to label each point with price movement observed over some time horizon (1 second fo example).
It’s straightforward task that only requires two order books: current order book and order book after some period of time.</p>

<p>I’m going to use <code>MeanPriceMove</code> label that can be: <code>Stationary</code>, <code>Up</code> or <code>Down</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;trait <span class="predefined-type">Label</span>[L] <span class="directive">extends</span> <span class="predefined-type">Serializable</span> { label =&amp;gt;
  <span class="keyword">def</span> <span class="function">apply</span>(<span class="key">current</span>: OrderBook, <span class="key">future</span>: OrderBook): <span class="predefined-type">Option</span>[L]
}&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;sealed trait MeanPriceMove&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;object MeanPriceMove {
  <span class="keyword">case</span> object Up <span class="directive">extends</span> MeanPriceMove
  <span class="keyword">case</span> object Down <span class="directive">extends</span> MeanPriceMove
  <span class="keyword">case</span> object Stationary <span class="directive">extends</span> MeanPriceMove
}&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;object MeanPriceMovementLabel <span class="directive">extends</span> <span class="predefined-type">Label</span>[MeanPriceMove] {&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;<span class="directive">private</span>[<span class="local-variable">this</span>] val basicSet = BasicSet.apply(BasicSet.Config.default)&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;<span class="keyword">def</span> <span class="function">apply</span>(<span class="key">current</span>: OrderBook, <span class="key">future</span>: OrderBook): <span class="predefined-type">Option</span>[MeanPriceMove] = {
    val currentMeanPrice = basicSet.meanPrice(current)
    val futureMeanPrice = basicSet.meanPrice(future)&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;pre&gt;&lt;code&gt;val <span class="key">cell</span>: Cell[MeanPriceMove] =
   currentMeanPrice.zipMap(futureMeanPrice) {
    (currentMeanValue, futureMeanValue) =&amp;gt;
      <span class="keyword">if</span> (currentMeanValue == futureMeanValue)
        MeanPriceMove.Stationary
      <span class="keyword">else</span> <span class="keyword">if</span> (currentMeanValue &amp;gt; futureMeanValue)
        MeanPriceMove.Down
      <span class="keyword">else</span>
        MeanPriceMove.Up
    }

cell.toOption   } } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<h3 id="order-log-data">Order Log Data</h3>

<p>I’m going to use <a href="http://www.nyxdata.com/Data-Products/NYSE-OpenBook-History">NYSE TAQ OpenBook</a> orders data, and parse it with <a href="https://github.com/ezhulenev/scala-openbook">Scala OpenBook</a>
library. It’s easiest data set to get, free sample data for 2 trading days is available for download at <a href="ftp://ftp.nyxdata.com/Historical%20Data%20Samples/TAQ%20NYSE%20OpenBook/">NYSE FTP</a>.</p>

<blockquote>
  <p>TAQ (Trades and Quotes) historical data products provide a varying range of market depth on a T+1 basis for covered markets.
TAQ data products are used to develop and backtest trading strategies, analyze market trends as seen in a real-time ticker plant environment, and research markets for regulatory or audit activity.</p>
</blockquote>

<h3 id="prepare-training-data">Prepare Training Data</h3>

<p><code>OrderBook</code> is two sorted maps, where key is price and value is volume.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">case</span> <span class="type">class</span> <span class="class">OrderBook</span>(<span class="key">symbol</span>: <span class="predefined-type">String</span>,
                     <span class="key">buy</span>: <span class="predefined-type">TreeMap</span>[Int, Int] = <span class="predefined-type">TreeMap</span>.empty,
                     <span class="key">sell</span>: <span class="predefined-type">TreeMap</span>[Int, Int] = <span class="predefined-type">TreeMap</span>.empty)
</pre></div>
</div>
 </figure></notextile></div></p>

<h4 id="feature-sets">Feature Sets</h4>

<p>I’m using <code>Cell</code> from <a href="https://github.com/pellucidanalytics/framian">Framian</a> library to represent extracted feature values. It can be <code>Value</code>, <code>NA</code> or <code>NM</code>.</p>

<p>As defined in original paper we have three feature sets, first two calculated from <code>OrderBook</code>, last one requires <code>OrdersTrail</code> which effectively is
window computation over raw order log.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
sealed trait <span class="predefined-type">BasicAttribute</span>[T] <span class="directive">extends</span> <span class="predefined-type">Serializable</span> { self =&amp;gt;
  <span class="keyword">def</span> <span class="function">apply</span>(<span class="key">orderBook</span>: OrderBook): Cell[T]&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;<span class="keyword">def</span> map&lt;a href=<span class="string"><span class="delimiter">&quot;</span><span class="content">f: T =&amp;gt; T2</span><span class="delimiter">&quot;</span></span>&gt;T2&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">a&gt;: BasicAttribute[T2] = new BasicAttribute[T2] {</span></span><span class="error">
</span>    <span class="keyword">def</span> <span class="function">apply</span>(<span class="key">orderBook</span>: OrderBook): Cell[T2] = self(orderBook).map(f)
  }
}
</pre></div>
</div>
 </figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
sealed trait TimeInsensitiveAttribute[T] <span class="directive">extends</span> <span class="predefined-type">Serializable</span> { self =&amp;gt;
  <span class="keyword">def</span> <span class="function">apply</span>(<span class="key">orderBook</span>: OrderBook): Cell[T]&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;<span class="keyword">def</span> map&lt;a href=<span class="string"><span class="delimiter">&quot;</span><span class="content">f: T =&amp;gt; T2</span><span class="delimiter">&quot;</span></span>&gt;T2&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">a&gt;: TimeInsensitiveAttribute[T2] = new TimeInsensitiveAttribute[T2] {</span></span><span class="error">
</span>    <span class="keyword">def</span> <span class="function">apply</span>(<span class="key">orderBook</span>: OrderBook): Cell[T2] = self(orderBook).map(f)
  }
}
</pre></div>
</div>
 </figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
trait TimeSensitiveAttribute[T] <span class="directive">extends</span> <span class="predefined-type">Serializable</span> { self =&amp;gt;
  <span class="keyword">def</span> <span class="function">apply</span>(<span class="key">ordersTrail</span>: <span class="predefined-type">Vector</span>[OpenBookMsg]): Cell[T]&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;<span class="keyword">def</span> map&lt;a href=<span class="string"><span class="delimiter">&quot;</span><span class="content">f: T =&amp;gt; T2</span><span class="delimiter">&quot;</span></span>&gt;T2&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">a&gt;: TimeSensitiveAttribute[T2] = new TimeSensitiveAttribute[T2] {</span></span><span class="error">
</span>    <span class="keyword">def</span> <span class="function">apply</span>(<span class="key">ordersTrail</span>: <span class="predefined-type">Vector</span>[OpenBookMsg]): Cell[T2] = self(ordersTrail).map(f)
  }
}
</pre></div>
</div>
 </figure></notextile></div></p>

<p>and it’s how features calculation looks like</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
<span class="type">class</span> <span class="class">BasicSet</span> <span class="directive">private</span>[attribute] (val <span class="key">config</span>: BasicSet.Config) <span class="directive">extends</span> <span class="predefined-type">Serializable</span> {
  <span class="directive">private</span>[attribute] <span class="keyword">def</span> <span class="function">askPrice</span>(<span class="key">orderBook</span>: OrderBook)(<span class="key">i</span>: Int): Cell[Int] = {
    Cell.fromOption {
      orderBook.sell.keySet.drop(i - <span class="integer">1</span>).headOption
    }
  }&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;<span class="directive">private</span>[attribute] <span class="keyword">def</span> <span class="function">bidPrice</span>(<span class="key">orderBook</span>: OrderBook)(<span class="key">i</span>: Int): Cell[Int] = {
    Cell.fromOption {
      val bidPrices = orderBook.buy.keySet
      <span class="keyword">if</span> (bidPrices.size &amp;gt;= i) {
        bidPrices.drop(bidPrices.size - i).headOption
      } <span class="keyword">else</span> None
    }
  }&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;<span class="directive">private</span> <span class="keyword">def</span> attribute&lt;a href=<span class="string"><span class="delimiter">&quot;</span><span class="content">f: OrderBook =&amp;gt; Cell[T]</span><span class="delimiter">&quot;</span></span>&gt;T&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">a&gt;: BasicAttribute[T] = new BasicAttribute[T] {</span></span><span class="error">
</span>    <span class="keyword">def</span> <span class="function">apply</span>(<span class="key">orderBook</span>: OrderBook): Cell[T] = f(orderBook)
  }&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;<span class="keyword">def</span> <span class="function">askPrice</span>(<span class="key">i</span>: Int): <span class="predefined-type">BasicAttribute</span>[Int] = attribute(askPrice(_)(i))&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;<span class="keyword">def</span> <span class="function">bidPrice</span>(<span class="key">i</span>: Int): <span class="predefined-type">BasicAttribute</span>[Int] = attribute(bidPrice(_)(i))&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;val <span class="key">meanPrice</span>: <span class="predefined-type">BasicAttribute</span>[<span class="predefined-type">Double</span>] = {
    val ask1 = askPrice(<span class="integer">1</span>)
    val bid1 = bidPrice(<span class="integer">1</span>)
    <span class="predefined-type">BasicAttribute</span>.from(orderBook =&amp;gt;
      ask1(orderBook).zipMap(bid1(orderBook)) {
        (ask, bid) =&amp;gt; (ask.toDouble + bid.toDouble) / <span class="integer">2</span>
      })
  }
}
</pre></div>
</div>
 </figure></notextile></div></p>

<h4 id="label-training-data">Label Training Data</h4>

<p>To extract labeled data from orders I’m using <code>LabeledPointsExtractor</code></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
<span class="type">class</span> <span class="class">LabeledPointsExtractor</span>[<span class="key">L</span>: LabelEncode] {&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;<span class="keyword">def</span> <span class="function">labeledPoints</span>(<span class="key">orders</span>: <span class="predefined-type">Vector</span>[OpenBookMsg]): <span class="predefined-type">Vector</span>[LabeledPoint] = {
    log.debug(s<span class="error">”</span>Extract labeled points from orders log. Log <span class="key">size</span>: <span class="error">$</span>{orders.size}<span class="error">”</span>)&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;pre&gt;&lt;code&gt;<span class="comment">// ...   } } </span></pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<p>and it can be constructed nicely with builder</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
val extractor = {
    <span class="keyword">import</span> <span class="include">com.scalafi.dynamics.attribute.LabeledPointsExtractor._</span>
    (LabeledPointsExtractor.newBuilder()
      += basic(&lt;em&gt;.askPrice(<span class="integer">1</span>))
      += basic(&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">em&gt;.bidPrice(1))</span></span><span class="error">
</span>      += basic(_.meanPrice)
      ).result(symbol, MeanPriceMovementLabel, LabeledPointsExtractor.Config(<span class="integer">1</span>.millisecond))
  }
</pre></div>
</div>
 </figure></notextile></div></p>

<p>This <code>extractor</code> will prepare labeled points using <code>MeanPriceMovementLabel</code> with 3 features: ask price, bid price and mean price</p>

<h3 id="run-classification-model">Run Classification Model</h3>

<p>In “real” application I’m using 36 features from all 3 feature sets. I run my tests with sample data from NYSE ftp,
<code>EQY_US_NYSE_BOOK_20130403</code> for model training and <code>EQY_US_NYSE_BOOK_20130404</code> for model validation.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
object DecisionTreeDynamics <span class="directive">extends</span> App with ConfiguredSparkContext with FeaturesExtractor {
  <span class="directive">private</span> val log = LoggerFactory.getLogger(<span class="local-variable">this</span>.getClass)&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;<span class="keyword">case</span> <span class="type">class</span> <span class="class">Config</span>(<span class="key">training</span>: <span class="predefined-type">String</span> = <span class="error">“</span><span class="error">”</span>,
                    <span class="key">validation</span>: <span class="predefined-type">String</span> = <span class="error">“</span><span class="error">”</span>,
                    <span class="key">filter</span>: <span class="predefined-type">Option</span>[<span class="predefined-type">String</span>] = None,
                    <span class="key">symbol</span>: <span class="predefined-type">Option</span>[<span class="predefined-type">String</span>] = None)&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;val parser = <span class="keyword">new</span> OptionParser&lt;a href=<span class="string"><span class="delimiter">&quot;</span><span class="content">&amp;quot;Order Book Dynamics&amp;quot;</span><span class="delimiter">&quot;</span></span>&gt;Config&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">a&gt; {</span></span><span class="error">
</span>    <span class="comment">// ….</span>
  }&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;parser.parse(args, Config()) map { implicit config =&amp;gt;
    val trainingFiles = openBookFiles(<span class="error">“</span>Training<span class="error">”</span>, config.training, config.filter)
    val validationFiles = openBookFiles(<span class="error">“</span>Validation<span class="error">”</span>, config.validation, config.filter)&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;pre&gt;&lt;code&gt;val trainingOrderLog = orderLog(trainingFiles)
log.info(s<span class="string"><span class="delimiter">&quot;</span><span class="content">Training order log size: </span><span class="inline"><span class="inline-delimiter">${</span>trainingOrderLog.count()<span class="inline-delimiter">}</span></span><span class="delimiter">&quot;</span></span>)

<span class="comment">// Configure DecisionTree model</span>
val labelEncode = implicitly[LabelEncode[MeanPriceMove]]
val numClasses = labelEncode.numClasses
val categoricalFeaturesInfo = <span class="predefined-type">Map</span>.empty[Int, Int]
val impurity = <span class="string"><span class="delimiter">&quot;</span><span class="content">gini</span><span class="delimiter">&quot;</span></span>
val maxDepth = <span class="integer">5</span>
val maxBins = <span class="integer">100</span>

val trainingData = trainingOrderLog.extractLabeledData(featuresExtractor(<span class="key">_</span>: <span class="predefined-type">String</span>))
val trainedModels = (trainingData map { <span class="keyword">case</span> LabeledOrderLog(symbol, labeledPoints) =&amp;gt;
  log.info(s<span class="string"><span class="delimiter">&quot;</span><span class="inline"><span class="inline-delimiter">$</span>symbol</span><span class="content">: Train Decision Tree model. Training data size: </span><span class="inline"><span class="inline-delimiter">${</span>labeledPoints.count()<span class="inline-delimiter">}</span></span><span class="delimiter">&quot;</span></span>)
  val model = DecisionTree.trainClassifier(labeledPoints, numClasses, categoricalFeaturesInfo, impurity, maxDepth, maxBins)
  val labelCounts = labeledPoints.map(_.label).countByValue().map {
    <span class="keyword">case</span> (key, count) =&amp;gt; (labelEncode.decode(key.toInt), count)
  }
  log.info(s<span class="string"><span class="delimiter">&quot;</span><span class="inline"><span class="inline-delimiter">$</span>symbol</span><span class="content">: Label counts: [</span><span class="inline"><span class="inline-delimiter">${</span>labelCounts.mkString(<span class="string"><span class="delimiter">&quot;</span><span class="content">, </span><span class="delimiter">&quot;</span></span>)<span class="inline-delimiter">}</span></span><span class="content">]</span><span class="delimiter">&quot;</span></span>)
  symbol -&amp;gt; model
}).toMap

val validationOrderLog = orderLog(validationFiles)
log.info(s<span class="string"><span class="delimiter">&quot;</span><span class="content">Validation order log size: </span><span class="inline"><span class="inline-delimiter">${</span>validationOrderLog.count()<span class="inline-delimiter">}</span></span><span class="delimiter">&quot;</span></span>)
val validationData = validationOrderLog.extractLabeledData(featuresExtractor(<span class="key">_</span>: <span class="predefined-type">String</span>))

<span class="comment">// Evaluate model on validation data and compute training error</span>
validationData.map { <span class="keyword">case</span> LabeledOrderLog(symbol, labeledPoints) =&amp;gt;

  val model = trainedModels(symbol)

  log.info(s<span class="string"><span class="delimiter">&quot;</span><span class="inline"><span class="inline-delimiter">$</span>symbol</span><span class="content">: Evaluate model on validation data. Validation data size: </span><span class="inline"><span class="inline-delimiter">${</span>labeledPoints.count()<span class="inline-delimiter">}</span></span><span class="delimiter">&quot;</span></span>)
  log.info(s<span class="string"><span class="delimiter">&quot;</span><span class="inline"><span class="inline-delimiter">$</span>symbol</span><span class="content">: Learned classification tree model: </span><span class="inline"><span class="inline-delimiter">$</span>model</span><span class="delimiter">&quot;</span></span>)

  val labelAndPrediction = labeledPoints.map { point =&amp;gt;
    val prediction = model.predict(point.features)
    (point.label, prediction)
  }
  val trainingError = labelAndPrediction.filter(r =&amp;gt; r._1 != r._2).count().toDouble / labeledPoints.count
  log.info(s<span class="string"><span class="delimiter">&quot;</span><span class="inline"><span class="inline-delimiter">$</span>symbol</span><span class="content">: Training Error = </span><span class="delimiter">&quot;</span></span> + trainingError)
}   } } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<h4 id="training-error">Training Error</h4>

<p>Output of running Decision Tree classification for single symbol <code>ORCL</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
ORCL: Train Decision Tree model. Training data size: 64064
ORCL: Trained model in 3740 millis
ORCL: Label counts: [Stationary -&amp;gt; 42137, Down -&amp;gt; 10714, Up -&amp;gt; 11213]
ORCL: Evaluate model on validation data. Validation data size: 54749
ORCL: Training Error = 0.28603262160039455
</pre></div>
</div>
 </figure></notextile></div></p>

<p>As you can see this pretty simple model was able to successfully classify ~70% of the data.</p>

<h3 id="results">Results</h3>

<p>I was able to relatively easy reproduce fairly complicated research project at much lager scale than in original paper.</p>

<p>Latest Big Data technologies allows to build models using all available data, and stop doing samplings.
Using all of the data helps to build best possible models and capture all details from full data set.</p>

<blockquote>
  <p>The code for this application app can be found on <a href="https://github.com/ezhulenev/orderbook-dynamics">Github</a></p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Spark Tests in Standalone Cluster]]></title>
    <link href="http://eugenezhulenev.com/blog/2014/10/18/run-tests-in-standalone-spark-cluster/"/>
    <updated>2014-10-18T21:01:15-04:00</updated>
    <id>http://eugenezhulenev.com/blog/2014/10/18/run-tests-in-standalone-spark-cluster</id>
    <content type="html"><![CDATA[<p>Unit testing Spark Applications with standalone Apache Spark Cluster.</p>

<blockquote>
  <p>The code for this application app can be found on <a href="https://github.com/ezhulenev/spark-testing">Github</a></p>
</blockquote>

<h3 id="running-spark-applications">Running Spark Applications</h3>

<p>To be able to run Spark jobs, Spark cluster needs to have all classes used by your application in it’s classpath.
You can put manually all jar files required by your application to Spark nodes, but it’s not cool.
Another solution is to manually set jar files that required to distribute to worker nodes
when you create SparkConf. One way to do it, is to package your application as a “fat-jar”,
so you need to distribute only single jar.
Industry standard for packaging Spark application is <a href="https://github.com/sbt/sbt-assembly">sbt-assembly</a> plugin,
and it’s used by Spark itself.</p>

<h3 id="unit-testing-spark-applications">Unit Testing Spark Applications</h3>

<p>If you need to test your Spark application, easiest way is to create local Spark Context for each test, or maybe shared between all tests.
When Spark is running in local mode, it’s running in the same JVM as your tests with same jar files in classpath.</p>

<p>If your tests requires data that doesn’t fit into single node, for example in integration or acceptance tests,
obvious solution is to run them in standalone Spark cluster
with sufficient number of nodes. At this time everything becomes more difficult. Now you need to package you application with tests
in single jar file, and submit it to Spark cluster with each test.</p>

<!-- more -->

<h3 id="example-application">Example Application</h3>

<p>To show how to run and test Spark applications I prepared very <a href="https://github.com/ezhulenev/spark-testing">simple application</a>.
It uses <a href="https://github.com/ezhulenev/scala-openbook">Scala OpenBook</a>
library to parse <a href="http://www.nyxdata.com/Data-Products/NYSE-OpenBook-History">NYSE OpenBook</a> messages (orders log from New York Stock Exchange),
distribute them to cluster as RDD, and count Buy and Sell orders by ticker.
Only purpose of this application is to have dependency on a library that for sure is not available on Spark nodes.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
<span class="type">class</span> <span class="class">OrdersFunctions</span>(<span class="annotation">@transient</span> <span class="key">sc</span>: SparkContext, <span class="key">orders</span>: <span class="predefined-type">Iterator</span>[OpenBookMsg]) <span class="directive">extends</span> <span class="predefined-type">Serializable</span> {&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;<span class="directive">private</span> val ordersRDD = sc.parallelize(orders.toSeq)&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;<span class="keyword">def</span> <span class="function">countBuyOrders</span>(): <span class="predefined-type">Map</span>[<span class="predefined-type">String</span>, <span class="predefined-type">Long</span>] = countOrders(OrderFunctions.isBuySide)&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;<span class="keyword">def</span> <span class="function">countSellOrders</span>(): <span class="predefined-type">Map</span>[<span class="predefined-type">String</span>, <span class="predefined-type">Long</span>] = countOrders(OrderFunctions.isSellSide)&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;<span class="directive">private</span> <span class="keyword">def</span> <span class="function">countOrders</span>(<span class="key">filter</span>: OpenBookMsg =&amp;gt; <span class="predefined-type">Boolean</span>): <span class="predefined-type">Map</span>[<span class="predefined-type">String</span>, <span class="predefined-type">Long</span>] =
    ordersRDD.filter(filter).
      map(order =&amp;gt; (order.symbol, order)).
      countByKey().toMap&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;}
</pre></div>
</div>
 </figure></notextile></div></p>

<p> </p>

<h3 id="assembly-main-application">Assembly Main Application</h3>

<p>Add sbt-assembly plugin in project/plugin.sbt</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
addSbtPlugin(<span class="error">“</span>com.eed3si9n<span class="error">”</span> % <span class="error">“</span>sbt-assembly<span class="error">”</span> % <span class="error">“</span><span class="float">0.11</span><span class="float">.2</span><span class="error">”</span>)
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Add assembly settings to build.sbt</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
<span class="comment">// Merge strategy shared between app &amp;amp; test&lt;/p&gt;</span>

&lt;p&gt;val <span class="key">sharedMergeStrategy</span>: (<span class="predefined-type">String</span> =&amp;gt; MergeStrategy) =&amp;gt; <span class="predefined-type">String</span> =&amp;gt; MergeStrategy =
  old =&amp;gt; {
    <span class="keyword">case</span> x <span class="keyword">if</span> x.startsWith(<span class="error">“</span>META-INF/ECLIPSEF.RSA<span class="error">”</span>) =&amp;gt; MergeStrategy.last
    <span class="keyword">case</span> x <span class="keyword">if</span> x.startsWith(<span class="error">“</span>META-INF/mailcap<span class="error">”</span>) =&amp;gt; MergeStrategy.last
    <span class="keyword">case</span> x <span class="keyword">if</span> x.endsWith(<span class="error">“</span>plugin.properties<span class="error">”</span>) =&amp;gt; MergeStrategy.last
    <span class="keyword">case</span> x =&amp;gt; old(x)
  }&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;<span class="comment">// Load Assembly Settings&lt;/p&gt;</span>

&lt;p&gt;assemblySettings&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;<span class="comment">// Assembly App&lt;/p&gt;</span>

&lt;p&gt;mainClass <span class="keyword">in</span> assembly := Some(<span class="error">“</span>com.github.ezhulenev.spark.RunSparkApp<span class="error">”</span>)&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;jarName <span class="keyword">in</span> assembly := <span class="error">“</span>spark-testing-example-app.jar<span class="error">”</span>&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;mergeStrategy <span class="keyword">in</span> assembly <span class="error">«</span>= (mergeStrategy <span class="keyword">in</span> assembly)(sharedMergeStrategy)
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Inside your application you need to create SparkConf and add current jar to it.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
  <span class="keyword">new</span> SparkConf().
      setMaster(<span class="error">“</span><span class="key">spark</span>:<span class="comment">//spark-host:7777”).</span>
      setJars(SparkContext.jarOfClass(<span class="local-variable">this</span>.getClass).toSeq).
      setAppName(<span class="error">“</span>SparkTestingExample<span class="error">”</span>)
</pre></div>
</div>
 </figure></notextile></div></p>

<p>After that you can use assembly command, and run assembled application in your Spark Cluster</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
&amp;gt; sbt assembly
&amp;gt; java -Dspark.master=spark://spark-host:7777 target/scala_2.10/spark-testing-example-app.jar
</pre></div>
</div>
 </figure></notextile></div></p>

<p> </p>

<h3 id="assembly-tests">Assembly Tests</h3>

<p>First step to run tests in standalone Spark Cluster is to package all main and test classes into single jar, that will be
transfered to each worker node before running tests. It’s very similar to assemblying main app.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
<span class="comment">// Assembly Tests&lt;/p&gt;</span>

&lt;p&gt;Project.inConfig(Test)(assemblySettings)&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;jarName <span class="keyword">in</span> (Test, assembly) := <span class="error">“</span>spark-testing-example-tests.jar<span class="error">”</span>&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;mergeStrategy <span class="keyword">in</span> (Test, assembly) <span class="error">«</span>= (mergeStrategy <span class="keyword">in</span> assembly)(sharedMergeStrategy)&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;test <span class="keyword">in</span> (Test, assembly) := {} <span class="comment">// disable tests in assembly</span>
</pre></div>
</div>
 </figure></notextile></div></p>

<p>I wrote simple sbt plugin that has <code>test-assembly</code> task. First this task assemblies jar
file with test classes and all dependencies, then set it’s location
to environment variable, and then starts tests.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
object TestWithSparkPlugin <span class="directive">extends</span> sbt.Plugin {&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;<span class="keyword">import</span> <span class="include">TestWithSparkKeys._</span>
  <span class="keyword">import</span> <span class="include">AssemblyKeys._</span>&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;object TestWithSparkKeys {
    lazy val testAssembled        = TaskKey&lt;a href=<span class="string"><span class="delimiter">&quot;</span><span class="content">&amp;quot;test-assembled&amp;quot;,</span><span class="delimiter">&quot;</span></span> title=<span class="string"><span class="delimiter">&quot;</span><span class="content">Run tests with standalone Spark cluster</span><span class="delimiter">&quot;</span></span>&gt;Unit&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">a&gt;</span></span><span class="error">
</span>    lazy val assembledTestsProp   = SettingKey&lt;a href=<span class="string"><span class="delimiter">&quot;</span><span class="content">&amp;quot;assembled-tests-prop&amp;quot;,</span><span class="delimiter">&quot;</span></span> title=<span class="string"><span class="delimiter">&quot;</span><span class="content">Environment variable name used to pass assembled jar name to test</span><span class="delimiter">&quot;</span></span>&gt;<span class="predefined-type">String</span>&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">a&gt;</span></span><span class="error">
</span>  }&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;lazy val <span class="key">baseTestWithSparkSettings</span>: Seq[sbt.Def.Setting[_]] = Seq(
    testAssembled        := TestWithSpark.testWithSparkTask.value,
    assembledTestsProp   := <span class="error">“</span>ASSEMBLED_TESTS<span class="error">”</span>
  )&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;lazy val <span class="key">testWithSparkSettings</span>: Seq[sbt.Def.Setting[_]] = baseTestWithSparkSettings&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;object TestWithSpark {&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;pre&gt;&lt;code&gt;<span class="keyword">def</span> <span class="key">assemblyTestsJarTask</span>: Initialize[Task[<span class="predefined-type">File</span>]] = Def.task {
  val assembled = (assembly <span class="keyword">in</span> Test).value
  sys.props(assembledTestsProp.value) = assembled.getAbsolutePath
  assembled
}

<span class="directive">private</span> <span class="keyword">def</span> runTests = Def.task {
  (test <span class="keyword">in</span> Test).value
}

<span class="keyword">def</span> <span class="key">testWithSparkTask</span>: Initialize[Task[Unit]] = Def.sequentialTask {
  assemblyTestsJarTask.value
  runTests.value
}   } } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<p>All Apache Spark tests should inherit <code>ConfiguredSparkFlatSpec</code> with configured Spark Context. If assembled tests jar file
is available, it’s distributed to Spark worker nodes. If not, only local mode is supported.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
trait ConfiguredSparkFlatSpec <span class="directive">extends</span> FlatSpec with BeforeAndAfterAll {
  <span class="directive">private</span> val log = LoggerFactory.getLogger(classOf[ConfiguredSparkFlatSpec])&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;<span class="directive">private</span> val config = ConfigFactory.load()&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;<span class="directive">private</span> lazy val sparkConf = {
    val master = config.getString(<span class="error">“</span>spark.master<span class="error">”</span>)&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;pre&gt;&lt;code&gt;log.info(s<span class="string"><span class="delimiter">&quot;</span><span class="content">Create spark context. Master: </span><span class="inline"><span class="inline-delimiter">$</span>master</span><span class="delimiter">&quot;</span></span>)
val assembledTests = sys.props.get(<span class="string"><span class="delimiter">&quot;</span><span class="content">ASSEMBLED_TESTS</span><span class="delimiter">&quot;</span></span>)

val baseConf = <span class="keyword">new</span> SparkConf().
  setMaster(master).
  setAppName(<span class="string"><span class="delimiter">&quot;</span><span class="content">SparkTestingExample</span><span class="delimiter">&quot;</span></span>)

assembledTests match {
  <span class="keyword">case</span> None =&amp;gt;
    log.warn(s<span class="string"><span class="delimiter">&quot;</span><span class="content">Assembled tests jar not found. Standalone Spark mode is not supported</span><span class="delimiter">&quot;</span></span>)
    baseConf
  <span class="keyword">case</span> Some(path) =&amp;gt;
    log.info(s<span class="string"><span class="delimiter">&quot;</span><span class="content">Add assembled tests to Spark Context from: </span><span class="inline"><span class="inline-delimiter">$</span>path</span><span class="delimiter">&quot;</span></span>)
    baseConf.setJars(path :: Nil)
}   }
&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">code&gt;&lt;</span><span class="delimiter">/</span></span>pre&gt;

&lt;p&gt;lazy val sc = <span class="keyword">new</span> SparkContext(sparkConf)&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;override <span class="directive">protected</span> <span class="keyword">def</span> <span class="function">afterAll</span>(): Unit = {
    <span class="local-variable">super</span>.afterAll()
    sc.stop()
  }
}
</pre></div>
</div>
 </figure></notextile></div></p>

<p> </p>

<h3 id="running-tests">Running Tests</h3>

<p>By default <code>spark.master</code> property is set to local[2]. So you can run tests in local mode. If you want run tests
in standalone Apache Spark, you need to override <code>spark.master</code> with your master node.</p>

<p>If you’ll try to run <code>test</code> command with standalone cluster it will fail with ClassNotFoundException</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
&amp;gt; sbt -Dspark.master=spark://spark-host:7777 test
&amp;gt;
&amp;gt; Create spark context. Master: spark://Eugenes-MacBook-Pro.local:7077
&amp;gt; Assembled tests jar not found. Standalone Spark mode is not supported
&amp;gt;
&amp;gt; [error] Failed tests:
&amp;gt; org.apache.spark.SparkException: Job aborted due to stage failure:
&amp;gt; Task 2 in stage 1.0 failed 4 times, most recent failure:
&amp;gt; Lost task 2.3 in stage 1.0 (TID 30, 192.168.0.11):
&amp;gt; java.lang.ClassNotFoundException: com.scalafi.openbook.OpenBookMsg
</pre></div>
</div>
 </figure></notextile></div></p>

<p>However <code>test-assembled</code> will be successfull</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
&amp;gt; sbt -Dspark.master=spark://spark-host:7777 test-assembled
&amp;gt;
&amp;gt; Create spark context. Master: spark://Eugenes-MacBook-Pro.local:7077
&amp;gt; Add assembled tests to Spark Context from: /Users/ezhulenev/spark-testing/target/scala-2.10/spark-testing-example-tests.jar
&amp;gt;
&amp;gt; [info] Run completed in 7 seconds, 587 milliseconds.
&amp;gt; [info] Total number of tests run: 2
&amp;gt; [info] Suites: completed 1, aborted 0
&amp;gt; [info] Tests: succeeded 2, failed 0, canceled 0, ignored 0, pending 0
&amp;gt; [info] All tests passed.
&amp;gt; [success] Total time: 37 s
</pre></div>
</div>
 </figure></notextile></div></p>

<p> </p>

<blockquote>
  <p>The code for this application app can be found on <a href="https://github.com/ezhulenev/spark-testing">Github</a></p>
</blockquote>
]]></content>
  </entry>
  
</feed>
