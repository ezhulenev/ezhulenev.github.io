<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Dataframe | Eugene Zhulenev]]></title>
  <link href="http://eugenezhulenev.com/blog/categories/dataframe/atom.xml" rel="self"/>
  <link href="http://eugenezhulenev.com/"/>
  <updated>2015-09-09T08:35:42-04:00</updated>
  <id>http://eugenezhulenev.com/</id>
  <author>
    <name><![CDATA[Eugene Zhulenev]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Audience Modeling With Spark ML Pipelines]]></title>
    <link href="http://eugenezhulenev.com/blog/2015/09/09/audience-modeling-with-spark-ml-pipelines/"/>
    <updated>2015-09-09T09:04:25-04:00</updated>
    <id>http://eugenezhulenev.com/blog/2015/09/09/audience-modeling-with-spark-ml-pipelines</id>
    <content type="html"><![CDATA[<p>At <a href="http://collective.com">Collective</a> we are heavily relying on machine learning and predictive modeling to 
run digital advertising business. All decisions about what ad to show at this particular time to this particular user
are made by machine learning models (some of them are real time, and some of them are offline).</p>

<p>We have a lot of projects that uses machine learning, common name for all of them can be <strong>Audience Modeling</strong>, as they
all are trying to predict audience conversion (<em>CTR, Viewability Rate, etc…</em>) based on browsing history, behavioral segments and other type of 
predictors.</p>

<p>For most of new development we use <a href="https://spark.apache.org">Spark</a> and <a href="https://spark.apache.org/mllib/">Spark MLLib</a>. It is a awesome project,
however we found that some nice tools/libraries that are widely used for example in R are missing in Spark. In order to add missing
features that we would really like to have in Spark, we created <a href="https://github.com/collectivemedia/spark-ext">Spark Ext</a> - Spark Extensions
Library. </p>

<blockquote>
  <p>Spark Ext on Github: <a href="https://github.com/collectivemedia/spark-ext">https://github.com/collectivemedia/spark-ext</a></p>
</blockquote>

<p>I’m going to show simple example of combining <a href="https://github.com/collectivemedia/spark-ext">Spark Ext</a> with Spark ML pipelines for predicting user conversions based geo and browsing history data.</p>

<blockquote>
  <p>Spark ML pipeline example: <a href="https://github.com/collectivemedia/spark-ext/blob/master/sparkext-example/src/main/scala/com/collective/sparkext/example/SparkMlExtExample.scala">SparkMlExtExample.scala</a></p>
</blockquote>

<!-- more -->

<h2 id="predictors-data">Predictors Data</h2>

<p>I’m using dataset with 2 classes, that will be used for solving classification problem (user converted or not). It’s created with 
<a href="https://github.com/collectivemedia/spark-ext/blob/master/sparkext-example/src/main/scala/com/collective/sparkext/example/DataGenerator.scala">dummy data generator</a>, 
so that these 2 classes can be easily separated. It’s pretty similar to real data that usually available in digital advertising.</p>

<h3 id="browsing-history-log">Browsing History Log</h3>

<p>History of web sites that were visited by user.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
Cookie          | Site          | Impressions&lt;br /&gt;
————— |————– | ————-
wKgQaV0lHZanDrp | live.com      | 24
wKgQaV0lHZanDrp | pinterest.com | 21
rfTZLbQDwbu5mXV | wikipedia.org | 14
rfTZLbQDwbu5mXV | live.com      | 1
rfTZLbQDwbu5mXV | amazon.com    | 1
r1CSY234HTYdvE3 | youtube.com   | 10
</pre></div>
</div>
 </figure></notextile></div></p>

<h3 id="geo-location-log">Geo Location Log</h3>

<p>Latitude/Longitude impression history.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
Cookie          | Lat     | Lng       | Impressions
————— |———| ——— | ————
wKgQaV0lHZanDrp | 34.8454 | 77.009742 | 13
wKgQaV0lHZanDrp | 31.8657 | 114.66142 | 1
rfTZLbQDwbu5mXV | 41.1428 | 74.039600 | 20
rfTZLbQDwbu5mXV | 36.6151 | 119.22396 | 4
r1CSY234HTYdvE3 | 42.6732 | 73.454185 | 4
r1CSY234HTYdvE3 | 35.6317 | 120.55839 | 5
20ep6ddsVckCmFy | 42.3448 | 70.730607 | 21
20ep6ddsVckCmFy | 29.8979 | 117.51683 | 1
</pre></div>
</div>
 </figure></notextile></div></p>

<h2 id="transforming-predictors-data">Transforming Predictors Data</h2>

<p>As you can see predictors data (sites and geo) is in <em>long</em> format, each <code>cookie</code> has multiple rows associated with it,
and it’s in general is not a good fit for machine learning.
We’d like <code>cookie</code> to be a primary key, and all other data should form <code>feature vector</code>.</p>

<h3 id="gather-transformer">Gather Transformer</h3>

<p>Inspired by R <code>tidyr</code> and <code>reshape2</code> packages. Convert <em>long</em> <code>DataFrame</code> with values
for each key into <em>wide</em> <code>DataFrame</code>, applying aggregation function if single
key has multiple values.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
val gather = <span class="keyword">new</span> Gather()
      .setPrimaryKeyCols(<span class="error">“</span>cookie<span class="error">”</span>)
      .setKeyCol(<span class="error">“</span>site<span class="error">”</span>)
      .setValueCol(<span class="error">“</span>impressions<span class="error">”</span>)
      .setValueAgg(<span class="error">“</span>sum<span class="error">”</span>)         <span class="comment">// sum impression by key</span>
      .setOutputCol(<span class="error">“</span>sites<span class="error">”</span>)
val gatheredSites = gather.transform(siteLog)    &lt;br /&gt;
</pre></div>
</div>
 </figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
Cookie           | Sites
—————–|———————————————-
wKgQaV0lHZanDrp  | [
                 |  { site: live.com, impressions: 24.0 }, 
                 |  { site: pinterest.com, impressions: 21.0 }
                 | ]
rfTZLbQDwbu5mXV  | [
                 |  { site: wikipedia.org, impressions: 14.0 }, 
                 |  { site: live.com, impressions: 1.0 },
                 |  { site: amazon.com, impressions: 1.0 }
                 | ]
</pre></div>
</div>
 </figure></notextile></div></p>

<h3 id="google-s2-geometry-cell-id-transformer">Google S2 Geometry Cell Id Transformer</h3>

<p>The S2 Geometry Library is a spherical geometry library, very useful for manipulating regions on the sphere (commonly on Earth) 
and indexing geographic data. Basically it assigns unique cell id for each region on the earth. </p>

<blockquote>
  <p>Good article about S2 library: <a href="http://blog.christianperone.com/2015/08/googles-s2-geometry-on-the-sphere-cells-and-hilbert-curve/">Google’s S2, geometry on the sphere, cells and Hilbert curve</a></p>
</blockquote>

<p>For example you can combine S2 transformer with Gather to get from <code>lat</code>/<code>lon</code> to <code>K-V</code> pairs, where key will be <code>S2</code> cell id.
Depending on a level you can assign all people in Greater New York area (level = 4) into one cell, or you can index them block by block (level = 12).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
<span class="comment">// Transform lat/lon into S2 Cell Id</span>
val s2Transformer = <span class="keyword">new</span> S2CellTransformer()
  .setLevel(<span class="integer">5</span>)
  .setCellCol(<span class="error">“</span>s2_cell<span class="error">”</span>)&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;<span class="comment">// Gather S2 CellId log</span>
val gatherS2Cells = <span class="keyword">new</span> Gather()
  .setPrimaryKeyCols(<span class="error">“</span>cookie<span class="error">”</span>)
  .setKeyCol(<span class="error">“</span>s2_cell<span class="error">”</span>)
  .setValueCol(<span class="error">“</span>impressions<span class="error">”</span>)
  .setOutputCol(<span class="error">“</span>s2_cells<span class="error">”</span>)&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;val gatheredCells = gatherS2Cells.transform(s2Transformer.transform(geoDf))
</pre></div>
</div>
 </figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
Cookie           | S2 Cells
—————–|———————————————-
wKgQaV0lHZanDrp  | [
                 |  { s2_cell: d5dgds, impressions: 5.0 }, 
                 |  { s2_cell: b8dsgd, impressions: 1.0 }
                 | ]
rfTZLbQDwbu5mXV  | [
                 |  { s2_cell: d5dgds, impressions: 12.0 }, 
                 |  { s2_cell: b8dsgd, impressions: 3.0 },
                 |  { s2_cell: g7aeg3, impressions: 5.0 }
                 | ]
</pre></div>
</div>
 </figure></notextile></div></p>

<h2 id="assembling-feature-vector">Assembling Feature Vector</h2>

<p><code>K-V</code> pairs from result of <code>Gather</code> are cool, and groups all the information about cookie into single row, however they can’t be used
as input for machine learning. To be able to train a model, predictors data needs to be represented as a vector of doubles. If all features are continuous and
numeric it’s easy, but if some of them are categorical or in <code>gathered</code> shape, it’s not trivial.</p>

<h3 id="gather-encoder">Gather Encoder</h3>

<p>Encodes categorical key-value pairs using dummy variables. </p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
<span class="comment">// Encode S2 Cell data</span>
val encodeS2Cells = <span class="keyword">new</span> GatherEncoder()
  .setInputCol(<span class="error">“</span>s2_cells<span class="error">”</span>)
  .setOutputCol(<span class="error">“</span>s2_cells_f<span class="error">”</span>)
  .setKeyCol(<span class="error">“</span>s2_cell<span class="error">”</span>)
  .setValueCol(<span class="error">“</span>impressions<span class="error">”</span>)
  .setCover(<span class="float">0.95</span>) <span class="comment">// dimensionality reduction</span>
</pre></div>
</div>
 </figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
Cookie           | S2 Cells
—————–|———————————————-
wKgQaV0lHZanDrp  | [
                 |  { s2_cell: d5dgds, impressions: 5.0 }, 
                 |  { s2_cell: b8dsgd, impressions: 1.0 }
                 | ]
rfTZLbQDwbu5mXV  | [
                 |  { s2_cell: d5dgds, impressions: 12.0 }, 
                 |  { s2_cell: g7aeg3, impressions: 5.0 }
                 | ]
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Transformed into</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
Cookie           | S2 Cells Features
—————–|————————
wKgQaV0lHZanDrp  | [ 5.0  ,  1.0 , 0   ]
rfTZLbQDwbu5mXV  | [ 12.0 ,  0   , 5.0 ]
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Note that it’s 3 unique cell id values, that gives 3 columns in final feature vector.</p>

<p>Optionally apply dimensionality reduction using <code>top</code> transformation:</p>

<ul>
  <li>Top coverage, is selecting categorical values by computing the count of distinct users for each value,
sorting the values in descending order by the count of users, and choosing the top values from the resulting
list such that the sum of the distinct user counts over these values covers c percent of all users,
for example, selecting top sites covering 99% of users.</li>
</ul>

<h2 id="spark-ml-pipelines">Spark ML Pipelines</h2>

<p>Spark ML Pipeline - is new high level API for Spark MLLib. </p>

<blockquote>
  <p>A practical ML pipeline often involves a sequence of data pre-processing, feature extraction, model fitting, and validation stages. For example, classifying text documents might involve text segmentation and cleaning, extracting features, and training a classification model with cross-validation. <a href="https://databricks.com/blog/2015/01/07/ml-pipelines-a-new-high-level-api-for-mllib.html">Read More.</a> </p>
</blockquote>

<p>In Spark ML it’s possible to split ML pipeline in multiple independent stages, group them together in single pipeline and run it
with Cross Validation and Parameter Grid to find best set of parameters.</p>

<h3 id="put-it-all-together-with-spark-ml-pipelines">Put It All together with Spark ML Pipelines</h3>

<p>Gather encoder is a natural fit into Spark ML Pipeline API.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
<span class="comment">// Encode site data</span>
val encodeSites = <span class="keyword">new</span> GatherEncoder()
  .setInputCol(<span class="error">“</span>sites<span class="error">”</span>)
  .setOutputCol(<span class="error">“</span>sites_f<span class="error">”</span>)
  .setKeyCol(<span class="error">“</span>site<span class="error">”</span>)
  .setValueCol(<span class="error">“</span>impressions<span class="error">”</span>)&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;<span class="comment">// Encode S2 Cell data</span>
val encodeS2Cells = <span class="keyword">new</span> GatherEncoder()
  .setInputCol(<span class="error">“</span>s2_cells<span class="error">”</span>)
  .setOutputCol(<span class="error">“</span>s2_cells_f<span class="error">”</span>)
  .setKeyCol(<span class="error">“</span>s2_cell<span class="error">”</span>)
  .setValueCol(<span class="error">“</span>impressions<span class="error">”</span>)
  .setCover(<span class="float">0.95</span>)&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;<span class="comment">// Assemble feature vectors together</span>
val assemble = <span class="keyword">new</span> VectorAssembler()
  .setInputCols(<span class="predefined-type">Array</span>(<span class="error">“</span>sites_f<span class="error">”</span>, <span class="error">“</span>s2_cells_f<span class="error">”</span>))
  .setOutputCol(<span class="error">“</span>features<span class="error">”</span>)&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;<span class="comment">// Build logistic regression</span>
val lr = <span class="keyword">new</span> LogisticRegression()
  .setFeaturesCol(<span class="error">“</span>features<span class="error">”</span>)
  .setLabelCol(<span class="error">“</span>response<span class="error">”</span>)
  .setProbabilityCol(<span class="error">“</span>probability<span class="error">”</span>)&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;<span class="comment">// Define pipeline with 4 stages</span>
val pipeline = <span class="keyword">new</span> Pipeline()
  .setStages(<span class="predefined-type">Array</span>(encodeSites, encodeS2Cells, assemble, lr))&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;val evaluator = <span class="keyword">new</span> BinaryClassificationEvaluator()
  .setLabelCol(Response.response)&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;val crossValidator = <span class="keyword">new</span> CrossValidator()
  .setEstimator(pipeline)
  .setEvaluator(evaluator)&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;val paramGrid = <span class="keyword">new</span> ParamGridBuilder()
  .addGrid(lr.elasticNetParam, <span class="predefined-type">Array</span>(<span class="float">0.1</span>, <span class="float">0.5</span>))
  .build()&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;crossValidator.setEstimatorParamMaps(paramGrid)
crossValidator.setNumFolds(<span class="integer">2</span>)&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;println(s<span class="error">”</span>Train model on train set<span class="error">”</span>)
val cvModel = crossValidator.fit(trainSet)
</pre></div>
</div>
 </figure></notextile></div></p>

<h2 id="conclusion">Conclusion</h2>

<p>New Spark ML API makes machine learning much more easier. <a href="https://github.com/collectivemedia/spark-ext">Spark Ext</a> is good example of how is it possible to 
create custom transformers/estimators that later can be used as a part of bigger pipeline, and can be easily shared/reused by multiple projects.</p>

<blockquote>
  <p>Full code for example application is available on <a href="https://github.com/collectivemedia/spark-ext/blob/master/sparkext-example/src/main/scala/com/collective/sparkext/example/SparkMlExtExample.scala">Github</a>.</p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interactive Audience Analytics With Spark and HyperLogLog]]></title>
    <link href="http://eugenezhulenev.com/blog/2015/07/15/interactive-audience-analytics-with-spark-and-hyperloglog/"/>
    <updated>2015-07-15T22:07:44-04:00</updated>
    <id>http://eugenezhulenev.com/blog/2015/07/15/interactive-audience-analytics-with-spark-and-hyperloglog</id>
    <content type="html"><![CDATA[<p>At <a href="http://collective.com">Collective</a> we are working not only on cool things like 
<a href="/blog/2015/06/10/2015-06-10-feature-engineering-at-scale">Machine Learning and Predictive Modeling</a>, 
but also on reporting that can be tedious and boring. However at our scale even simple reporting 
application can become challenging engineering problem. This post is based on talk that 
I gave at <a href="http://www.meetup.com/ny-scala/events/223751768/">NY-Scala Meetup</a>. Slides are available <a href="/talks/interactive-audience-analytics/">here</a>.</p>

<blockquote>
  <p>Example application is available on github: <a href="https://github.com/collectivemedia/spark-hyperloglog">https://github.com/collectivemedia/spark-hyperloglog</a></p>
</blockquote>

<!-- more -->

<h2 id="impression-log">Impression Log</h2>

<p>We are building reporting application that is based on impression log. It’s not exactly the way how we get data from out partners,
it’s pre-aggregated by Ad, Site, Cookie. And even in this pre-aggregated format it takes hundreds of gigabytes per day on HDFS.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
Ad            | Site          | Cookie          | Impressions | Clicks | Segments                     &lt;br /&gt;
————- |————– | ————— | ———– | —— | ——————————-
bmw_X5        | forbes.com    | 13e835610ff0d95 | 10          | 1      | [a.m, b.rk, c.rh, d.sn, …] &lt;br /&gt;
mercedes_2015 | forbes.com    | 13e8360c8e1233d | 5           | 0      | [a.f, b.rk, c.hs, d.mr, …] &lt;br /&gt;
nokia         | gizmodo.com   | 13e3c97d526839c | 8           | 0      | [a.m, b.tk, c.hs, d.sn, …] &lt;br /&gt;
apple_music   | reddit.com    | 1357a253f00c0ac | 3           | 1      | [a.m, b.rk, d.sn, e.gh, …] &lt;br /&gt;
nokia         | cnn.com       | 13b23555294aced | 2           | 1      | [a.f, b.tk, c.rh, d.sn, …] &lt;br /&gt;
apple_music   | facebook.com  | 13e8333d16d723d | 9           | 1      | [a.m, d.sn, g.gh, s.hr, …] &lt;br /&gt;
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Each cookie id has assigned segments which are just 4-6 letters code, that represents some information about cookie, that we
get from 3rd party data providers such as <a href="http://www.bluekai.com">Blukai</a>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
- a.m  : Male
- a.f  : Female
- b.tk : $75k-$100k annual income
- b.rk : $100k-$150k annual income
- c.hs : High School
- c.rh : College
- d.sn : Single
- d.mr : Married
</pre></div>
</div>
 </figure></notextile></div></p>

<p>For example if cookie has assigned <code>a.m</code> segment, it means that we think (actually data provider thinks) that this cookie belongs to male.
The same thing for annual income level. </p>

<p>We don’t have precise information, to whom exactly particular cookie belongs, and what is real
annual income level, this segments are essentially probabilistic, but we can get very interesting insights from this data.</p>

<h3 id="what-we-can-do-with-this-data">What we can do with this data</h3>

<p>Using this impression log we can answer some interesting questions</p>

<ul>
  <li>We can calculate a given group’s prevalence in a campaign’s audience, eg. what role do <strong>males</strong> play in the optimized audience for a <strong>Goodyear Tires</strong> campaign?</li>
  <li>What is <strong>male/female</strong> ratio for people who have seen <strong>bmw_X5</strong> ad on <strong>forbes.com</strong></li>
  <li>Income distribution for people who have seen Apple Music ad</li>
  <li>Nokia click distribution across different education levels  </li>
</ul>

<p>Using this basic questions we can create so called “Audience Profile”, that describes what type of audience is prevailing in optimized campaign or partner web site.</p>

<p><img class="center" src="/talks/interactive-audience-analytics/affinity.png"></p>

<p>Blue bar means that this particular segment tend to view ad/visit web site more than on average, and red bar mean less. For example for <strong>Goodyear Tires</strong> we expect to see
more <strong>male</strong> audience than <strong>female</strong>.</p>

<h2 id="solving-problem-with-sql">Solving problem with SQL</h2>

<p>SQL looks like an easy choice for this problem, however as I already mentioned we have hundreds of gigabytes of data every day, and we
need to get numbers based on 1 year history in seconds. Hive/Impala simply can’t solve this problem.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
<span class="class">select</span> <span class="predefined">count</span>(<span class="keyword">distinct</span> cookie_id) <span class="keyword">from</span> impressions
    <span class="keyword">where</span> site = <span class="error">‘</span>forbes.com<span class="error">’</span>
    <span class="keyword">and</span> ad = <span class="error">‘</span>bmw_X5<span class="error">’</span>
    <span class="keyword">and</span> segment contains <span class="error">‘</span>a.m<span class="error">’</span>
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Unfortunately we have almost infinite combinations of filters that users can define, so it’s not feasible to pre-generate all possible reports.
Users can use any arbitrary ad, site, campaign, order filter combinations, and may want to know audience intersection with any segment.</p>

<h2 id="audience-cardinality-approximation-with-hyperloglog">Audience cardinality approximation with HyperLogLog</h2>

<p>We came up with different solution, instead of providing precise results for every query, we are providing approximated number, but with
very high precision. Usually error is around 2% which for this particular application is really good. We don’t need to know exact number of male/female
cookies in audience. To be able to say what audience is prevailing, approximated numbers are more than enough.</p>

<p>We use <a href="https://en.wikipedia.org/wiki/HyperLogLog">HyperLogLog</a>, which is algorithm for the count-distinct problem, 
approximating the number of distinct elements (cardinality). It uses finite space and has configurable precision. 
It able to estimate cardinalities of &gt;10^9 with a typical accuracy of 2%, using 1.5kB of memory.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
trait HyperLogLog {
    <span class="keyword">def</span> <span class="function">add</span>(<span class="key">cookieId</span>: <span class="predefined-type">String</span>): Unit
    <span class="comment">//   |A|</span>
    <span class="keyword">def</span> <span class="function">cardinality</span>(): <span class="predefined-type">Long</span>
    <span class="comment">//   |A ∪ B|</span>
    <span class="keyword">def</span> <span class="function">merge</span>(<span class="key">other</span>: HyperLogLog): HyperLogLog
    <span class="comment">//   |A ∩ B| = |A| + |B| - |A ∪ B|,</span>
    <span class="keyword">def</span> <span class="function">intersect</span>(<span class="key">other</span>: HyperLogLog): <span class="predefined-type">Long</span>
}
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Here is roughly API that is provided by <code>HyperLogLog</code>. You can add new cookieId to it, get cardinality estimation of unique cookies that were 
already added to it, merge it with another <code>HyperLogLog</code>, and finally get intersection. It’s important to notice that
after <code>intersect</code> operation <code>HyperLogLog</code> object is lost, and you have only approximated intersection cardinality. 
So usually <code>HyperLogLog</code> intersection is the last step in computation.</p>

<p>I suggest you to watch awesome talk by <a href="https://twitter.com/avibryant">Avi Bryant</a> where he discusses not only HyperLogLog but lot’s of other
approximation data structures that can be useful for big-data analytics: <a href="http://www.infoq.com/presentations/abstract-algebra-analytics">http://www.infoq.com/presentations/abstract-algebra-analytics</a>.</p>

<h2 id="from-cookies-to-hyperloglog">From cookies to HyperLogLog</h2>

<p>We split out original impression log into two tables. </p>

<p>For ad impressions table we remove segment information and aggregate cookies, impressions and clicks by Ad and Site. <code>HyperLogLog</code> can 
be used in aggregation function exactly the same was as <code>sum</code> operation. Zero is empty <code>HyperLogLog</code>, and plus operation is <code>merge</code> (btw it’s exactly
properties required by <code>Monoid</code>)</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
Ad            | Site          | Cookies HLL        | Impressions | Clicks 
————- | ————- | —————— | ———– | —— 
bmw_X5        | forbes.com    | HyperLogLog@23sdg4 | 5468        | 35   &lt;br /&gt;
bmw_X5        | cnn.com       | HyperLogLog@84jdg4 | 8943        | 29   &lt;br /&gt;
</pre></div>
</div>
 </figure></notextile></div></p>

<p>For segments table we remove ad and site information, and aggregate data by segment.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
Segment       | Cookies HLL        | Impressions | Clicks
————- | —————— | ———– | ——
Male          | HyperLogLog@85sdg4 | 235468      | 335 &lt;br /&gt;
$100k-$150k   | HyperLogLog@35jdg4 | 569473      | 194 &lt;br /&gt;
</pre></div>
</div>
 </figure></notextile></div></p>

<h3 id="percent-of-college-and-high-school-education-in-bmw-campaign">Percent of college and high school education in BMW campaign</h3>

<p>If you imaging that we can load these tables into <code>Seq</code>, then audience intersection becomes really straightforward task, that can
be solved in couple line of functional scala operations.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">case</span> <span class="type">class</span> <span class="class">Audience</span>(<span class="key">ad</span>: <span class="predefined-type">String</span>, <span class="key">site</span>: <span class="predefined-type">String</span>, <span class="key">hll</span>: HyperLogLog, <span class="key">imp</span>: <span class="predefined-type">Long</span>, <span class="key">clk</span>: <span class="predefined-type">Long</span>)&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;<span class="keyword">case</span> <span class="type">class</span> <span class="class">Segment</span>(<span class="key">name</span>: <span class="predefined-type">String</span>, <span class="key">hll</span>: HyperLogLog, <span class="key">imp</span>: <span class="predefined-type">Long</span>, <span class="key">clk</span>: <span class="predefined-type">Long</span>)&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;val <span class="key">adImpressions</span>: Seq[Audience] = <span class="error">…</span>
val <span class="key">segmentImpressions</span>: Seq[<span class="predefined-type">Segment</span>] = <span class="error">…</span>&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;val <span class="key">bmwCookies</span>: HyperLogLog = adImpressions
    .filter(&lt;em&gt;.ad = <span class="error">“</span>bmw_X5<span class="error">”</span>)
    .map(&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">em&gt;.hll).reduce(_ merge _)&lt;</span><span class="delimiter">/</span></span>p&gt;

&lt;p&gt;val <span class="key">educatedCookies</span>: HyperLogLog = segmentImpressions
    .filter(&lt;em&gt;.segment <span class="keyword">in</span> Seq(<span class="error">“</span>College<span class="error">”</span>, <span class="error">“</span>High School<span class="error">”</span>))
    .map(&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">em&gt;.hll).reduce( _ merge _)&lt;</span><span class="delimiter">/</span></span>p&gt;

&lt;p&gt;val p = (bmwCookies intersect educatedCookies) / bmwCookies.count()
</pre></div>
</div>
 </figure></notextile></div></p>

<h2 id="spark-dataframes-with-hyperloglog">Spark DataFrames with HyperLogLog</h2>

<p>Obviously we can’t load all the data into scala <code>Seq</code> on single machine, because it’s huge, even after removing cookie level data
and transforming it into <code>HyperLogLog</code> objects, it’s around 1-2 gigabytes of data for single day.</p>

<p>So we have to use some distributed data processing framework to solve this problem, and we chose Spark.</p>

<h3 id="what-is-spark-dataframe">What is Spark DataFrame</h3>

<ul>
  <li>Inspired by R data.frame and Python/Pandas DataFrame</li>
  <li>Distributed collection of rows organized into named columns</li>
  <li>Used to be SchemaRDD in Spark &lt; 1.3.0</li>
</ul>

<h3 id="high-level-dataframe-operations">High-Level DataFrame Operations</h3>

<ul>
  <li>Selecting required columns</li>
  <li>Filtering</li>
  <li>Joining different data sets</li>
  <li>Aggregation (count, sum, average, etc)</li>
</ul>

<p>You can start from <a href="https://spark.apache.org/docs/1.3.0/sql-programming-guide.html">Spark DataFrame guide</a> or <a href="https://databricks.com/blog/2015/02/17/introducing-dataframes-in-spark-for-large-scale-data-science.html">DataBricks blog post</a>.</p>

<h3 id="ad-impressions-and-segments-in-dataframes">Ad impressions and segments in DataFrames</h3>

<p>We store all out data on HDFS using Parquet data format, and that’s how it looks after it’s loaded into Spark DataFrame.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
val <span class="key">adImpressions</span>: DataFrame = sqlContext.parquetFile(<span class="error">“</span><span class="regexp"><span class="delimiter">/</span><span class="content">aa</span><span class="delimiter">/</span></span>audience<span class="error">”</span>)&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;adImpressions.printSchema()
<span class="comment">// root</span>
<span class="comment">//   | – ad: string (nullable = true)</span>
<span class="comment">//   | – site: string (nullable = true)</span>
<span class="comment">//   | – hll: binary (nullable = true)</span>
<span class="comment">//   | – impressions: long (nullable = true)</span>
<span class="comment">//   | – clicks: long (nullable = true)&lt;/p&gt;</span>

&lt;p&gt;val <span class="key">segmentImpressions</span>: DataFrame = sqlContext.parquetFile(<span class="error">“</span><span class="regexp"><span class="delimiter">/</span><span class="content">aa</span><span class="delimiter">/</span></span>segments<span class="error">”</span>)&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;segmentImpressions.printSchema()
<span class="comment">// root</span>
<span class="comment">//   | – segment: string (nullable = true)</span>
<span class="comment">//   | – hll: binary (nullable = true)</span>
<span class="comment">//   | – impressions: long (nullable = true)</span>
<span class="comment">//   | – clicks: long (nullable = true)</span>
</pre></div>
</div>
 </figure></notextile></div></p>

<p><code>HyperLogLog</code> is essentially huge <code>Array[Byte]</code> with some clever hashing and math, so it’s straightforward to store it on HDFS in serialized form.</p>

<h2 id="working-with-spark-dataframe">Working with Spark DataFrame</h2>

<p>We want to know answer for the same question: “Percent of college and high school education in BMW campaign”.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">import</span> <span class="include">org.apache.spark.sql.functions._</span>
<span class="keyword">import</span> <span class="include">org.apache.spark.sql.HLLFunctions._</span>&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;val <span class="key">bmwCookies</span>: HyperLogLog = adImpressions
    .filter(col(<span class="error">“</span>ad<span class="error">”</span>) === <span class="error">“</span>bmw_X5<span class="error">”</span>)
    .select(mergeHll(col(<span class="error">“</span>hll<span class="error">”</span>)).first() <span class="comment">// – sum(clicks)&lt;/p&gt;</span>

&lt;p&gt;val <span class="key">educatedCookies</span>: HyperLogLog = hllSegments
    .filter(col(<span class="error">“</span>segment<span class="error">”</span>) <span class="keyword">in</span> Seq(<span class="error">“</span>College<span class="error">”</span>, <span class="error">“</span>High School<span class="error">”</span>))
    .select(mergeHll(col(<span class="error">“</span>hll<span class="error">”</span>)).first()&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;val p = (bmwCookies intersect educatedCookies) / bmwCookies.count()
</pre></div>
</div>
 </figure></notextile></div></p>

<p>It looks pretty familiar, not too far from example based on scala <code>Seq</code>. Only one unusual operation, that you might notice if you have some
experience with Spark is <code>mergeHLL</code>. It’s not available in Spark by default, it’s custom <code>PartialAggregate</code> function that can compute aggregates
for serialized <code>HyperLogLog</code> objects.</p>

<h3 id="writing-your-own-spark-aggregation-function">Writing your own Spark aggregation function</h3>

<p>To write you own aggregation function you need to define function that will be applied to each row in <code>RDD</code> partition, in this example
it’s called <code>MergeHLLPartition</code>. Then you need to define function that will take results from different partitions and merge them together, for <code>HyperLogLog</code>
it’s called <code>MergeHLLMerge</code>. And finally you need to tell Spark how you want it to split your computation across <code>RDD</code> (DataFrame is backed by <code>RDD[Row]</code>) </p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">case</span> <span class="type">class</span> <span class="class">MergeHLLPartition</span>(<span class="key">child</span>: <span class="predefined-type">Expression</span>)
  <span class="directive">extends</span> AggregateExpression with trees.UnaryNode[<span class="predefined-type">Expression</span>] { <span class="error">…</span> }&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;<span class="keyword">case</span> <span class="type">class</span> <span class="class">MergeHLLMerge</span>(<span class="key">child</span>: <span class="predefined-type">Expression</span>)
  <span class="directive">extends</span> AggregateExpression with trees.UnaryNode[<span class="predefined-type">Expression</span>] { <span class="error">…</span> }&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;<span class="keyword">case</span> <span class="type">class</span> <span class="class">MergeHLL</span>(<span class="key">child</span>: <span class="predefined-type">Expression</span>)
  <span class="directive">extends</span> PartialAggregate with trees.UnaryNode[<span class="predefined-type">Expression</span>] {&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;override <span class="keyword">def</span> <span class="key">asPartial</span>: SplitEvaluation = {
    val partial = Alias(MergeHLLPartition(child), <span class="error">“</span>PartialMergeHLL<span class="error">”</span>)()&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;pre&gt;&lt;code&gt;SplitEvaluation(
  MergeHLLMerge(partial.toAttribute),
  partial :: Nil
)   } }
&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">code&gt;&lt;</span><span class="delimiter">/</span></span>pre&gt;

&lt;p&gt;<span class="keyword">def</span> <span class="function">mergeHLL</span>(<span class="key">e</span>: Column): Column = MergeHLL(e.expr)
</pre></div>
</div>
 </figure></notextile></div></p>

<p>After that writing aggregations becomes really easy task, and your expressions will look like “native” DataFrame code, which is really nice, and super
easy to read and reason about. </p>

<p>Also it works much faster then solving this problem with scala transformations on top of <code>RDD[Row]</code>, as Spark catalyst optimizer can executed optimized
plan and reduce amount of data that needs to be shuffled between spark nodes.</p>

<p>And finally it’s so much easier to manage mutable state. Spark encourage you to use immutable transformations, and it’s really cool until you need
extreme performance from your code. For example if you are using something like <code>reduce</code> or <code>aggregateByKey</code> you don’t really know when and where
your function instantiated and when it’s done with <code>RDD</code> partition and result transferred to another Spark node for merge operation. With <code>AggregateExpression</code> 
you have explicit control over mutable state, and it’s totally safe to accumulate mutable state during execution for single partition, and at the end when
you’ll need to send data to other node you can create immutable copy.</p>

<p>In this particular case using mutable <code>HyperLogLog</code> merge implementation helped to speed up computation time almost 10x times. For each partition <code>HyperLogLog</code> state
accumulated in single mutable <code>Array[Byte]</code> and at the end when data needs to be transferred somewhere else for merging with another partition, immutable copy is created.</p>

<h3 id="some-fancy-aggregates-with-dataframe-api">Some fancy aggregates with DataFrame Api</h3>

<p>You can write much more complicated aggregation functions, for example to compute aggregate based on multiple columns. Here is code sample from 
our audience analytics project.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;<span class="keyword">case</span> <span class="type">class</span> <span class="class">SegmentEstimate</span>(<span class="key">cookieHLL</span>: HyperLogLog, <span class="key">clickHLL</span>: HyperLogLog)&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;type SegmentName = <span class="predefined-type">String</span>&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;val <span class="key">dailyEstimates</span>: RDD[(SegmentName, <span class="predefined-type">Map</span>[LocalDate, SegmentEstimate])] =
    segments.groupBy(segment_name).agg(
      segment_name,
      mergeDailySegmentEstimates(
        mkDailySegmentEstimate(      <span class="comment">// – Map[LocalDate, SegmentEstimate]</span>
          dt,
          mkSegmentEstimate(         <span class="comment">// – SegmentEstimate(cookieHLL, clickHLL)</span>
            cookie_hll,
            click_hll)
        )
      )
    )
</pre></div>
</div>
 </figure></notextile></div></p>

<p>This codes computes daily audience aggregated by segment. Using Spark <code>PartialAggregate</code> function 
saves a lot of network traffic and minimizes distributed shuffle size. </p>

<p>This aggregation is possible because of nice properties of <code>Monoid</code></p>

<ul>
  <li><code>HyperLogLog</code> is a <code>Monoid</code> (has <code>zero</code> and <code>plus</code> operations)</li>
  <li><code>SegmentEstimate</code> is a <code>Monoid</code> (tuple of two monoids)</li>
  <li><code>Map[K, SegmentEstimate]</code> is a <code>Monoid</code> (map with value monoid value type is monoid itself)</li>
</ul>

<h3 id="problems-with-custom-aggregation-functions">Problems with custom aggregation functions</h3>

<ul>
  <li>Right now it’s closed API, so you need to place all your code under <code>org.apache.spark.sql</code> package.</li>
  <li>It’s no guarantee that it will work in next Spark release.</li>
  <li>If you want to try, I suggest you to start with <code>org.apache.spark.sql.catalyst.expressions.Sum</code> as example.</li>
</ul>

<h2 id="spark-as-in-memory-sql-database">Spark as in-memory SQL database</h2>

<p>We use Spark as in-memory database that serves SQL (composed with DataFrame Api) queries. </p>

<p>People tend to think about spark with very batch oriented mindset. Start Spark cluster in Yarn, do computation, kill cluster. Submit you application to 
standalone Spark cluster (Mesos), kill it. Biggest problem with this approach that after your application is done, and JVM is killed, <code>SparkContext</code> is lost,
and even if you are running Spark in standalone mode, all data cached by your application is lost.</p>

<p>We use Spark in totally different way. We start Spark cluster in Yarn, load data to it from HDFS, cache it in memory, and <strong>do not shutdown</strong>. We
keep JVM running, it holds a reference to <code>SparkContext</code> and keeps all the data in memory on worker nodes.</p>

<p>Our backend application is essentially very simpre REST/JSON server built with Spray, that holds <code>SparkContext</code> reference, receive requests via
URL parameters, runs queries in Spark and return response in JSON.</p>

<p>Right now (July 2015) we have data starting from April, and it’s around 100g cached in 40 nodes. We need to keep 1 year history, so we don’t expect
more than 500g. And we are very confident that we can scale horizontally without seriously affecting performance. Right now average 
request response time is 1-2 seconds which is really good for our use case.</p>

<h2 id="spark-best-practices">Spark Best practices</h2>

<p>Here are configuration options that I found really useful for our specific task. You can find more details about each of them in Spark guide.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
- spark.scheduler.mode=FAIR
- spark.yarn.executor.memoryOverhead=4000
- spark.sql.autoBroadcastJoinThreshold=300000000 // ~300mb
- spark.serializer=org.apache.spark.serializer.KryoSerializer
- spark.speculation=true
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Also I found that it’s really important to repartition your dataset if you are going to cache it and use for queries. Optimal number of partitions is
around 4-6 for each executor core, with 40 nodes and 6 executor cores we use 1000 partitions for best performance.</p>

<p>If you have too many partitions Spark will spend too much time for coordination, and receiving results from all partitions. If too small, you might have
problems with too big block during shuffle that can kill not only performance, but all your cluster: <a href="https://issues.apache.org/jira/browse/SPARK-1476">SPARK-1476</a></p>

<h2 id="other-options">Other Options</h2>

<p>Before starting this project we were evaluating some other options</p>

<h3 id="hive">Hive</h3>

<p>Obviously it’s too slow for interactive UI backend, but we found it really useful for batch data processing. We use it to process raw logs
and build aggregated tables with <code>HyperLogLog</code> inside.</p>

<h3 id="impala">Impala</h3>

<p>To get good performance out of Impala it’s required to write C++ user defined functions, and it’s was not the task that I wanted to do. Also 
I’m not confident that even with custom C++ function Impala can show performance that we need.</p>

<h4 id="druid">Druid</h4>

<p><a href="http://druid.io/">Druid</a> is really interesting project, and it’s used in another project at Collective for slightly different problem, 
but it’s not in production yet.</p>

<ul>
  <li>Managing separate Druid cluster - it’s not the task that I want to do</li>
  <li>We have batch oriented process - and druid data ingestion is stream based</li>
  <li>Bad support for some of type of queries that we need - if I need to know intersection of some particular ad with all segments, in case of druid it will be 10k (number of segments) queries, and it will obviously fail to complete in 1-2 seconds </li>
  <li>Not clear how get data back from Druid - it’s hard to get data back from Druid later, if it will turn out that it doesn’t solve out problems well</li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>Spark is Awesome! I didn’t have any major issues with it, and it just works! New DataFrame API is amazing, and we are going to build lot’s of new cool projects at Collective
with Spar MLLib and GraphX, and I’m pretty sure they all will be successful.</p>

]]></content>
  </entry>
  
</feed>
