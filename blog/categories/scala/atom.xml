<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Scala | Eugene Zhulenev]]></title>
  <link href="http://eugenezhulenev.com/blog/categories/scala/atom.xml" rel="self"/>
  <link href="http://eugenezhulenev.com/"/>
  <updated>2014-10-18T21:51:32-04:00</updated>
  <id>http://eugenezhulenev.com/</id>
  <author>
    <name><![CDATA[Eugene Zhulenev]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Running Spark Tests in Standalone Cluster]]></title>
    <link href="http://eugenezhulenev.com/blog/2014/10/18/run-tests-in-standalone-spark-cluster/"/>
    <updated>2014-10-18T21:01:15-04:00</updated>
    <id>http://eugenezhulenev.com/blog/2014/10/18/run-tests-in-standalone-spark-cluster</id>
    <content type="html"><![CDATA[<blockquote>
  <p>The code for this application app can be found on <a href="https://github.com/ezhulenev/spark-testing">Github</a></p>
</blockquote>

<h3 id="running-spark-applications">Running Spark Applications</h3>

<p>To be able to run Spark jobs, Spark cluster needs to have all classes used by your application in it’s classpath.
You can put manually all jar files required by your application to Spark nodes, but it’s not cool.
Another solution is to manually set jar files that required to distribute to worker nodes
when you create SparkConf. One way to do it, is to package your application as a “fat-jar”,
so you need to distribute only single jar.
Industry standard for packaging Spark application is <a href="https://github.com/sbt/sbt-assembly">sbt-assembly</a> plugin,
and it’s used by Spark itself.</p>

<h3 id="testing-spark-applications">Testing Spark Applications</h3>

<p>If you need to test your Spark application, easiest way is to create local Spark Context for each test, or maybe shared between all tests.
When Spark is running in local mode, it’s running in the same JVM as your tests with same jar files in classpath.</p>

<p>If your tests requires data that doesn’t fit into single node, obvious solution is to run them in standalone Spark cluster
with sufficient number of nodes. At this time everything becomes more difficult. Now you need to package you application with tests
in single jar file, and submit it to Spark cluster with each test.</p>

<!-- more -->

<h3 id="example-application">Example Application</h3>

<p>To show how to run and test Spark applications I prepared very <a href="https://github.com/ezhulenev/spark-testing">simple application</a>.
It uses <a href="https://github.com/ezhulenev/scala-openbook">Scala OpenBook</a>
library to parse <a href="http://www.nyxdata.com/Data-Products/NYSE-OpenBook-History">NYSE OpenBook</a> messages (orders log from New York Stock Exchange),
distribute them to cluster as RDD, and count Buy and Sell orders by ticker.
Only purpose of this application is to have dependency on a library that for sure is not available on Spark nodes.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
<span class="type">class</span> <span class="class">OrdersFunctions</span>(<span class="annotation">@transient</span> <span class="key">sc</span>: SparkContext, <span class="key">orders</span>: <span class="predefined-type">Iterator</span>[OpenBookMsg]) <span class="directive">extends</span> <span class="predefined-type">Serializable</span> {&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;<span class="directive">private</span> val ordersRDD = sc.parallelize(orders.toSeq)&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;<span class="keyword">def</span> <span class="function">countBuyOrders</span>(): <span class="predefined-type">Map</span>[<span class="predefined-type">String</span>, <span class="predefined-type">Long</span>] = countOrders(OrderFunctions.isBuySide)&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;<span class="keyword">def</span> <span class="function">countSellOrders</span>(): <span class="predefined-type">Map</span>[<span class="predefined-type">String</span>, <span class="predefined-type">Long</span>] = countOrders(OrderFunctions.isSellSide)&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;<span class="directive">private</span> <span class="keyword">def</span> <span class="function">countOrders</span>(<span class="key">filter</span>: OpenBookMsg =&amp;gt; <span class="predefined-type">Boolean</span>): <span class="predefined-type">Map</span>[<span class="predefined-type">String</span>, <span class="predefined-type">Long</span>] =
    ordersRDD.filter(filter).
      map(order =&amp;gt; (order.symbol, order)).
      countByKey().toMap&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;}
</pre></div>
</div>
 </figure></notextile></div></p>

<p> </p>

<h3 id="assembly-main-application">Assembly Main Application</h3>

<p>Add sbt-assembly plugin in project/plugin.sbt</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
addSbtPlugin(<span class="error">“</span>com.eed3si9n<span class="error">”</span> % <span class="error">“</span>sbt-assembly<span class="error">”</span> % <span class="error">“</span><span class="float">0.11</span><span class="float">.2</span><span class="error">”</span>)
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Add assembly settings to build.sbt</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
<span class="comment">// Merge strategy shared between app &amp;amp; test&lt;/p&gt;</span>

&lt;p&gt;val <span class="key">sharedMergeStrategy</span>: (<span class="predefined-type">String</span> =&amp;gt; MergeStrategy) =&amp;gt; <span class="predefined-type">String</span> =&amp;gt; MergeStrategy =
  old =&amp;gt; {
    <span class="keyword">case</span> x <span class="keyword">if</span> x.startsWith(<span class="error">“</span>META-INF/ECLIPSEF.RSA<span class="error">”</span>) =&amp;gt; MergeStrategy.last
    <span class="keyword">case</span> x <span class="keyword">if</span> x.startsWith(<span class="error">“</span>META-INF/mailcap<span class="error">”</span>) =&amp;gt; MergeStrategy.last
    <span class="keyword">case</span> x <span class="keyword">if</span> x.endsWith(<span class="error">“</span>plugin.properties<span class="error">”</span>) =&amp;gt; MergeStrategy.last
    <span class="keyword">case</span> x =&amp;gt; old(x)
  }&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;<span class="comment">// Load Assembly Settings&lt;/p&gt;</span>

&lt;p&gt;assemblySettings&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;<span class="comment">// Assembly App&lt;/p&gt;</span>

&lt;p&gt;mainClass <span class="keyword">in</span> assembly := Some(<span class="error">“</span>com.github.ezhulenev.spark.RunSparkApp<span class="error">”</span>)&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;jarName <span class="keyword">in</span> assembly := <span class="error">“</span>spark-testing-example-app.jar<span class="error">”</span>&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;mergeStrategy <span class="keyword">in</span> assembly <span class="error">«</span>= (mergeStrategy <span class="keyword">in</span> assembly)(sharedMergeStrategy)
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Inside your application you need to create SparkConf and add current jar to it.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
  <span class="keyword">new</span> SparkConf().
      setMaster(<span class="error">“</span><span class="key">spark</span>:<span class="comment">//spark-host:7777”).</span>
      setJars(SparkContext.jarOfClass(<span class="local-variable">this</span>.getClass).toSeq).
      setAppName(<span class="error">“</span>SparkTestingExample<span class="error">”</span>)
</pre></div>
</div>
 </figure></notextile></div></p>

<p>After that you can use assembly command, and run assembled application in your Spark Cluster</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
&amp;gt; sbt assembly
&amp;gt; java -Dspark.master=spark://spark-host:7777 target/scala_2.10/spark-testing-example-app.jar
</pre></div>
</div>
 </figure></notextile></div></p>

<p> </p>

<h3 id="assembly-tests">Assembly Tests</h3>

<p>First step to run tests in standalone Spark Cluster is to package all main and test classes into single jar, that will be
transfered to each worker node before running tests. It’s very similar to assemblying main app.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
<span class="comment">// Assembly Tests&lt;/p&gt;</span>

&lt;p&gt;Project.inConfig(Test)(assemblySettings)&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;jarName <span class="keyword">in</span> (Test, assembly) := <span class="error">“</span>spark-testing-example-tests.jar<span class="error">”</span>&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;mergeStrategy <span class="keyword">in</span> (Test, assembly) <span class="error">«</span>= (mergeStrategy <span class="keyword">in</span> assembly)(sharedMergeStrategy)&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;test <span class="keyword">in</span> (Test, assembly) := {} <span class="comment">// disable tests in assembly</span>
</pre></div>
</div>
 </figure></notextile></div></p>

<p>I wrote simple sbt plugin that has <code>test-assembly</code> task. First this task assemblies jar
file with test classes and all dependencies, then set it’s location
to environment variable, and then starts tests.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
object TestWithSparkPlugin <span class="directive">extends</span> sbt.Plugin {&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;<span class="keyword">import</span> <span class="include">TestWithSparkKeys._</span>
  <span class="keyword">import</span> <span class="include">AssemblyKeys._</span>&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;object TestWithSparkKeys {
    lazy val testAssembled        = TaskKey&lt;a href=<span class="string"><span class="delimiter">&quot;</span><span class="content">&amp;quot;test-assembled&amp;quot;,</span><span class="delimiter">&quot;</span></span> title=<span class="string"><span class="delimiter">&quot;</span><span class="content">Run tests with standalone Spark cluster</span><span class="delimiter">&quot;</span></span>&gt;Unit&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">a&gt;</span></span><span class="error">
</span>    lazy val assembledTestsProp   = SettingKey&lt;a href=<span class="string"><span class="delimiter">&quot;</span><span class="content">&amp;quot;assembled-tests-prop&amp;quot;,</span><span class="delimiter">&quot;</span></span> title=<span class="string"><span class="delimiter">&quot;</span><span class="content">Environment variable name used to pass assembled jar name to test</span><span class="delimiter">&quot;</span></span>&gt;<span class="predefined-type">String</span>&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">a&gt;</span></span><span class="error">
</span>  }&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;lazy val <span class="key">baseTestWithSparkSettings</span>: Seq[sbt.Def.Setting[_]] = Seq(
    testAssembled        := TestWithSpark.testWithSparkTask.value,
    assembledTestsProp   := <span class="error">“</span>ASSEMBLED_TESTS<span class="error">”</span>
  )&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;lazy val <span class="key">testWithSparkSettings</span>: Seq[sbt.Def.Setting[_]] = baseTestWithSparkSettings&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;object TestWithSpark {&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;pre&gt;&lt;code&gt;<span class="keyword">def</span> <span class="key">assemblyTestsJarTask</span>: Initialize[Task[<span class="predefined-type">File</span>]] = Def.task {
  val assembled = (assembly <span class="keyword">in</span> Test).value
  sys.props(assembledTestsProp.value) = assembled.getAbsolutePath
  assembled
}

<span class="directive">private</span> <span class="keyword">def</span> runTests = Def.task {
  (test <span class="keyword">in</span> Test).value
}

<span class="keyword">def</span> <span class="key">testWithSparkTask</span>: Initialize[Task[Unit]] = Def.sequentialTask {
  assemblyTestsJarTask.value
  runTests.value
}   } } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<p>All Spark tests should inherit <code>ConfiguredSparkFlatSpec</code> with configured Spark Context. If assembled tests jar file
is available, it’s distributed to Spark worker nodes. If not, only local mode is supported.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
trait ConfiguredSparkFlatSpec <span class="directive">extends</span> FlatSpec with BeforeAndAfterAll {
  <span class="directive">private</span> val log = LoggerFactory.getLogger(classOf[ConfiguredSparkFlatSpec])&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;<span class="directive">private</span> val config = ConfigFactory.load()&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;<span class="directive">private</span> lazy val sparkConf = {
    val master = config.getString(<span class="error">“</span>spark.master<span class="error">”</span>)&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;pre&gt;&lt;code&gt;log.info(s<span class="string"><span class="delimiter">&quot;</span><span class="content">Create spark context. Master: </span><span class="inline"><span class="inline-delimiter">$</span>master</span><span class="delimiter">&quot;</span></span>)
val assembledTests = sys.props.get(<span class="string"><span class="delimiter">&quot;</span><span class="content">ASSEMBLED_TESTS</span><span class="delimiter">&quot;</span></span>)

val baseConf = <span class="keyword">new</span> SparkConf().
  setMaster(master).
  setAppName(<span class="string"><span class="delimiter">&quot;</span><span class="content">SparkTestingExample</span><span class="delimiter">&quot;</span></span>)

assembledTests match {
  <span class="keyword">case</span> None =&amp;gt;
    log.warn(s<span class="string"><span class="delimiter">&quot;</span><span class="content">Assembled tests jar not found. Standalone Spark mode is not supported</span><span class="delimiter">&quot;</span></span>)
    baseConf
  <span class="keyword">case</span> Some(path) =&amp;gt;
    log.info(s<span class="string"><span class="delimiter">&quot;</span><span class="content">Add assembled tests to Spark Context from: </span><span class="inline"><span class="inline-delimiter">$</span>path</span><span class="delimiter">&quot;</span></span>)
    baseConf.setJars(path :: Nil)
}   }
&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">code&gt;&lt;</span><span class="delimiter">/</span></span>pre&gt;

&lt;p&gt;lazy val sc = <span class="keyword">new</span> SparkContext(sparkConf)&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;</span></span><span class="error">
</span>
&lt;p&gt;override <span class="directive">protected</span> <span class="keyword">def</span> <span class="function">afterAll</span>(): Unit = {
    <span class="local-variable">super</span>.afterAll()
    sc.stop()
  }
}
</pre></div>
</div>
 </figure></notextile></div></p>

<p> </p>

<h3 id="running-tests">Running Tests</h3>

<p>By default <code>spark.master</code> property is set to local[2]. So you can run tests in local mode. If you want run tests
in standalone Spark, you need to override <code>spark.master</code> with your master node.</p>

<p>If you’ll try to run <code>test</code> command with standalone cluster it will fail with ClassNotFoundException</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
&amp;gt; sbt -Dspark.master=spark://spark-host:7777 test
&amp;gt;
&amp;gt; Create spark context. Master: spark://Eugenes-MacBook-Pro.local:7077
&amp;gt; Assembled tests jar not found. Standalone Spark mode is not supported
&amp;gt;
&amp;gt; [error] Failed tests:
&amp;gt; org.apache.spark.SparkException: Job aborted due to stage failure:
&amp;gt; Task 2 in stage 1.0 failed 4 times, most recent failure:
&amp;gt; Lost task 2.3 in stage 1.0 (TID 30, 192.168.0.11):
&amp;gt; java.lang.ClassNotFoundException: com.scalafi.openbook.OpenBookMsg
</pre></div>
</div>
 </figure></notextile></div></p>

<p>However <code>test-assembled</code> will be successfull</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
&amp;gt; sbt -Dspark.master=spark://spark-host:7777 test-assembled
&amp;gt;
&amp;gt; Create spark context. Master: spark://Eugenes-MacBook-Pro.local:7077
&amp;gt; Add assembled tests to Spark Context from: /Users/ezhulenev/spark-testing/target/scala-2.10/spark-testing-example-tests.jar
&amp;gt;
&amp;gt; [info] Run completed in 7 seconds, 587 milliseconds.
&amp;gt; [info] Total number of tests run: 2
&amp;gt; [info] Suites: completed 1, aborted 0
&amp;gt; [info] Tests: succeeded 2, failed 0, canceled 0, ignored 0, pending 0
&amp;gt; [info] All tests passed.
&amp;gt; [success] Total time: 37 s
</pre></div>
</div>
 </figure></notextile></div></p>

<p> </p>

<blockquote>
  <p>The code for this application app can be found on <a href="https://github.com/ezhulenev/spark-testing">Github</a></p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Akka Cluster for Value at Risk Calculation (Part 2/2)]]></title>
    <link href="http://eugenezhulenev.com/blog/2014/05/01/akka-cluster-for-value-at-risk-calculation-2/"/>
    <updated>2014-05-01T22:03:45-04:00</updated>
    <id>http://eugenezhulenev.com/blog/2014/05/01/akka-cluster-for-value-at-risk-calculation-2</id>
    <content type="html"><![CDATA[<h3 id="synopsis">Synopsis</h3>

<blockquote>
  <p>The code &amp; sample app can be found on <a href="https://github.com/ezhulenev/akka-var-calculation">Github</a></p>
</blockquote>

<p>Risk Management in finance is one of the most common <a href="http://www.gridgain.com/usecases/risk-management/">case studies</a>
for Grid Computing, and Value-at-Risk is most widely used risk measure.
In this article I’m going to show how to <code>scale-out</code> Value-at-Risk calculation to multiple nodes with latest <a href="http://akka.io">Akka</a> middleware.
In Part 1 I’m describing the problem and <code>single-node</code> solution, and in Part 2 I’m scaling it to multiple nodes.</p>

<h2 id="part-22-scale-out-var-calculation-to-multiple-nodes">[Part 2/2] Scale-out VaR calculation to multiple nodes</h2>

<p>Go to <a href="/blog/2014/05/01/akka-cluster-for-value-at-risk-calculation-1">Part 1</a> where Value at Risk calculator defined.</p>

<!-- more -->

<h3 id="akka-cluster">Akka Cluster</h3>

<p>Akka is amazing library for Actors abstraction for Scala and Java.</p>

<blockquote>
  <p>Actors are location transparent and distributable by design. This means that you can write your application without hardcoding how it will be deployed and distributed, and then later just configure your actor system against a certain topology <a href="http://doc.akka.io/docs/akka/snapshot/general/remoting.html">…</a></p>
</blockquote>

<p>Akka Cluster provides a fault-tolerant decentralized peer-to-peer based cluster membership service with no single point of failure or single point of bottleneck. It does this using gossip protocols and an automatic failure detector.</p>

<p>It means that it’s very easy to distribute portfolio simulations to multiple nodes.</p>

<h3 id="messages">Messages</h3>

<p>Messages that are passed around between backend &amp; calculator nodes:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">messages</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">WakeUp</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">case</span> <span class="k">object</span> <span class="nc">RegisterBackend</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">case</span> <span class="k">class</span> <span class="nc">RunSimulation</span><span class="o">(</span><span class="n">positions</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Position</span><span class="o">],</span>
</span><span class='line'>                           <span class="n">simulations</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span>
</span><span class='line'>                           <span class="n">generator</span><span class="k">:</span> <span class="kt">MarketFactorsGenerator</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">case</span> <span class="k">class</span> <span class="nc">SimulationResponse</span><span class="o">(</span><span class="n">v</span><span class="k">:</span> <span class="kt">Vector</span><span class="o">[</span><span class="kt">Double</span><span class="o">])</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="simulation-backend-node">Simulation Backend Node</h3>

<p>First type of node in a cluster is SimulationNode that is going to run all ‘heavy’ portfolio price simulations.</p>

<p>After joining the cluster it subscribes for all <code>MemberUp</code> messages, and when new node with role <code>calculator</code> joins the cluster, it register itself as available backend.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">PortfolioValueSimulationBackend</span> <span class="k">extends</span> <span class="nc">Actor</span> <span class="k">with</span> <span class="nc">ActorLogging</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">private</span> <span class="k">val</span> <span class="n">cluster</span> <span class="k">=</span> <span class="nc">Cluster</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="n">system</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">override</span> <span class="k">def</span> <span class="n">preStart</span><span class="o">()</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="n">cluster</span><span class="o">.</span><span class="n">subscribe</span><span class="o">(</span><span class="n">self</span><span class="o">,</span> <span class="n">classOf</span><span class="o">[</span><span class="kt">MemberUp</span><span class="o">])&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">override</span> <span class="k">def</span> <span class="n">postStop</span><span class="o">()</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="n">cluster</span><span class="o">.</span><span class="n">unsubscribe</span><span class="o">(</span><span class="n">self</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">receive</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">RunSimulation</span><span class="o">(</span><span class="n">portfolio</span><span class="o">,</span> <span class="n">simulations</span><span class="o">,</span> <span class="n">generator</span><span class="o">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>      <span class="n">runSimulation</span><span class="o">(</span>
</span><span class='line'>        <span class="nc">Portfolio</span><span class="o">(</span><span class="n">nel</span><span class="o">(</span><span class="n">portfolio</span><span class="o">.</span><span class="n">head</span><span class="o">,</span> <span class="n">portfolio</span><span class="o">.</span><span class="n">tail</span><span class="o">)),</span>
</span><span class='line'>        <span class="n">simulations</span><span class="o">,</span> <span class="n">generator</span>
</span><span class='line'>      <span class="o">)</span> <span class="n">pipeTo</span> <span class="n">sender</span><span class="o">()&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">case</span> <span class="n">state</span><span class="k">:</span> <span class="kt">CurrentClusterState</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>  <span class="n">state</span><span class="o">.</span><span class="n">members</span><span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">status</span> <span class="o">==</span> <span class="nc">MemberStatus</span><span class="o">.</span><span class="nc">Up</span><span class="o">)</span> <span class="n">foreach</span> <span class="n">register</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="nc">MemberUp</span><span class="o">(</span><span class="n">member</span><span class="o">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>  <span class="n">register</span><span class="o">(</span><span class="n">member</span><span class="o">)</span>   <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">private</span> <span class="k">def</span> <span class="n">register</span><span class="o">(</span><span class="n">member</span><span class="k">:</span> <span class="kt">Member</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="n">hasRole</span><span class="o">(</span><span class="err">“</span><span class="n">calculator</span><span class="err">”</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">memberRoot</span> <span class="k">=</span> <span class="nc">RootActorPath</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="n">address</span><span class="o">)</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">backendManager</span> <span class="k">=</span>
</span><span class='line'>        <span class="n">context</span><span class="o">.</span><span class="n">actorSelection</span><span class="o">(</span><span class="n">memberRoot</span> <span class="o">/</span> <span class="err">“</span><span class="n">user</span><span class="err">”</span> <span class="o">/</span> <span class="err">“</span><span class="n">backendManager</span><span class="err">”</span><span class="o">)</span>
</span><span class='line'>      <span class="n">backendManager</span> <span class="o">!</span> <span class="nc">RegisterBackend</span>
</span><span class='line'>    <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">private</span> <span class="k">def</span> <span class="n">runSimulation</span><span class="o">(</span><span class="n">portfolio</span><span class="k">:</span> <span class="kt">Portfolio</span><span class="o">,</span>
</span><span class='line'>        <span class="n">simulations</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span>
</span><span class='line'>        <span class="n">generator</span><span class="k">:</span> <span class="kt">MarketFactorsGenerator</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">SimulationResponse</span><span class="o">]</span> <span class="k">=</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">val</span> <span class="n">process</span> <span class="k">=</span> <span class="n">generator</span><span class="o">.</span><span class="n">factors</span><span class="o">.</span><span class="n">take</span><span class="o">(</span><span class="n">simulations</span><span class="o">).</span><span class="n">map</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="n">factors</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>    <span class="nc">PortfolioPricer</span><span class="o">.</span><span class="n">price</span><span class="o">(</span><span class="n">portfolio</span><span class="o">).</span>
</span><span class='line'>        <span class="n">fold</span><span class="o">(</span><span class="n">err</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">sys</span><span class="o">.</span><span class="n">error</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;Failure: $err&quot;</span><span class="o">),</span> <span class="n">identity</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">task</span> <span class="k">=</span> <span class="nc">Task</span><span class="o">.</span><span class="n">fork</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">process</span><span class="o">.</span><span class="n">runLog</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">portfolioValues</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">portfolioValues</span><span class="o">.</span><span class="n">toVector</span><span class="o">)</span>
</span><span class='line'><span class="o">}(</span><span class="n">executor</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">p</span> <span class="k">=</span> <span class="nc">Promise</span><span class="o">[</span><span class="kt">SimulationResponse</span><span class="o">]()</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span><span class="o">.</span><span class="n">runAsync</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="o">-\/(</span><span class="n">err</span><span class="o">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">p</span><span class="o">.</span><span class="n">failure</span><span class="o">(</span><span class="n">err</span><span class="o">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="o">\/-(</span><span class="n">result</span><span class="o">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">p</span><span class="o">.</span><span class="n">success</span><span class="o">(</span><span class="nc">SimulationResponse</span><span class="o">(</span><span class="n">result</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">p</span><span class="o">.</span><span class="n">future</span>   <span class="o">}</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<h3 id="calculator-node">Calculator Node</h3>

<p>Calculator node joins the cluster, and receive <code>RegisterBackend</code> messages from simulation nodes. It keeps track of all available simulation backend nodes, and when gets a request to calculate market risk,
it splits this request into multiple simulation tasks and send them to all available simulation backends.</p>

<h5 id="backend-nodes-manager">Backend Nodes Manager</h5>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">BackendNodesManager</span> <span class="k">extends</span> <span class="nc">Actor</span> <span class="k">with</span> <span class="nc">ActorLogging</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">private</span><span class="o">[</span><span class="kt">this</span><span class="o">]</span> <span class="k">val</span> <span class="n">backendNodes</span> <span class="k">=</span> <span class="nc">ListBuffer</span><span class="o">.</span><span class="n">empty</span><span class="o">[</span><span class="kt">ActorRef</span><span class="o">]</span>
</span><span class='line'>  <span class="k">private</span><span class="o">[</span><span class="kt">this</span><span class="o">]</span> <span class="k">var</span> <span class="n">jobCounter</span> <span class="k">=</span> <span class="mi">0</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">private</span><span class="o">[</span><span class="kt">this</span><span class="o">]</span> <span class="k">implicit</span> <span class="k">val</span> <span class="n">timeout</span> <span class="k">=</span> <span class="nc">Timeout</span><span class="o">(</span><span class="mf">10.</span><span class="n">seconds</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">override</span> <span class="k">def</span> <span class="n">receive</span><span class="k">:</span> <span class="kt">Receive</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">WakeUp</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="o">(</span><span class="err">“</span><span class="nc">Wake</span> <span class="n">up</span> <span class="n">backend</span> <span class="n">nodes</span> <span class="n">manager</span><span class="err">”</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">case</span> <span class="n">run</span><span class="k">:</span> <span class="kt">RunSimulation</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>  <span class="n">jobCounter</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">backendN</span> <span class="k">=</span> <span class="n">jobCounter</span> <span class="o">%</span> <span class="n">backendNodes</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>  <span class="n">log</span><span class="o">.</span><span class="n">debug</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;Pass simulation request to backend: $backendN&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="n">backendNodes</span><span class="o">(</span><span class="n">backendN</span><span class="o">)</span> <span class="o">?</span> <span class="n">run</span> <span class="n">pipeTo</span> <span class="n">sender</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="nc">RegisterBackend</span> <span class="k">if</span> <span class="o">!</span><span class="n">backendNodes</span><span class="o">.</span><span class="n">contains</span><span class="o">(</span><span class="n">sender</span><span class="o">())</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>  <span class="n">context</span> <span class="n">watch</span> <span class="n">sender</span><span class="o">()</span>
</span><span class='line'>  <span class="n">backendNodes</span> <span class="o">+=</span> <span class="n">sender</span><span class="o">()</span>
</span><span class='line'>  <span class="n">log</span><span class="o">.</span><span class="n">debug</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;Added new backend. &quot;</span><span class="o">+</span>
</span><span class='line'>            <span class="n">s</span><span class="s">&quot;Total: ${backendNodes.size}. Node: [${sender()}}]&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="nc">Terminated</span><span class="o">(</span><span class="n">backEnd</span><span class="o">)</span> <span class="k">if</span> <span class="n">backendNodes</span><span class="o">.</span><span class="n">contains</span><span class="o">(</span><span class="n">backEnd</span><span class="o">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>  <span class="n">backendNodes</span> <span class="o">-=</span> <span class="n">sender</span><span class="o">()</span>
</span><span class='line'>  <span class="n">log</span><span class="o">.</span><span class="n">debug</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;Removed terminated backend. &quot;</span><span class="o">+</span>
</span><span class='line'>            <span class="n">s</span><span class="s">&quot;Total: ${backendNodes.size}. &quot;</span><span class="o">+</span>
</span><span class='line'>            <span class="n">s</span><span class="s">&quot;Terminated node: [${sender()}}]&quot;</span><span class="o">)</span>   <span class="o">}</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<h5 id="cluster-portfolio-value-simulation">Cluster Portfolio Value Simulation</h5>

<p>Simulation channel constructed by <code>asking</code> backend simulation actors to run simulation and converting <code>scala.concurrent.Future</code> to <code>scalaz.concurrent.Task</code>. Concurrency management and split factor is defined
in abstract monte carlo risk calculator described in <a href="/blog/2014/05/01/akka-cluster-for-value-at-risk-calculation-1">Part 1</a></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">ClusterPortfolioValueSimulation</span> <span class="k">extends</span> <span class="nc">PortfolioValueSimulation</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">self</span><span class="k">:</span> <span class="kt">MarketFactorsModule</span> <span class="kt">with</span> <span class="kt">MonteCarloMarketRiskCalculator</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">systemName</span><span class="k">:</span> <span class="kt">String&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">systemConfig</span><span class="k">:</span> <span class="kt">Config&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">private</span><span class="o">[</span><span class="kt">this</span><span class="o">]</span> <span class="k">lazy</span> <span class="k">val</span> <span class="n">system</span> <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">(</span><span class="n">systemName</span><span class="o">,</span> <span class="n">systemConfig</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">private</span><span class="o">[</span><span class="kt">this</span><span class="o">]</span> <span class="k">lazy</span> <span class="k">val</span> <span class="n">backendManager</span> <span class="k">=</span>
</span><span class='line'>    <span class="n">system</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">[</span><span class="kt">BackendNodesManager</span><span class="o">],</span> <span class="err">“</span><span class="n">backendManager</span><span class="err">”</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">simulation</span><span class="o">(</span><span class="n">portfolio</span><span class="k">:</span> <span class="kt">Portfolio</span><span class="o">,</span> <span class="n">simulations</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span>
</span><span class='line'>    <span class="n">channel</span><span class="o">[</span><span class="kt">MarketFactorsGenerator</span>, <span class="kt">Simulations</span><span class="o">]</span> <span class="o">{</span> <span class="n">generator</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>      <span class="nc">Task</span><span class="o">.</span><span class="n">async</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;cb =&amp;gt; {</span>
</span><span class='line'><span class="s">        (backendManager ? RunSimulation(...)).onComplete {</span>
</span><span class='line'><span class="s">          case Failure(err)                   =&amp;gt; cb(-\/(err))</span>
</span><span class='line'><span class="s">          case Success(SimulationResponse(s)) =&amp;gt; cb(\/-(Simulations(s)))</span>
</span><span class='line'><span class="s">          case Success(u)                     =&amp;gt;</span>
</span><span class='line'><span class="s">            cb(-\/(new IllegalStateException(s&amp;quot;Unknown response: $u&amp;quot;)))</span>
</span><span class='line'><span class="s">        }</span>
</span><span class='line'><span class="s">      }&quot;</span><span class="o">&gt;</span><span class="nc">Simulations</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="run-calculation-in-cluster">Run Calculation in Cluster</h3>

<p>In this example I’m going to run all nodes in a single JVM for simplicity. Distributed deployment is only Akka configuration issue, and it doesn’t affect the code at all.</p>

<p>I’m starting three <code>simulation backend</code> nodes in a cluster, and later join them with <code>calculator</code> node, and submit risk calculation task.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">ClusterMarketRiskCalculation</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="nc">SystemName</span> <span class="k">=</span> <span class="err">“</span><span class="nc">ClusterMarketRiskCalculation</span><span class="err">”</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">val</span> <span class="n">simulationConfig</span> <span class="k">=</span> <span class="nc">ConfigFactory</span><span class="o">.</span><span class="n">parseResources</span><span class="o">(</span><span class="err">“</span><span class="n">simulation</span><span class="o">-</span><span class="n">node</span><span class="o">.</span><span class="n">conf</span><span class="err">”</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">calculatorConfig</span> <span class="k">=</span> <span class="nc">ConfigFactory</span><span class="o">.</span><span class="n">parseResources</span><span class="o">(</span><span class="err">“</span><span class="n">calculator</span><span class="o">-</span><span class="n">node</span><span class="o">.</span><span class="n">conf</span><span class="err">”</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;//</span> <span class="nc">Start</span> <span class="mi">3</span> <span class="n">simulation</span> <span class="n">nodes</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">system1</span>  <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">(</span><span class="nc">SystemName</span><span class="o">,</span> <span class="n">simulationConfig</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">joinAddress</span> <span class="k">=</span> <span class="nc">Cluster</span><span class="o">(</span><span class="n">system1</span><span class="o">).</span><span class="n">selfAddress</span>
</span><span class='line'>  <span class="nc">Cluster</span><span class="o">(</span><span class="n">system1</span><span class="o">).</span><span class="n">join</span><span class="o">(</span><span class="n">joinAddress</span><span class="o">)</span>
</span><span class='line'>  <span class="n">system1</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">[</span><span class="kt">PortfolioValueSimulationBackend</span><span class="o">],</span> <span class="err">“</span><span class="n">simulationBackend</span><span class="err">”</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">val</span> <span class="n">system2</span>  <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">(</span><span class="nc">SystemName</span><span class="o">,</span> <span class="n">simulationConfig</span><span class="o">)</span>
</span><span class='line'>  <span class="nc">Cluster</span><span class="o">(</span><span class="n">system2</span><span class="o">).</span><span class="n">join</span><span class="o">(</span><span class="n">joinAddress</span><span class="o">)</span>
</span><span class='line'>  <span class="n">system2</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">[</span><span class="kt">PortfolioValueSimulationBackend</span><span class="o">],</span> <span class="err">“</span><span class="n">simulationBackend</span><span class="err">”</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">val</span> <span class="n">system3</span>  <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">(</span><span class="nc">SystemName</span><span class="o">,</span> <span class="n">simulationConfig</span><span class="o">)</span>
</span><span class='line'>  <span class="nc">Cluster</span><span class="o">(</span><span class="n">system3</span><span class="o">).</span><span class="n">join</span><span class="o">(</span><span class="n">joinAddress</span><span class="o">)</span>
</span><span class='line'>  <span class="n">system3</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">[</span><span class="kt">PortfolioValueSimulationBackend</span><span class="o">],</span> <span class="err">“</span><span class="n">simulationBackend</span><span class="err">”</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;//</span> <span class="nc">Start</span> <span class="nc">Cluster</span> <span class="nc">Risk</span> <span class="nc">Calculator</span> <span class="n">node</span>
</span><span class='line'>  <span class="k">object</span> <span class="nc">RiskCalculator</span>
</span><span class='line'>    <span class="k">extends</span> <span class="nc">MonteCarloMarketRiskCalculator</span><span class="o">(</span><span class="mi">10000</span><span class="o">,</span> <span class="mi">10</span><span class="o">)</span>
</span><span class='line'>    <span class="k">with</span> <span class="nc">ClusterPortfolioValueSimulation</span>
</span><span class='line'>    <span class="k">with</span> <span class="nc">HistoricalMarketFactors</span> <span class="k">with</span> <span class="nc">HistoricalMarketData</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">val</span> <span class="n">systemName</span> <span class="k">=</span> <span class="nc">SystemName</span>
</span><span class='line'><span class="k">val</span> <span class="n">systemConfig</span> <span class="k">=</span> <span class="n">calculatorConfig</span>   <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nc">RiskCalculator</span><span class="o">.</span><span class="n">join</span><span class="o">(</span><span class="n">joinAddress</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;//</span> <span class="nc">Let</span><span class="err">’</span><span class="n">s</span> <span class="n">cluster</span> <span class="n">state</span> <span class="n">some</span> <span class="n">time</span> <span class="n">to</span> <span class="n">converge</span>
</span><span class='line'>  <span class="nc">Thread</span><span class="o">.</span><span class="n">sleep</span><span class="o">(</span><span class="mi">2000</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;//</span> <span class="nc">Run</span> <span class="nc">VaR</span> <span class="n">calculation</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">val</span> <span class="nc">AMZN</span> <span class="k">=</span> <span class="nc">Equity</span><span class="o">(</span><span class="err">“</span><span class="nc">AMZN</span><span class="err">”</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="nc">AAPL</span> <span class="k">=</span> <span class="nc">Equity</span><span class="o">(</span><span class="err">“</span><span class="nc">AAPL</span><span class="err">”</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="nc">IBM</span> <span class="k">=</span> <span class="nc">Equity</span><span class="o">(</span><span class="err">“</span><span class="nc">IBM</span><span class="err">”</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="nc">GS</span> <span class="k">=</span> <span class="nc">Equity</span><span class="o">(</span><span class="err">“</span><span class="nc">GS</span><span class="err">”</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;//</span> <span class="nc">Portfolio</span> <span class="n">evaluation</span> <span class="n">date</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">date</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">LocalDate</span><span class="o">(</span><span class="mi">2014</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;//</span> <span class="nc">Options</span> <span class="n">maturity</span> <span class="n">date</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">maturityDate</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">LocalDate</span><span class="o">(</span><span class="mi">2014</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">31</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">val</span> <span class="n">portfolio</span> <span class="k">=</span> <span class="nc">Portfolio</span><span class="o">(</span><span class="n">nels</span><span class="o">(</span>
</span><span class='line'>    <span class="nc">Position</span><span class="o">(</span><span class="nc">AMZN</span><span class="o">,</span> <span class="mi">10</span><span class="o">),</span>
</span><span class='line'>    <span class="nc">Position</span><span class="o">(</span><span class="nc">AAPL</span><span class="o">,</span> <span class="mi">20</span><span class="o">),</span>
</span><span class='line'>    <span class="nc">Position</span><span class="o">(</span><span class="nc">IBM</span><span class="o">,</span> <span class="mi">30</span><span class="o">),</span>
</span><span class='line'>    <span class="nc">Position</span><span class="o">(</span><span class="nc">CallOption</span><span class="o">(</span><span class="nc">GS</span><span class="o">,</span> <span class="mi">180</span><span class="o">,</span> <span class="n">maturityDate</span><span class="o">),</span> <span class="mi">10</span><span class="o">)</span>
</span><span class='line'>  <span class="o">))&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">val</span> <span class="n">start</span> <span class="k">=</span> <span class="nc">System</span><span class="o">.</span><span class="n">currentTimeMillis</span><span class="o">()</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">marketRisk</span> <span class="k">=</span> <span class="nc">RiskCalculator</span><span class="o">.</span><span class="n">marketRisk</span><span class="o">(</span><span class="n">portfolio</span><span class="o">,</span> <span class="n">date</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">end</span> <span class="k">=</span> <span class="nc">System</span><span class="o">.</span><span class="n">currentTimeMillis</span><span class="o">()&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="err">”</span><span class="nc">Calculated</span> <span class="n">marker</span> <span class="n">risk</span> <span class="n">in</span> <span class="n">$</span><span class="o">{</span><span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="o">}</span> <span class="n">milliseconds</span><span class="o">;</span> <span class="err">“</span> <span class="o">+</span>
</span><span class='line'>    <span class="n">s</span><span class="err">”</span><span class="nc">VaR</span><span class="o">(</span><span class="n">p</span> <span class="k">=</span> <span class="mf">0.95</span><span class="o">)</span> <span class="k">=</span> <span class="n">$</span><span class="o">{</span><span class="n">marketRisk</span><span class="o">.</span><span class="nc">VaR</span><span class="o">(</span><span class="mf">0.95</span><span class="o">)},</span> <span class="err">“</span> <span class="o">+</span>
</span><span class='line'>    <span class="n">s</span><span class="err">”</span><span class="nc">CVaR</span><span class="o">(</span><span class="n">p</span> <span class="k">=</span> <span class="mf">0.95</span><span class="o">)</span> <span class="k">=</span> <span class="n">$</span><span class="o">{</span><span class="n">marketRisk</span><span class="o">.</span><span class="n">conditionalVaR</span><span class="o">(</span><span class="mf">0.95</span><span class="o">)}</span><span class="err">”</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;//</span> <span class="nc">Shutdown</span> <span class="n">actor</span> <span class="n">systems</span>
</span><span class='line'>  <span class="n">system1</span><span class="o">.</span><span class="n">shutdown</span><span class="o">()</span>
</span><span class='line'>  <span class="n">system2</span><span class="o">.</span><span class="n">shutdown</span><span class="o">()</span>
</span><span class='line'>  <span class="n">system3</span><span class="o">.</span><span class="n">shutdown</span><span class="o">()</span>
</span><span class='line'>  <span class="nc">RiskCalculator</span><span class="o">.</span><span class="n">shutdown</span><span class="o">()&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;//</span> <span class="n">and</span> <span class="n">application</span>
</span><span class='line'>  <span class="nc">System</span><span class="o">.</span><span class="n">exit</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="conclusion">Conclusion</h3>

<p>As I showed in this post moving calculations to a cluster can be easy and fun task with Akka Cluster.</p>

<p>I use scalaz-stream for abstracting over <code>effectful functions</code> with <code>scalaz.stream.Channel</code>, I guess it maybe be overengineering in this particular case,
but it allows to completely hide implementation details and take control concurrency in very abstract way.
And scalaz-stream is very nice and super powerful library, I strongly encourage you to take a look on it.</p>

<h5 id="links">Links</h5>

<ol>
  <li>Akka http://akka.io/ and http://doc.akka.io/docs/akka/2.3.2/scala/index-network.html</li>
  <li>Scalaz-stream https://github.com/scalaz/scalaz-stream</li>
  <li>Value at Risk http://en.wikipedia.org/wiki/Value_at_risk</li>
</ol>

<h4 id="check-source-code-on-githubhttpsgithubcomezhulenevakka-var-calculation">Check source code on <a href="https://github.com/ezhulenev/akka-var-calculation">GitHub</a></h4>

<h2 id="go-to-part-1blog20140501akka-cluster-for-value-at-risk-calculation-1"><a href="/blog/2014/05/01/akka-cluster-for-value-at-risk-calculation-1">«&lt; Go to Part 1</a></h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Akka Cluster for Value at Risk Calculation (Part 1/2)]]></title>
    <link href="http://eugenezhulenev.com/blog/2014/05/01/akka-cluster-for-value-at-risk-calculation-1/"/>
    <updated>2014-05-01T22:03:45-04:00</updated>
    <id>http://eugenezhulenev.com/blog/2014/05/01/akka-cluster-for-value-at-risk-calculation-1</id>
    <content type="html"><![CDATA[<h3 id="synopsis">Synopsis</h3>

<blockquote>
  <p>The code &amp; sample app can be found on <a href="https://github.com/ezhulenev/akka-var-calculation">Github</a></p>
</blockquote>

<p>Risk Management in finance is one of the most common <a href="http://www.gridgain.com/usecases/risk-management/">case studies</a>
for Grid Computing, and Value-at-Risk is most widely used risk measure.
In this article I’m going to show how to <code>scale-out</code> Value-at-Risk calculation to multiple nodes with latest <a href="http://akka.io">Akka</a> middleware.
In Part 1 I’m describing the problem and <code>single-node</code> solution, and in Part 2 I’m scaling it to multiple nodes.</p>

<h2 id="part-1-introduction-to-value-at-risk-calculation">[Part 1] Introduction to Value at Risk calculation</h2>

<p>Go to <a href="/blog/2014/05/01/akka-cluster-for-value-at-risk-calculation-2">Part 2</a> where VaR calculation scaled-out to multiple nodes.</p>

<!-- more -->

<h3 id="what-is-value-at-risk">What is Value-at-Risk</h3>

<blockquote>
  <p>In financial mathematics and financial risk management, value at risk (VaR) is a widely used risk measure of the risk of loss on a specific portfolio of financial assets. For a given portfolio, probability and time horizon, VaR is defined as a threshold value such that the probability that the mark-to-market loss on the portfolio over the given time horizon exceeds this value (assuming normal markets and no trading in the portfolio) is the given probability level.</p>
</blockquote>

<p>You can continue with reading amazing set of articles <a href="http://blog.octo.com/en/introduction-to-grid-computing-for-value-at-risk-calculatio/">“Introduction to Grid Computing for Value At Risk calculation”</a> where VaR described in more details
and explained why it’s a perfect fit for grid computing and spreading calculation across multiple nodes. Also there you can find examples for <a href="http://www.gridgain.com/">GridGain</a> and <a href="http://hadoop.apache.org/">Hadoop</a>. In this article I’m going to use Akka.</p>

<h3 id="data-model">Data Model</h3>

<p>Let’s define simple model for supported instruments:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">Instrument</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">case</span> <span class="k">class</span> <span class="nc">Equity</span><span class="o">(</span><span class="n">ticker</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Instrument</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">EquityOption</span> <span class="k">extends</span> <span class="nc">Instrument</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">underlying</span><span class="k">:</span> <span class="kt">Equity</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">case</span> <span class="k">class</span> <span class="nc">CallOption</span><span class="o">(</span>
</span><span class='line'>           <span class="n">underlying</span><span class="k">:</span> <span class="kt">Equity</span><span class="o">,</span>
</span><span class='line'>           <span class="n">strike</span><span class="k">:</span> <span class="kt">Double</span><span class="o">,</span>
</span><span class='line'>           <span class="n">maturity</span><span class="k">:</span> <span class="kt">LocalDate</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">EquityOption</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">case</span> <span class="k">class</span> <span class="nc">PutOption</span><span class="o">(</span>
</span><span class='line'>           <span class="n">underlying</span><span class="k">:</span> <span class="kt">Equity</span><span class="o">,</span>
</span><span class='line'>           <span class="n">strike</span><span class="k">:</span> <span class="kt">Double</span><span class="o">,</span>
</span><span class='line'>           <span class="n">maturity</span><span class="k">:</span> <span class="kt">LocalDate</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">EquityOption</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>and portfolio for which market risk will be calculated:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'> <span class="k">case</span> <span class="k">class</span> <span class="nc">Position</span><span class="o">(</span><span class="n">instrument</span><span class="k">:</span> <span class="kt">Instrument</span><span class="o">,</span> <span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">case</span> <span class="k">class</span> <span class="nc">Portfolio</span><span class="o">(</span><span class="n">positions</span><span class="k">:</span> <span class="kt">NonEmptyList</span><span class="o">[</span><span class="kt">Position</span><span class="o">])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="portfolio-pricing">Portfolio pricing</h3>

<p>Let’s define elementary portfolio pricing service, that can calculate market price for instrument based on market factors:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">MarketFactor</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">object</span> <span class="nc">MarketFactor</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">class</span> <span class="nc">Price</span><span class="o">(</span><span class="n">equity</span><span class="k">:</span> <span class="kt">Equity</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">MarketFactor</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">class</span> <span class="nc">Volatility</span><span class="o">(</span><span class="n">equity</span><span class="k">:</span> <span class="kt">Equity</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">MarketFactor</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">class</span> <span class="nc">DaysToMaturity</span><span class="o">(</span><span class="n">maturity</span><span class="k">:</span> <span class="kt">LocalDate</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">MarketFactor</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">RiskFreeRate</span> <span class="k">extends</span> <span class="nc">MarketFactor</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">trait</span> <span class="nc">MarketFactors</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">apply</span><span class="o">(</span><span class="n">factor</span><span class="k">:</span> <span class="kt">MarketFactor</span><span class="o">)</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Double</span><span class="o">]</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">trait</span> <span class="nc">MarketFactorsGenerator</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">factors</span><span class="k">:</span> <span class="kt">Process</span><span class="o">[</span><span class="kt">Task</span>, <span class="kt">MarketFactors</span><span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">PricingError</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">object</span> <span class="nc">PricingError</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">class</span> <span class="nc">MissingMarketFactors</span><span class="o">(</span><span class="n">factors</span><span class="k">:</span> <span class="kt">NonEmptyList</span><span class="o">[</span><span class="kt">MarketFactor</span><span class="o">])</span> <span class="k">extends</span> <span class="nc">PricingError</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;@</span><span class="n">implicitNotFound</span><span class="o">(</span><span class="n">msg</span> <span class="k">=</span> <span class="err">“</span><span class="nc">Can</span><span class="err">’</span><span class="n">t</span> <span class="n">find</span> <span class="n">pricer</span> <span class="k">for</span> <span class="n">instrument</span> <span class="k">type</span> <span class="err">‘</span><span class="kt">$</span><span class="o">{</span><span class="kt">I</span><span class="o">}</span><span class="err">’”</span><span class="o">)</span>
</span><span class='line'><span class="k">trait</span> <span class="nc">Pricer</span><span class="o">[</span><span class="kt">I</span> <span class="kt">&amp;lt</span><span class="err">;</span><span class="kt">:</span> <span class="kt">Instrument</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">price</span><span class="o">(</span><span class="n">i</span><span class="k">:</span> <span class="kt">I</span><span class="o">)(</span><span class="k">implicit</span> <span class="n">m</span><span class="k">:</span> <span class="kt">MarketFactors</span><span class="o">)</span><span class="k">:</span> <span class="kt">PricingError</span> <span class="kt">\/</span> <span class="kt">Double</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">object</span> <span class="nc">Pricer</span> <span class="k">extends</span> <span class="nc">PricerImplicits</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">trait</span> <span class="nc">PricerImplicits</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">implicit</span> <span class="k">object</span> <span class="nc">EquityPricer</span> <span class="k">extends</span> <span class="nc">Pricer</span><span class="o">[</span><span class="kt">Equity</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">implicit</span> <span class="k">object</span> <span class="nc">OptionPricer</span> <span class="k">extends</span> <span class="nc">Pricer</span><span class="o">[</span><span class="kt">EquityOption</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Use Black-Scholes formula to price Option</span>
</span><span class='line'><span class="o">}</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<h3 id="market-risk-calculator">Market Risk Calculator</h3>

<p>Portfolio Market Risk depends on market factors forecast. I’m going to construct market factors forecast for one day horizon from historical market data:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">MarketDataModule</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">protected</span> <span class="k">def</span> <span class="n">marketData</span><span class="k">:</span> <span class="kt">MarketData&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">MarketDataError</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">class</span> <span class="nc">MarketDataUnavailable</span><span class="o">(</span><span class="n">error</span><span class="k">:</span> <span class="kt">Throwable</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">MarketDataError</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">trait</span> <span class="nc">MarketData</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">historicalPrices</span><span class="o">(</span><span class="n">equity</span><span class="k">:</span> <span class="kt">Equity</span><span class="o">,</span> <span class="n">from</span><span class="k">:</span> <span class="kt">LocalDate</span><span class="o">,</span> <span class="n">to</span><span class="k">:</span> <span class="kt">LocalDate</span><span class="o">)</span><span class="k">:</span>  <span class="kt">MarketDataError</span> <span class="kt">\/</span> <span class="kt">Vector</span><span class="o">[</span><span class="kt">HistoricalPrice</span><span class="o">]&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">historicalPrice</span><span class="o">(</span><span class="n">equity</span><span class="k">:</span> <span class="kt">Equity</span><span class="o">,</span> <span class="n">date</span><span class="k">:</span> <span class="kt">LocalDate</span><span class="o">)</span><span class="k">:</span> <span class="kt">MarketDataError</span> <span class="kt">\/</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">HistoricalPrice</span><span class="o">]</span>   <span class="o">}</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">MarketFactorsModule</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">case</span> <span class="k">class</span> <span class="nc">MarketFactorsParameters</span><span class="o">(</span><span class="n">riskFreeRate</span><span class="k">:</span> <span class="kt">Double</span> <span class="o">=</span> <span class="mf">0.05</span><span class="o">,</span>
</span><span class='line'>                                     <span class="n">horizon</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">1000</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">protected</span> <span class="k">def</span> <span class="n">oneDayMarketFactors</span><span class="o">(</span><span class="n">portfolio</span><span class="k">:</span> <span class="kt">Portfolio</span><span class="o">,</span> <span class="n">date</span><span class="k">:</span> <span class="kt">LocalDate</span><span class="o">)(</span><span class="k">implicit</span> <span class="n">parameters</span><span class="k">:</span> <span class="kt">MarketFactorsParameters</span><span class="o">)</span><span class="k">:</span> <span class="kt">MarketFactorsGenerator&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">protected</span> <span class="k">def</span> <span class="n">marketFactors</span><span class="o">(</span><span class="n">date</span><span class="k">:</span> <span class="kt">LocalDate</span><span class="o">)(</span><span class="k">implicit</span> <span class="n">parameters</span><span class="k">:</span> <span class="kt">MarketFactorsParameters</span><span class="o">)</span><span class="k">:</span> <span class="kt">MarketFactors</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">MarketRiskCalculator</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">type</span> <span class="kt">MarketRisk</span> <span class="kt">&amp;lt</span><span class="o">;</span><span class="k">:</span> <span class="kt">MarketRiskLike&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">trait</span> <span class="nc">MarketRiskLike</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">VaR</span><span class="o">(</span><span class="n">p</span><span class="k">:</span> <span class="kt">Double</span><span class="o">)</span><span class="k">:</span> <span class="kt">Double</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">conditionalVaR</span><span class="o">(</span><span class="n">p</span><span class="k">:</span> <span class="kt">Double</span><span class="o">)</span><span class="k">:</span> <span class="kt">Double</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">marketRisk</span><span class="o">(</span><span class="n">portfolio</span><span class="k">:</span> <span class="kt">Portfolio</span><span class="o">,</span> <span class="n">date</span><span class="k">:</span> <span class="kt">LocalDate</span><span class="o">)</span><span class="k">:</span> <span class="kt">MarketRisk</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="monte-carlo-simulation-for-market-risk-calculation">Monte Carlo Simulation for Market Risk Calculation</h3>

<blockquote>
  <p>Monte Carlo simulation performs risk analysis by building models of possible results by substituting a range of values—a probability distribution—for any factor that has inherent uncertainty. It then calculates results over and over, each time using a different set of random values from the probability functions. Depending upon the number of uncertainties and the ranges specified for them, a Monte Carlo simulation could involve thousands or tens of thousands of recalculations before it is complete. Monte Carlo simulation produces distributions of possible outcome values. <a href="http://www.palisade.com/risk/monte_carlo_simulation.asp">…</a></p>
</blockquote>

<h4 id="abstract-monte-carlo-risk-calculator">Abstract Monte Carlo Risk Calculator</h4>

<p>I will use <a href="/blog/2014/03/09/2014-03-09-scalaz-stream-concurrent-process">scalaz-stream</a> for splitting calculation to independent tasks, running them <a href="/blog/2014/03/09/2014-03-09-scalaz-stream-concurrent-process">concurrently</a> and aggregating results.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Some code is omitted. Full source code on Github –»&gt;</span><a href='https://github.com/ezhulenev/akka-var-calculation/blob/master/core/src/main/scala/kkalc/service/simulation/MonteCarloMarketRiskCalculator.scala'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">PortfolioValueSimulation</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">self</span><span class="k">:</span> <span class="kt">MarketFactorsModule</span> <span class="kt">with</span> <span class="kt">MonteCarloMarketRiskCalculator</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/**</span>
</span><span class='line'>   <span class="o">*</span> <span class="nc">Scalaz</span><span class="o">-</span><span class="nc">Stream</span> <span class="nc">Channel</span> <span class="n">that</span> <span class="k">for</span> <span class="n">given</span> <span class="n">market</span> <span class="n">factors</span> <span class="n">generator</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">runs</span> <span class="n">defined</span> <span class="n">number</span> <span class="n">of</span> <span class="n">simulations</span> <span class="n">and</span> <span class="n">produce</span> <span class="nc">MarketRisk</span>
</span><span class='line'>   <span class="o">*/</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">simulation</span><span class="o">(</span><span class="n">portfolio</span><span class="k">:</span> <span class="kt">Portfolio</span><span class="o">,</span> <span class="n">simulations</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span>
</span><span class='line'>    <span class="kt">Channel</span><span class="o">[</span><span class="kt">Task</span>, <span class="kt">MarketFactorsGenerator</span>, <span class="kt">Simulations</span><span class="o">]</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/**</span>
</span><span class='line'> <span class="o">*</span> <span class="nd">@concurrencyLevel</span> <span class="nc">Number</span> <span class="n">of</span> <span class="n">simulation</span> <span class="n">tasks</span> <span class="n">running</span> <span class="n">at</span> <span class="n">the</span> <span class="n">same</span> <span class="n">time</span>
</span><span class='line'> <span class="o">*/</span>
</span><span class='line'><span class="k">abstract</span> <span class="k">class</span> <span class="nc">MonteCarloMarketRiskCalculator</span><span class="o">(</span><span class="n">simulations</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">1000000</span><span class="o">,</span>
</span><span class='line'>                                              <span class="n">splitFactor</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">10</span><span class="o">,</span>
</span><span class='line'>                                              <span class="n">concurrencyLevel</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">10</span><span class="o">)</span>
</span><span class='line'>  <span class="k">extends</span> <span class="nc">MarketRiskCalculator</span>
</span><span class='line'>     <span class="k">with</span> <span class="nc">MarketDataModule</span>
</span><span class='line'>     <span class="k">with</span> <span class="nc">MarketFactorsModule</span>
</span><span class='line'>     <span class="k">with</span> <span class="nc">PortfolioValueSimulation</span> <span class="o">{</span> <span class="n">calculator</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">case</span> <span class="k">class</span> <span class="nc">Simulations</span><span class="o">(</span><span class="n">simulations</span><span class="k">:</span> <span class="kt">Vector</span><span class="o">[</span><span class="kt">Double</span><span class="o">])&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">MarketRisk</span><span class="o">(</span><span class="n">initialValue</span><span class="k">:</span> <span class="kt">Double</span><span class="o">,</span> <span class="n">simulations</span><span class="k">:</span> <span class="kt">Simulations</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">VaR</span><span class="o">(</span><span class="n">p</span><span class="k">:</span> <span class="kt">Double</span><span class="o">)</span><span class="k">:</span> <span class="kt">Double</span> <span class="o">=</span> <span class="err">…</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">conditionalVaR</span><span class="o">(</span><span class="n">p</span><span class="k">:</span> <span class="kt">Double</span><span class="o">)</span><span class="k">:</span> <span class="kt">Double</span> <span class="o">=</span> <span class="o">...</span>   <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">private</span> <span class="k">val</span> <span class="n">P</span> <span class="k">=</span> <span class="nc">Process</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">marketRisk</span><span class="o">(</span><span class="n">portfolio</span><span class="k">:</span> <span class="kt">Portfolio</span><span class="o">,</span> <span class="n">date</span><span class="k">:</span> <span class="kt">LocalDate</span><span class="o">)</span><span class="k">:</span> <span class="kt">MarketRisk</span> <span class="o">=</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;//</span> <span class="nc">Get</span> <span class="n">initial</span> <span class="nc">Portfolio</span> <span class="n">value</span>
</span><span class='line'><span class="k">implicit</span> <span class="k">val</span> <span class="n">initialFactors</span> <span class="k">=</span> <span class="n">marketFactors</span><span class="o">(</span><span class="n">date</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">initialPortfolioValue</span> <span class="k">=</span>
</span><span class='line'>  <span class="nc">PortfolioPricer</span><span class="o">.</span><span class="n">price</span><span class="o">(</span><span class="n">portfolio</span><span class="o">).</span>
</span><span class='line'>    <span class="n">fold</span><span class="o">(</span><span class="n">err</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">sys</span><span class="o">.</span><span class="n">error</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;Failed price portfolio: $err&quot;</span><span class="o">),</span> <span class="n">identity</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Run portfolio values simulation</span>
</span><span class='line'><span class="k">val</span> <span class="n">oneSimulation</span> <span class="k">=</span> <span class="n">simulations</span> <span class="o">/</span> <span class="n">splitFactor</span>
</span><span class='line'><span class="k">val</span> <span class="n">simulationChannel</span> <span class="k">=</span> <span class="n">simulation</span><span class="o">(</span><span class="n">portfolio</span><span class="o">,</span> <span class="n">oneSimulation</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">generator</span> <span class="k">=</span> <span class="n">oneDayMarketFactors</span><span class="o">(</span><span class="n">portfolio</span><span class="o">,</span> <span class="n">date</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">process</span> <span class="k">=</span> <span class="n">P</span><span class="o">.</span>
</span><span class='line'>  <span class="n">range</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">splitFactor</span><span class="o">).</span>
</span><span class='line'>  <span class="n">map</span><span class="o">(</span><span class="k">_</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">generator</span><span class="o">).</span>
</span><span class='line'>  <span class="n">concurrently</span><span class="o">(</span><span class="n">concurrencyLevel</span><span class="o">)(</span><span class="n">simulationChannel</span><span class="o">).</span>
</span><span class='line'>  <span class="n">runFoldMap</span><span class="o">(</span><span class="n">identity</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Produce market-risk object from initial value and simulated values</span>
</span><span class='line'><span class="k">new</span> <span class="nc">MarketRisk</span><span class="o">(</span><span class="n">initialPortfolioValue</span><span class="o">,</span> <span class="n">process</span><span class="o">.</span><span class="n">run</span><span class="o">)</span>   <span class="o">}</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<h4 id="running-simulation-on-a-single-node">Running simulation on a single node</h4>

<p>Here is straightforward PortfolioValueSimulation implementation, that runs simulation tasks in a separate thread pool in a single JVM:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">SingleNodePortfolioValueSimulation</span> <span class="k">extends</span> <span class="nc">PortfolioValueSimulation</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">self</span><span class="k">:</span> <span class="kt">MarketFactorsModule</span> <span class="kt">with</span> <span class="kt">MonteCarloMarketRiskCalculator</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">simulation</span><span class="o">(</span><span class="n">portfolio</span><span class="k">:</span> <span class="kt">Portfolio</span><span class="o">,</span> <span class="n">simulations</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span>
</span><span class='line'>    <span class="n">channel</span><span class="o">[</span><span class="kt">MarketFactorsGenerator</span>, <span class="kt">Simulations</span><span class="o">]</span> <span class="o">{</span> <span class="n">generator</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="c1">// calculate portfolio prices for generated market factors</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">process</span> <span class="k">=</span> <span class="n">generator</span><span class="o">.</span><span class="n">factors</span><span class="o">.</span><span class="n">take</span><span class="o">(</span><span class="n">simulations</span><span class="o">).</span><span class="n">map</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">implicit</span> <span class="n">factors</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">PortfolioPricer</span><span class="o">.</span><span class="n">price</span><span class="o">(</span><span class="n">portfolio</span><span class="o">).</span>
</span><span class='line'>      <span class="n">fold</span><span class="o">(</span><span class="n">err</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">sys</span><span class="o">.</span><span class="n">error</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;Failed to price portfolio: $err&quot;</span><span class="o">),</span> <span class="n">identity</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Fork simulations into thread pool</span>
</span><span class='line'>  <span class="nc">Task</span><span class="o">.</span><span class="n">fork</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">log</span><span class="o">.</span><span class="n">debug</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;Simulate $simulations portfolio values for $portfolio&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">process</span><span class="o">.</span><span class="n">runLog</span><span class="o">.</span>
</span><span class='line'>        <span class="n">map</span><span class="o">(</span><span class="n">portfolioValues</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">Simulations</span><span class="o">(</span><span class="n">portfolioValues</span><span class="o">.</span><span class="n">toVector</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}(</span><span class="n">executor</span><span class="o">)</span>   <span class="o">}</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<h4 id="run-market-risk-calculation">Run Market Risk Calculation</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">SingleNodeMarketRiskCalculation</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="nc">AMZN</span> <span class="k">=</span> <span class="nc">Equity</span><span class="o">(</span><span class="err">“</span><span class="nc">AMZN</span><span class="err">”</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="nc">AAPL</span> <span class="k">=</span> <span class="nc">Equity</span><span class="o">(</span><span class="err">“</span><span class="nc">AAPL</span><span class="err">”</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="nc">IBM</span> <span class="k">=</span> <span class="nc">Equity</span><span class="o">(</span><span class="err">“</span><span class="nc">IBM</span><span class="err">”</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="nc">GS</span> <span class="k">=</span> <span class="nc">Equity</span><span class="o">(</span><span class="err">“</span><span class="nc">GS</span><span class="err">”</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;//</span> <span class="nc">Portfolio</span> <span class="n">evaluation</span> <span class="n">date</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">date</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">LocalDate</span><span class="o">(</span><span class="mi">2014</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;//</span> <span class="nc">Options</span> <span class="n">maturity</span> <span class="n">date</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">maturityDate</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">LocalDate</span><span class="o">(</span><span class="mi">2014</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">31</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">val</span> <span class="n">portfolio</span> <span class="k">=</span> <span class="nc">Portfolio</span><span class="o">(</span><span class="n">nels</span><span class="o">(</span>
</span><span class='line'>    <span class="nc">Position</span><span class="o">(</span><span class="nc">AMZN</span><span class="o">,</span> <span class="mi">10</span><span class="o">),</span> <span class="nc">Position</span><span class="o">(</span><span class="nc">AAPL</span><span class="o">,</span> <span class="mi">20</span><span class="o">),</span> <span class="nc">Position</span><span class="o">(</span><span class="nc">IBM</span><span class="o">,</span> <span class="mi">30</span><span class="o">),</span>
</span><span class='line'>    <span class="nc">Position</span><span class="o">(</span><span class="nc">CallOption</span><span class="o">(</span><span class="nc">GS</span><span class="o">,</span> <span class="mi">180</span><span class="o">,</span> <span class="n">maturityDate</span><span class="o">),</span> <span class="mi">10</span><span class="o">)</span>
</span><span class='line'>  <span class="o">))&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">object</span> <span class="nc">RiskCalculator</span>
</span><span class='line'>    <span class="k">extends</span> <span class="nc">MonteCarloMarketRiskCalculator</span><span class="o">(</span><span class="mi">10000</span><span class="o">,</span> <span class="mi">10</span><span class="o">)</span>
</span><span class='line'>    <span class="k">with</span> <span class="nc">SingleNodePortfolioValueSimulation</span>
</span><span class='line'>    <span class="k">with</span> <span class="nc">HistoricalMarketFactors</span> <span class="k">with</span> <span class="nc">HistoricalMarketData</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">val</span> <span class="n">marketRisk</span> <span class="k">=</span> <span class="nc">RiskCalculator</span><span class="o">.</span><span class="n">marketRisk</span><span class="o">(</span><span class="n">portfolio</span><span class="o">,</span> <span class="n">date</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="err">”</span><span class="nc">Calculated</span> <span class="n">marker</span> <span class="n">risk</span><span class="o">;</span> <span class="err">“</span> <span class="o">+</span>
</span><span class='line'>    <span class="n">s</span><span class="err">”</span><span class="nc">VaR</span><span class="o">(</span><span class="n">p</span> <span class="k">=</span> <span class="mf">0.95</span><span class="o">)</span> <span class="k">=</span> <span class="n">$</span><span class="o">{</span><span class="n">marketRisk</span><span class="o">.</span><span class="nc">VaR</span><span class="o">(</span><span class="mf">0.95</span><span class="o">)},</span> <span class="err">“</span> <span class="o">+</span>
</span><span class='line'>    <span class="n">s</span><span class="err">”</span><span class="nc">CVaR</span><span class="o">(</span><span class="n">p</span> <span class="k">=</span> <span class="mf">0.95</span><span class="o">)</span> <span class="k">=</span> <span class="n">$</span><span class="o">{</span><span class="n">marketRisk</span><span class="o">.</span><span class="n">conditionalVaR</span><span class="o">(</span><span class="mf">0.95</span><span class="o">)}</span><span class="err">”</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[simulation-pool-1] Simulate 1000 portfolio values for Portfolio( …
</span><span class='line'>[simulation-pool-2] Simulate 1000 portfolio values for Portfolio( …
</span><span class='line'>[simulation-pool-0] Simulate 1000 portfolio values for Portfolio( …
</span><span class='line'>[simulation-pool-3] Simulate 1000 portfolio values for Portfolio( …
</span><span class='line'>[simulation-pool-4] Simulate 1000 portfolio values for Portfolio( …
</span><span class='line'>[simulation-pool-5] Simulate 1000 portfolio values for Portfolio( …
</span><span class='line'>[simulation-pool-6] Simulate 1000 portfolio values for Portfolio( …
</span><span class='line'>[simulation-pool-7] Simulate 1000 portfolio values for Portfolio( …
</span><span class='line'>[simulation-pool-8] Simulate 1000 portfolio values for Portfolio( …
</span><span class='line'>[simulation-pool-9] Simulate 1000 portfolio values for Portfolio( …&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>Calculated marker risk in 3492 milliseconds:
</span><span class='line'>        VaR(p = 0.95) = -135.82237858706867
</span><span class='line'>        CVaR(p = 0.95) = -170.1895188516829</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="next-step">Next step</h3>

<p>In next part I’m going to scale-out VaR calculation to multiple nodes, and I will be using latest Akka Cluster for it.</p>

<h2 id="go-to-part-2blog20140501akka-cluster-for-value-at-risk-calculation-2"><a href="/blog/2014/05/01/akka-cluster-for-value-at-risk-calculation-2">»&gt; Go to Part 2</a></h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seamless Migration From Monolithic Application to Finagle Services (Part 2/2)]]></title>
    <link href="http://eugenezhulenev.com/blog/2014/04/09/seamless-migration-from-monolithic-application-to-finagle-services-2/"/>
    <updated>2014-04-09T22:03:45-04:00</updated>
    <id>http://eugenezhulenev.com/blog/2014/04/09/seamless-migration-from-monolithic-application-to-finagle-services-2</id>
    <content type="html"><![CDATA[<h3 id="synopsis">Synopsis</h3>

<blockquote>
  <p>The code &amp; sample app can be found on <a href="https://github.com/ezhulenev/finagled-movie-db">Github</a></p>
</blockquote>

<p>Distributed micro-services architecture is hot trend right now, it’s widely adopted by <a href="https://blog.twitter.com/2011/finagle-a-protocol-agnostic-rpc-system">Twitter</a>, <a href="https://engineering.linkedin.com/architecture/restli-restful-service-architecture-scale">LinkedIn</a> and <a href="http://www.slideshare.net/LappleApple/gilt-from-monolith-ruby-app-to-micro-service-scala-service-architecture">Gilt</a>.
However it can be difficult if data model is already defined, and services accessed via existing API throughout all your code. I’ll show how it’s possible to split monoliths app into standalone services built with Finagle and SBinary for custom communication protocol.</p>

<p>I’m going to show it on example of small Fancy Movie Database application.</p>

<h2 id="part-22-spit-application-to-distributed-services">[Part 2/2] Spit application to distributed services</h2>

<p>Go to <a href="/blog/2014/04/09/seamless-migration-from-monolithic-application-to-finagle-services-1">Part 1</a> where fancy movie database application defined.</p>

<h3 id="what-is-finagle">What is Finagle</h3>

<p>Finagle is a protocol-agnostic, asynchronous RPC system for the JVM that makes it easy to build robust clients and servers in Java, Scala, or any JVM-hosted language.</p>

<!-- more -->

<h6 id="finagle-provides-a-robust-implementation-of">Finagle provides a robust implementation of:</h6>
<ul>
  <li>connection pools, with throttling to avoid TCP connection churn;</li>
  <li>failure detectors, to identify slow or crashed hosts;</li>
  <li>failover strategies, to direct traffic away from unhealthy hosts;</li>
  <li>load-balancers, including “least-connections” and other strategies; and</li>
</ul>

<p>You can read more about finagle on <a href="http://twitter.github.io/finagle/">official web site</a></p>

<h4 id="whats-wrong-with-finagle">What’s wrong with finagle</h4>

<p>Finagle is protocol agnostic system, and can work independently of underlying protocol, however suggested protocol is Thrift, and tooling support is built around Thrift (code generators, etc).
One biggest drawbacks of Thrift, is that it’s required to define model and services using interface definition language (IDL).
However if model and services already defined (as in this example), it can be painful to migrate well-typed scala model to IDL.</p>

<p>In this case we can use protocol-agnostic property of Finagle and write out own binary protocol for existing scala model.</p>

<h3 id="sbinary">SBinary</h3>

<p><a href="https://github.com/harrah/sbinary">SBinary</a> is a library for describing binary protocols, in the form of mappings between Scala types and binary formats. It can be used as a robust serialization mechanism for Scala objects or a way of dealing with existing binary formats found in the wild.</p>

<blockquote>
  <p>Great <a href="https://code.google.com/p/sbinary/wiki/IntroductionToSBinary">Introduction to SBinary</a> article</p>
</blockquote>

<h3 id="binary-format-for-data-model">Binary format for data model</h3>

<p>First we need a way to read/write data model from binary representation:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">ModelProtocol</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">import</span> <span class="nn">sbinary.DefaultProtocol._</span>
</span><span class='line'>  <span class="k">import</span> <span class="nn">sbinary.Operations._</span>
</span><span class='line'>  <span class="k">import</span> <span class="nn">sbinary._&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">implicit</span> <span class="k">object</span> <span class="nc">genreFormat</span> <span class="k">extends</span> <span class="nc">Format</span><span class="o">[</span><span class="kt">Genre</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">import</span> <span class="nn">Genre._&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">override</span> <span class="k">def</span> <span class="n">reads</span><span class="o">(</span><span class="n">in</span><span class="k">:</span> <span class="kt">Input</span><span class="o">)</span><span class="k">:</span> <span class="kt">Genre</span> <span class="o">=</span> <span class="n">read</span><span class="o">[</span><span class="kt">Byte</span><span class="o">](</span><span class="n">in</span><span class="o">)</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">0</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">Action</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">1</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">Adventure</span>
</span><span class='line'>  <span class="o">....</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">override</span> <span class="k">def</span> <span class="n">writes</span><span class="o">(</span><span class="n">out</span><span class="k">:</span> <span class="kt">Output</span><span class="o">,</span> <span class="n">value</span><span class="k">:</span> <span class="kt">Genre</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">genreCode</span><span class="k">:</span> <span class="kt">Byte</span> <span class="o">=</span> <span class="n">value</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Action</span>      <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Adventure</span>   <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">1</span>
</span><span class='line'>    <span class="o">....</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">write</span><span class="o">[</span><span class="kt">Byte</span><span class="o">](</span><span class="n">out</span><span class="o">,</span> <span class="n">genreCode</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>   <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">implicit</span> <span class="k">object</span> <span class="nc">personFormat</span> <span class="k">extends</span> <span class="nc">Format</span><span class="o">[</span><span class="kt">Person</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">def</span> <span class="n">reads</span><span class="o">(</span><span class="n">in</span><span class="k">:</span> <span class="kt">Input</span><span class="o">)</span> <span class="k">=</span>
</span><span class='line'>      <span class="nc">Person</span><span class="o">(</span><span class="n">read</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;in&quot;</span><span class="o">&gt;</span><span class="nc">String</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;,</span> <span class="n">read</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;in&quot;</span><span class="o">&gt;</span><span class="nc">String</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;,</span> <span class="n">read</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;in&quot;</span><span class="o">&gt;</span><span class="nc">LocalDate</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">override</span> <span class="k">def</span> <span class="n">writes</span><span class="o">(</span><span class="n">out</span><span class="k">:</span> <span class="kt">Output</span><span class="o">,</span> <span class="n">person</span><span class="k">:</span> <span class="kt">Person</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">write</span><span class="o">[</span><span class="kt">String</span><span class="o">](</span><span class="n">out</span><span class="o">,</span> <span class="n">person</span><span class="o">.</span><span class="n">firstName</span><span class="o">)</span>
</span><span class='line'>  <span class="n">write</span><span class="o">[</span><span class="kt">String</span><span class="o">](</span><span class="n">out</span><span class="o">,</span> <span class="n">person</span><span class="o">.</span><span class="n">secondName</span><span class="o">)</span>
</span><span class='line'>  <span class="n">write</span><span class="o">[</span><span class="kt">LocalDate</span><span class="o">](</span><span class="n">out</span><span class="o">,</span> <span class="n">person</span><span class="o">.</span><span class="n">born</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>   <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;//</span> <span class="err">…</span> <span class="n">much</span> <span class="n">more</span> <span class="n">on</span> <span class="nc">Github</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="binary-format-for-requestresponse">Binary format for Request/Response</h3>

<p>Nest step, is to build request-response commands that going to be passed between server and client:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">ServiceProtocol</span> <span class="k">extends</span> <span class="nc">ModelProtocol</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">FmdbReq</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">GetPeople</span> <span class="k">extends</span> <span class="nc">FmdbReq</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">class</span> <span class="nc">GetMovies</span><span class="o">(</span><span class="n">year</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Int</span><span class="o">],</span> <span class="n">genre</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Genre</span><span class="o">],</span> <span class="n">person</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Person</span><span class="o">])</span> <span class="k">extends</span> <span class="nc">FmdbReq</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">FmdbRep</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">class</span> <span class="nc">GotPeople</span><span class="o">(</span><span class="n">people</span><span class="k">:</span> <span class="kt">Vector</span><span class="o">[</span><span class="kt">Person</span><span class="o">])</span> <span class="k">extends</span> <span class="nc">FmdbRep</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">class</span> <span class="nc">GotMovies</span><span class="o">(</span><span class="n">movies</span><span class="k">:</span> <span class="kt">Vector</span><span class="o">[</span><span class="kt">Movie</span><span class="o">])</span> <span class="k">extends</span> <span class="nc">FmdbRep</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">implicit</span> <span class="k">object</span> <span class="nc">requestFormat</span> <span class="k">extends</span> <span class="nc">Format</span><span class="o">[</span><span class="kt">FmdbReq</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">def</span> <span class="n">reads</span><span class="o">(</span><span class="n">in</span><span class="k">:</span> <span class="kt">Input</span><span class="o">)</span> <span class="k">=</span> <span class="n">read</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;in&quot;</span><span class="o">&gt;</span><span class="nc">Byte</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">0</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>           <span class="nc">GetPeople</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="k">case</span> <span class="mi">1</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>       <span class="nc">GetMovies</span><span class="o">(</span><span class="n">read</span><span class="o">[</span><span class="kt">Option</span><span class="o">[</span><span class="kt">Int</span><span class="o">]](</span><span class="n">in</span><span class="o">),</span>
</span><span class='line'>                 <span class="n">read</span><span class="o">[</span><span class="kt">Option</span><span class="o">[</span><span class="kt">Genre</span><span class="o">]](</span><span class="n">in</span><span class="o">),</span>
</span><span class='line'>                 <span class="n">read</span><span class="o">[</span><span class="kt">Option</span><span class="o">[</span><span class="kt">Person</span><span class="o">]](</span><span class="n">in</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">override</span> <span class="k">def</span> <span class="n">writes</span><span class="o">(</span><span class="n">out</span><span class="k">:</span> <span class="kt">Output</span><span class="o">,</span> <span class="n">req</span><span class="k">:</span> <span class="kt">FmdbReq</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">req</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">GetPeople</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>      <span class="n">write</span><span class="o">[</span><span class="kt">Byte</span><span class="o">](</span><span class="n">out</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="nc">GetMovies</span><span class="o">(</span><span class="n">year</span><span class="o">,</span> <span class="n">genre</span><span class="o">,</span> <span class="n">person</span><span class="o">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>       <span class="n">write</span><span class="o">[</span><span class="kt">Byte</span><span class="o">](</span><span class="n">out</span><span class="o">,</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>       <span class="n">write</span><span class="o">[</span><span class="kt">Option</span><span class="o">[</span><span class="kt">Int</span><span class="o">]](</span><span class="n">out</span><span class="o">,</span> <span class="n">year</span><span class="o">)</span>
</span><span class='line'>       <span class="n">write</span><span class="o">[</span><span class="kt">Option</span><span class="o">[</span><span class="kt">Genre</span><span class="o">]](</span><span class="n">out</span><span class="o">,</span> <span class="n">genre</span><span class="o">)</span>
</span><span class='line'>       <span class="n">write</span><span class="o">[</span><span class="kt">Option</span><span class="o">[</span><span class="kt">Person</span><span class="o">]](</span><span class="n">out</span><span class="o">,</span> <span class="n">person</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>   <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;//</span> <span class="err">…</span> <span class="n">the</span> <span class="n">same</span> <span class="k">for</span> <span class="nc">Response</span><span class="o">,</span> <span class="n">see</span> <span class="n">more</span> <span class="n">on</span> <span class="nc">Github</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="combine-it-all-together">Combine it all together</h3>

<p>Now we need to combine together binary protocol defined earlier with Finagle channel pipelines, and create Client/Server builders.</p>

<p>For sure we want to update this binary protocol at some later point, adding new commands and updating application model, and to be it still safe.
For this reason I’m wrapping each message into <code>versioned envelop</code>, however I’m not going to describe it in this post, full code is available on Github.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">Fmdb</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">import</span> <span class="nn">ServiceProtocol._</span>
</span><span class='line'>  <span class="k">import</span> <span class="nn">envelopeCodec._&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">private</span><span class="o">[</span><span class="kt">this</span><span class="o">]</span> <span class="k">val</span> <span class="nc">ProtocolVersion</span><span class="k">:</span> <span class="kt">Long</span> <span class="o">=</span> <span class="mi">1</span><span class="n">l</span>
</span><span class='line'>  <span class="k">private</span><span class="o">[</span><span class="kt">this</span><span class="o">]</span> <span class="k">val</span> <span class="nc">ReqDecoder</span> <span class="k">=</span>
</span><span class='line'>     <span class="n">versionCheckingEnvelopeToContentDecoder</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;ProtocolVersion&quot;</span><span class="o">&gt;</span><span class="nc">FmdbReq</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="k">private</span><span class="o">[</span><span class="kt">this</span><span class="o">]</span> <span class="k">val</span> <span class="nc">RepDecoder</span> <span class="k">=</span>
</span><span class='line'>     <span class="n">versionCheckingEnvelopeToContentDecoder</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;ProtocolVersion&quot;</span><span class="o">&gt;</span><span class="nc">FmdbRep</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="k">private</span><span class="o">[</span><span class="kt">this</span><span class="o">]</span> <span class="k">val</span> <span class="nc">ReqEncoder</span> <span class="k">=</span> <span class="n">typeSafeEncoder</span><span class="o">[</span><span class="kt">FmdbReq</span><span class="o">]</span>
</span><span class='line'>  <span class="k">private</span><span class="o">[</span><span class="kt">this</span><span class="o">]</span> <span class="k">val</span> <span class="nc">RepEncoder</span> <span class="k">=</span> <span class="n">typeSafeEncoder</span><span class="o">[</span><span class="kt">FmdbRep</span><span class="o">]&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">private</span><span class="o">[</span><span class="kt">this</span><span class="o">]</span> <span class="k">object</span> <span class="nc">FmdbServerPipeline</span> <span class="k">extends</span> <span class="nc">ChannelPipelineFactory</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">getPipeline</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">pipeline</span> <span class="k">=</span> <span class="nc">Channels</span><span class="o">.</span><span class="n">pipeline</span><span class="o">()</span>
</span><span class='line'>      <span class="n">pipeline</span><span class="o">.</span><span class="n">addLast</span><span class="o">(</span><span class="err">“</span><span class="n">envDecoder</span><span class="err">”</span><span class="o">,</span> <span class="k">new</span> <span class="nc">EnvelopeDecoder</span><span class="o">)</span>
</span><span class='line'>      <span class="n">pipeline</span><span class="o">.</span><span class="n">addLast</span><span class="o">(</span><span class="err">“</span><span class="n">reqDecoder</span><span class="err">”</span><span class="o">,</span> <span class="nc">ReqDecoder</span><span class="o">)</span>
</span><span class='line'>      <span class="n">pipeline</span><span class="o">.</span><span class="n">addLast</span><span class="o">(</span><span class="err">“</span><span class="n">envEncoder</span><span class="err">”</span><span class="o">,</span> <span class="k">new</span> <span class="nc">EnvelopeEncoder</span><span class="o">(</span><span class="nc">ProtocolVersion</span><span class="o">))</span>
</span><span class='line'>      <span class="n">pipeline</span><span class="o">.</span><span class="n">addLast</span><span class="o">(</span><span class="err">“</span><span class="n">repEncoder</span><span class="err">”</span><span class="o">,</span> <span class="nc">RepEncoder</span><span class="o">)</span>
</span><span class='line'>      <span class="n">pipeline</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">private</span><span class="o">[</span><span class="kt">this</span><span class="o">]</span> <span class="k">object</span> <span class="nc">FmdbClientPipeline</span> <span class="k">extends</span> <span class="nc">ChannelPipelineFactory</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">getPipeline</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">pipeline</span> <span class="k">=</span> <span class="nc">Channels</span><span class="o">.</span><span class="n">pipeline</span><span class="o">()</span>
</span><span class='line'>      <span class="n">pipeline</span><span class="o">.</span><span class="n">addLast</span><span class="o">(</span><span class="err">“</span><span class="n">envEncode</span><span class="err">”</span><span class="o">,</span> <span class="k">new</span> <span class="nc">EnvelopeEncoder</span><span class="o">(</span><span class="nc">ProtocolVersion</span><span class="o">))</span>
</span><span class='line'>      <span class="n">pipeline</span><span class="o">.</span><span class="n">addLast</span><span class="o">(</span><span class="err">“</span><span class="n">reqEncode</span><span class="err">”</span><span class="o">,</span> <span class="nc">ReqEncoder</span><span class="o">)</span>
</span><span class='line'>      <span class="n">pipeline</span><span class="o">.</span><span class="n">addLast</span><span class="o">(</span><span class="err">“</span><span class="n">envDecode</span><span class="err">”</span><span class="o">,</span> <span class="k">new</span> <span class="nc">EnvelopeDecoder</span><span class="o">)</span>
</span><span class='line'>      <span class="n">pipeline</span><span class="o">.</span><span class="n">addLast</span><span class="o">(</span><span class="err">“</span><span class="n">repDecode</span><span class="err">”</span><span class="o">,</span> <span class="nc">RepDecoder</span><span class="o">)</span>
</span><span class='line'>      <span class="n">pipeline</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">private</span><span class="o">[</span><span class="kt">this</span><span class="o">]</span> <span class="k">object</span> <span class="nc">FmdbClientTransporter</span> <span class="k">extends</span> <span class="nc">Netty3Transporter</span><span class="o">[</span><span class="kt">FmdbReq</span>, <span class="kt">FmdbRep</span><span class="o">](</span>
</span><span class='line'>    <span class="err">“</span><span class="n">fmdbClientTransporter</span><span class="err">”</span><span class="o">,</span> <span class="nc">FmdbClientPipeline</span>
</span><span class='line'>  <span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">private</span><span class="o">[</span><span class="kt">distributed</span><span class="o">]</span> <span class="k">object</span> <span class="nc">Client</span> <span class="k">extends</span> <span class="nc">DefaultClient</span><span class="o">[</span><span class="kt">FmdbReq</span>, <span class="kt">FmdbRep</span><span class="o">](</span>
</span><span class='line'>    <span class="err">“</span><span class="n">fmdbClient</span><span class="err">”</span><span class="o">,</span> <span class="n">endpointer</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">bridge</span> <span class="k">=</span>
</span><span class='line'>        <span class="nc">Bridge</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;FmdbClientTransporter, new SerialClientDispatcher(_)&quot;</span><span class="o">&gt;</span><span class="nc">FmdbReq</span><span class="o">,</span> <span class="nc">FmdbRep</span><span class="o">,</span> <span class="nc">FmdbReq</span><span class="o">,</span> <span class="nc">FmdbRep</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">(</span><span class="n">addr</span><span class="o">,</span> <span class="n">stats</span><span class="o">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">bridge</span><span class="o">(</span><span class="n">addr</span><span class="o">,</span> <span class="n">stats</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">private</span><span class="o">[</span><span class="kt">this</span><span class="o">]</span> <span class="k">object</span> <span class="nc">FmdbListener</span> <span class="k">extends</span> <span class="nc">Netty3Listener</span><span class="o">[</span><span class="kt">FmdbRep</span>, <span class="kt">FmdbReq</span><span class="o">](</span>
</span><span class='line'>    <span class="err">“</span><span class="n">fmdbListener</span><span class="err">”</span><span class="o">,</span> <span class="nc">FmdbServerPipeline</span>
</span><span class='line'>  <span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">protected</span><span class="o">[</span><span class="kt">distributed</span><span class="o">]</span> <span class="k">object</span> <span class="nc">Server</span> <span class="k">extends</span> <span class="nc">DefaultServer</span><span class="o">[</span><span class="kt">FmdbReq</span>, <span class="kt">FmdbRep</span>, <span class="kt">FmdbRep</span>, <span class="kt">FmdbReq</span><span class="o">](</span>
</span><span class='line'>    <span class="err">“</span><span class="n">fmdbServer</span><span class="err">”</span><span class="o">,</span> <span class="nc">FmdbListener</span><span class="o">,</span> <span class="k">new</span> <span class="nc">SerialServerDispatcher</span><span class="o">(</span><span class="k">_</span><span class="o">,</span> <span class="k">_</span><span class="o">)</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="services-implementation">Services implementation</h3>

<p>Now we can implement services defined in first part, that will perform network call to Finagle server, instead of running computations/data-fetching locally:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">FmdbServerConfig</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">serverAddress</span><span class="k">:</span> <span class="kt">SocketAddress&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">import</span> <span class="nn">ServiceProtocol._&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">private</span><span class="o">[</span><span class="kt">this</span><span class="o">]</span> <span class="k">val</span> <span class="n">retry</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">RetryingFilter</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;retryPolicy = RetryPolicy.tries(3),</span>
</span><span class='line'><span class="s">    timer = DefaultTimer.twitter&quot;</span><span class="o">&gt;</span><span class="nc">FmdbReq</span><span class="o">,</span> <span class="nc">FmdbRep</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">private</span><span class="o">[</span><span class="kt">this</span><span class="o">]</span> <span class="k">val</span> <span class="n">timeout</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">TimeoutFilter</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;timeout = Duration.fromSeconds(10),</span>
</span><span class='line'><span class="s">    timer = DefaultTimer.twitter&quot;</span><span class="o">&gt;</span><span class="nc">FmdbReq</span><span class="o">,</span> <span class="nc">FmdbRep</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">protected</span> <span class="k">lazy</span> <span class="k">val</span> <span class="n">client</span> <span class="k">=</span>
</span><span class='line'>    <span class="n">retry</span>      <span class="n">andThen</span>
</span><span class='line'>    <span class="n">timeout</span>    <span class="n">andThen</span>
</span><span class='line'>    <span class="nc">Fmdb</span><span class="o">.</span><span class="nc">Client</span><span class="o">.</span><span class="n">newService</span><span class="o">(</span><span class="nc">Name</span><span class="o">.</span><span class="n">bound</span><span class="o">(</span><span class="n">serverAddress</span><span class="o">),</span> <span class="err">“</span><span class="n">fmdbClient</span><span class="err">”</span><span class="o">)</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">trait</span> <span class="nc">PeopleServiceImpl</span> <span class="k">extends</span> <span class="nc">PeopleService</span> <span class="k">with</span> <span class="nc">FmdbServerConfig</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">import</span> <span class="nn">ServiceProtocol._&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">people</span><span class="o">()</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Vector</span><span class="o">[</span><span class="kt">Person</span><span class="o">]]</span> <span class="k">=</span> <span class="n">client</span><span class="o">(</span><span class="nc">GetPeople</span><span class="o">).</span><span class="n">map</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">GotPeople</span><span class="o">(</span><span class="n">people</span><span class="o">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">people</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">err</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">sys</span><span class="o">.</span><span class="n">error</span><span class="o">(</span><span class="n">s</span><span class="err">”</span><span class="nc">Unexpected</span> <span class="n">server</span> <span class="n">response</span><span class="k">:</span> <span class="kt">$err</span><span class="err">”</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}.</span><span class="n">toScala</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;//</span> <span class="err">…</span> <span class="n">more</span> <span class="n">on</span> <span class="nc">Github</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I’m not going to describe hot convert Twitter Future to Scala Future, it’s all available on <a href="https://github.com/ezhulenev/finagled-movie-db">Github</a>.</p>

<h3 id="lets-run-it">Let’s run it!</h3>

<p>Let’s find all movies with Leonardo DiCaprio, as we did in first part. However now example application will be a client that will be sending requests via network to movies service server.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">DistributedExample</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">val</span> <span class="n">address</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">InetSocketAddress</span><span class="o">(</span><span class="mi">10000</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;//</span> <span class="nc">Lets</span> <span class="n">start</span> <span class="n">server</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">server</span> <span class="k">=</span> <span class="nc">FmdbServer</span><span class="o">.</span><span class="n">serve</span><span class="o">(</span><span class="n">address</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;//</span> <span class="nc">Lets</span> <span class="n">create</span> <span class="n">services</span>
</span><span class='line'>  <span class="k">object</span> <span class="nc">Services</span> <span class="k">extends</span> <span class="nc">PeopleServiceImpl</span> <span class="k">with</span> <span class="nc">MoviesServiceImpl</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">serverAddress</span><span class="k">:</span> <span class="kt">SocketAddress</span> <span class="o">=</span> <span class="n">address</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;//</span> <span class="nc">Lets</span><span class="err">’</span> <span class="n">get</span> <span class="n">all</span> <span class="n">movies</span> <span class="k">for</span> <span class="nc">Leonardo</span> <span class="nc">DiCaprio</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">leo</span> <span class="k">=</span> <span class="nc">Await</span><span class="o">.</span>
</span><span class='line'>    <span class="n">result</span><span class="o">(</span><span class="nc">Services</span><span class="o">.</span><span class="n">people</span><span class="o">(),</span> <span class="mf">1.</span><span class="n">second</span><span class="o">).</span><span class="n">find</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">firstName</span> <span class="o">==</span> <span class="err">“</span><span class="nc">Leonardo</span><span class="err">”</span><span class="o">).</span><span class="n">get</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">leoMovies</span> <span class="k">=</span> <span class="nc">Await</span><span class="o">.</span>
</span><span class='line'>    <span class="n">result</span><span class="o">(</span><span class="nc">Services</span><span class="o">.</span><span class="n">movies</span><span class="o">(</span><span class="n">leo</span><span class="o">),</span> <span class="mf">1.</span><span class="n">second</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="err">”</span><span class="nc">Movies</span> <span class="k">with</span> <span class="n">$</span><span class="o">{</span><span class="n">leo</span><span class="o">.</span><span class="n">firstName</span><span class="o">}</span> <span class="n">$</span><span class="o">{</span><span class="n">leo</span><span class="o">.</span><span class="n">secondName</span><span class="o">}</span><span class="k">:</span><span class="err">”</span><span class="o">)</span>
</span><span class='line'>  <span class="n">leoMovies</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">m</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">s</span><span class="err">”</span> <span class="o">-</span> <span class="n">$</span><span class="o">{</span><span class="n">m</span><span class="o">.</span><span class="n">title</span><span class="o">},</span> <span class="n">$</span><span class="o">{</span><span class="n">m</span><span class="o">.</span><span class="n">year</span><span class="o">}</span><span class="err">”</span><span class="o">).</span><span class="n">foreach</span><span class="o">(</span><span class="n">println</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;//</span> <span class="nc">Shutdown</span>
</span><span class='line'>  <span class="n">server</span><span class="o">.</span><span class="n">close</span><span class="o">()</span>
</span><span class='line'>  <span class="nc">System</span><span class="o">.</span><span class="n">exit</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h5 id="output">Output</h5>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Apr 09, 2014 2:02:18 PM com.twitter.finagle.Init$ apply
</span><span class='line'>INFO: Finagle version 6.13.1 (rev=12bb3f3f5004109a4c2b981091a327b6ba2e7a6a) built at 20140324-225705
</span><span class='line'>Movies with Leonardo DiCaprio:
</span><span class='line'> - Django Unchained, 2012</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="result">Result</h3>

<p>As you can see final application in Part 1 is pretty the same is in Part 2.
But with Finagle server-side part of application can be scaled independently, and completely transparent to the client.</p>

<p>Finagle has amazing cluster discovery support, built on top of Zookeeper and ServerGroups, and it’s perfect choice for cloud environment.</p>

<h2 id="go-to-part-1blog20140409seamless-migration-from-monolithic-application-to-finagle-services-1"><a href="/blog/2014/04/09/seamless-migration-from-monolithic-application-to-finagle-services-1">«&lt; Go to Part 1</a></h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seamless Migration From Monolithic Application to Finagle Services (Part 1/2)]]></title>
    <link href="http://eugenezhulenev.com/blog/2014/04/09/seamless-migration-from-monolithic-application-to-finagle-services-1/"/>
    <updated>2014-04-09T22:03:45-04:00</updated>
    <id>http://eugenezhulenev.com/blog/2014/04/09/seamless-migration-from-monolithic-application-to-finagle-services-1</id>
    <content type="html"><![CDATA[<h3 id="synopsis">Synopsis</h3>

<blockquote>
  <p>The code &amp; sample app can be found on <a href="https://github.com/ezhulenev/finagled-movie-db">Github</a></p>
</blockquote>

<p>Distributed micro-services architecture is hot trend right now, it’s widely adopted by <a href="https://blog.twitter.com/2011/finagle-a-protocol-agnostic-rpc-system">Twitter</a>, <a href="https://engineering.linkedin.com/architecture/restli-restful-service-architecture-scale">LinkedIn</a> and <a href="http://www.slideshare.net/LappleApple/gilt-from-monolith-ruby-app-to-micro-service-scala-service-architecture">Gilt</a>.
However it can be difficult if data model is already defined, and services accessed via existing API throughout all your code. I’ll show how it’s possible to split monoliths app into standalone services built with Finagle and SBinary for custom communication protocol.</p>

<p>I’m going to show it on example of small Fancy Movie Database application.</p>

<h2 id="part-1-fancy-movie-database-application">[Part 1] Fancy Movie Database application</h2>

<p>Go to <a href="/blog/2014/04/09/seamless-migration-from-monolithic-application-to-finagle-services-2">Part 2</a> where fancy movie database application is divided into server and client using Finagle.</p>

<!-- more -->

<h3 id="data-model">Data model</h3>

<p>Let’s start with application data model definition:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">Genre</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">object</span> <span class="nc">Genre</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Action</span>      <span class="k">extends</span> <span class="nc">Genre</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Adventure</span>   <span class="k">extends</span> <span class="nc">Genre</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Animation</span>   <span class="k">extends</span> <span class="nc">Genre</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Biography</span>   <span class="k">extends</span> <span class="nc">Genre</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Comedy</span>      <span class="k">extends</span> <span class="nc">Genre</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Crime</span>       <span class="k">extends</span> <span class="nc">Genre</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Documentary</span> <span class="k">extends</span> <span class="nc">Genre</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Drama</span>       <span class="k">extends</span> <span class="nc">Genre</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Thriller</span>    <span class="k">extends</span> <span class="nc">Genre</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Western</span>     <span class="k">extends</span> <span class="nc">Genre</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">case</span> <span class="k">class</span> <span class="nc">Person</span><span class="o">(</span><span class="n">firstName</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">secondName</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">born</span><span class="k">:</span> <span class="kt">LocalDate</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">case</span> <span class="k">class</span> <span class="nc">Cast</span><span class="o">(</span><span class="n">person</span><span class="k">:</span> <span class="kt">Person</span><span class="o">,</span> <span class="n">as</span><span class="k">:</span> <span class="kt">String</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">case</span> <span class="k">class</span> <span class="nc">Movie</span><span class="o">(</span><span class="n">title</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span>
</span><span class='line'>                 <span class="n">genre</span><span class="k">:</span> <span class="kt">Genre</span><span class="o">,</span>
</span><span class='line'>                 <span class="n">year</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span>
</span><span class='line'>                 <span class="n">directedBy</span><span class="k">:</span> <span class="kt">Person</span><span class="o">,</span>
</span><span class='line'>                 <span class="n">cast</span><span class="k">:</span> <span class="kt">Vector</span><span class="o">[</span><span class="kt">Cast</span><span class="o">])&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="services-definition">Services definition</h3>

<p>And services that we want to provide:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">PeopleService</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">people</span><span class="o">()</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Vector</span><span class="o">[</span><span class="kt">Person</span><span class="o">]]</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">trait</span> <span class="nc">MoviesService</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">movies</span><span class="o">()</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Vector</span><span class="o">[</span><span class="kt">Movie</span><span class="o">]]&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">movies</span><span class="o">(</span><span class="n">year</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Vector</span><span class="o">[</span><span class="kt">Movie</span><span class="o">]]&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">movies</span><span class="o">(</span><span class="n">genre</span><span class="k">:</span> <span class="kt">Genre</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Vector</span><span class="o">[</span><span class="kt">Movie</span><span class="o">]]&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">movies</span><span class="o">(</span><span class="n">person</span><span class="k">:</span> <span class="kt">Person</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Vector</span><span class="o">[</span><span class="kt">Movie</span><span class="o">]]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="mock-data-access-layer">Mock data access layer</h3>

<p>In real application we probably would have SQL database or some other type of storage with movies data.
Let’s assume that this storage is <code>blocking resource</code>, and quite expensive to access.
However for this example application I will use small in-memory mock implementation of access layer with only two movies directed by <a href="http://www.imdb.com/name/nm0000233/">Quentin Tarantino</a>: <a href="http://www.imdb.com/title/tt1853728/?ref_=nm_flmg_dr_3">Django Unchained</a>, and <a href="http://www.imdb.com/title/tt0361748/?ref_=nm_flmg_dr_4">Inglourious Basterds</a></p>

<blockquote>
  <p>Source code for access layer on Github: <a href="https://github.com/ezhulenev/finagled-movie-db/blob/master/core/src/main/scala/com/fmdb/MovieDatabaseAccess.scala">MovieDatabaseAccess.scala</a></p>
</blockquote>

<h3 id="lets-be-reactive">Let’s be reactive</h3>

<p>I hope we all agree that applications needs to be <code>reactive</code>, that’s why I’m wrapping <code>blocking</code> calls into <code>scala.concurrent.future</code>.</p>

<p>Straightforward services layer implementation:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">object</span> <span class="n">monolithic</span> <span class="o">{</span>
</span><span class='line'><span class="k">trait</span> <span class="nc">PeopleServiceImpl</span> <span class="k">extends</span> <span class="nc">PeopleService</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">people</span><span class="o">()</span> <span class="k">=</span>
</span><span class='line'>       <span class="n">future</span> <span class="o">{</span> <span class="nc">MovieDatabaseAccess</span><span class="o">.</span><span class="n">people</span><span class="o">()</span> <span class="o">}</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">trait</span> <span class="nc">MoviesServiceImpl</span> <span class="k">extends</span> <span class="nc">MoviesService</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">movies</span><span class="o">(</span><span class="n">person</span><span class="k">:</span> <span class="kt">Person</span><span class="o">)</span> <span class="k">=</span>
</span><span class='line'>       <span class="n">future</span> <span class="o">{</span> <span class="nc">MovieDatabaseAccess</span><span class="o">.</span><span class="n">movies</span><span class="o">(</span><span class="n">person</span><span class="o">)</span> <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">override</span> <span class="k">def</span> <span class="n">movies</span><span class="o">(</span><span class="n">genre</span><span class="k">:</span> <span class="kt">Genre</span><span class="o">)</span> <span class="k">=</span>
</span><span class='line'>       <span class="n">future</span> <span class="o">{</span> <span class="nc">MovieDatabaseAccess</span><span class="o">.</span><span class="n">movies</span><span class="o">(</span><span class="n">genre</span><span class="o">)</span> <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">override</span> <span class="k">def</span> <span class="n">movies</span><span class="o">(</span><span class="n">year</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span>
</span><span class='line'>       <span class="n">future</span> <span class="o">{</span> <span class="nc">MovieDatabaseAccess</span><span class="o">.</span><span class="n">movies</span><span class="o">(</span><span class="n">year</span><span class="o">)</span> <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">override</span> <span class="k">def</span> <span class="n">movies</span><span class="o">()</span> <span class="k">=</span>
</span><span class='line'>       <span class="n">future</span> <span class="o">{</span> <span class="nc">MovieDatabaseAccess</span><span class="o">.</span><span class="n">movies</span><span class="o">()</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="lets-combine-it-together">Let’s combine it together</h3>

<p>After model and services are defined, and basic implementation is provided we can build simple application for querying Fancy Movies Database.</p>

<p>Let’s find all movies with Leonardo DiCaprio:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">MonolithicExample</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;//</span> <span class="nc">Lets</span> <span class="n">create</span> <span class="n">services</span>
</span><span class='line'>  <span class="k">object</span> <span class="nc">Services</span> <span class="k">extends</span> <span class="nc">PeopleServiceImpl</span> <span class="k">with</span> <span class="nc">MoviesServiceImpl</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;//</span> <span class="nc">Lets</span><span class="err">’</span> <span class="n">get</span> <span class="n">all</span> <span class="n">movies</span> <span class="k">for</span> <span class="nc">Leonardo</span> <span class="nc">DiCaprio</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">leo</span> <span class="k">=</span> <span class="nc">Await</span><span class="o">.</span>
</span><span class='line'>    <span class="n">result</span><span class="o">(</span><span class="nc">Services</span><span class="o">.</span><span class="n">people</span><span class="o">(),</span> <span class="mf">1.</span><span class="n">second</span><span class="o">).</span><span class="n">find</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">firstName</span> <span class="o">==</span> <span class="err">“</span><span class="nc">Leonardo</span><span class="err">”</span><span class="o">).</span><span class="n">get</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">val</span> <span class="n">leoMovies</span> <span class="k">=</span> <span class="nc">Await</span><span class="o">.</span>
</span><span class='line'>    <span class="n">result</span><span class="o">(</span><span class="nc">Services</span><span class="o">.</span><span class="n">movies</span><span class="o">(</span><span class="n">leo</span><span class="o">),</span> <span class="mf">1.</span><span class="n">second</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="err">”</span><span class="nc">Movies</span> <span class="k">with</span> <span class="n">$</span><span class="o">{</span><span class="n">leo</span><span class="o">.</span><span class="n">firstName</span><span class="o">}</span> <span class="n">$</span><span class="o">{</span><span class="n">leo</span><span class="o">.</span><span class="n">secondName</span><span class="o">}</span><span class="k">:</span><span class="err">”</span><span class="o">)</span>
</span><span class='line'>  <span class="n">leoMovies</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">m</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">s</span><span class="err">”</span> <span class="o">-</span> <span class="n">$</span><span class="o">{</span><span class="n">m</span><span class="o">.</span><span class="n">title</span><span class="o">},</span> <span class="n">$</span><span class="o">{</span><span class="n">m</span><span class="o">.</span><span class="n">year</span><span class="o">}</span><span class="err">”</span><span class="o">).</span><span class="n">foreach</span><span class="o">(</span><span class="n">println</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;//</span> <span class="nc">Shutdown</span>
</span><span class='line'>  <span class="nc">System</span><span class="o">.</span><span class="n">exit</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h5 id="output">Output</h5>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Movies with Leonardo DiCaprio:
</span><span class='line'> - Django Unchained, 2012</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="next-step">Next step</h3>

<p>In next part I’m going to divide this application into server and client preserving existing API, such that migration from monolithic application to distributed is completely seamless for <code>service clients</code>.</p>

<h2 id="go-to-part-2blog20140409seamless-migration-from-monolithic-application-to-finagle-services-2"><a href="/blog/2014/04/09/seamless-migration-from-monolithic-application-to-finagle-services-2">»&gt; Go to Part 2</a></h2>
]]></content>
  </entry>
  
</feed>
