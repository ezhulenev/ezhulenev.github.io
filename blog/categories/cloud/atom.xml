<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Cloud | Eugene Zhulenev]]></title>
  <link href="http://eugenezhulenev.com/blog/categories/cloud/atom.xml" rel="self"/>
  <link href="http://eugenezhulenev.com/"/>
  <updated>2014-11-24T19:07:17-05:00</updated>
  <id>http://eugenezhulenev.com/</id>
  <author>
    <name><![CDATA[Eugene Zhulenev]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Seamless Migration From Monolithic Application to Finagle Services (Part 2/2)]]></title>
    <link href="http://eugenezhulenev.com/blog/2014/04/09/seamless-migration-from-monolithic-application-to-finagle-services-2/"/>
    <updated>2014-04-09T22:03:45-04:00</updated>
    <id>http://eugenezhulenev.com/blog/2014/04/09/seamless-migration-from-monolithic-application-to-finagle-services-2</id>
    <content type="html"><![CDATA[<h3 id="synopsis">Synopsis</h3>

<blockquote>
  <p>The code &amp; sample app can be found on <a href="https://github.com/ezhulenev/finagled-movie-db">Github</a></p>
</blockquote>

<p>Distributed micro-services architecture is hot trend right now, it’s widely adopted by <a href="https://blog.twitter.com/2011/finagle-a-protocol-agnostic-rpc-system">Twitter</a>, <a href="https://engineering.linkedin.com/architecture/restli-restful-service-architecture-scale">LinkedIn</a> and <a href="http://www.slideshare.net/LappleApple/gilt-from-monolith-ruby-app-to-micro-service-scala-service-architecture">Gilt</a>.
However it can be difficult if data model is already defined, and services accessed via existing API throughout all your code. I’ll show how it’s possible to split monoliths app into standalone services built with Finagle and SBinary for custom communication protocol.</p>

<p>I’m going to show it on example of small Fancy Movie Database application.</p>

<h2 id="part-22-spit-application-to-distributed-services">[Part 2/2] Spit application to distributed services</h2>

<p>Go to <a href="/blog/2014/04/09/seamless-migration-from-monolithic-application-to-finagle-services-1">Part 1</a> where fancy movie database application defined.</p>

<h3 id="what-is-finagle">What is Finagle</h3>

<p>Finagle is a protocol-agnostic, asynchronous RPC system for the JVM that makes it easy to build robust clients and servers in Java, Scala, or any JVM-hosted language.</p>

<!-- more -->

<h6 id="finagle-provides-a-robust-implementation-of">Finagle provides a robust implementation of:</h6>
<ul>
  <li>connection pools, with throttling to avoid TCP connection churn;</li>
  <li>failure detectors, to identify slow or crashed hosts;</li>
  <li>failover strategies, to direct traffic away from unhealthy hosts;</li>
  <li>load-balancers, including “least-connections” and other strategies; and</li>
</ul>

<p>You can read more about finagle on <a href="http://twitter.github.io/finagle/">official web site</a></p>

<h4 id="whats-wrong-with-finagle">What’s wrong with finagle</h4>

<p>Finagle is protocol agnostic system, and can work independently of underlying protocol, however suggested protocol is Thrift, and tooling support is built around Thrift (code generators, etc).
One biggest drawbacks of Thrift, is that it’s required to define model and services using interface definition language (IDL).
However if model and services already defined (as in this example), it can be painful to migrate well-typed scala model to IDL.</p>

<p>In this case we can use protocol-agnostic property of Finagle and write out own binary protocol for existing scala model.</p>

<h3 id="sbinary">SBinary</h3>

<p><a href="https://github.com/harrah/sbinary">SBinary</a> is a library for describing binary protocols, in the form of mappings between Scala types and binary formats. It can be used as a robust serialization mechanism for Scala objects or a way of dealing with existing binary formats found in the wild.</p>

<blockquote>
  <p>Great <a href="https://code.google.com/p/sbinary/wiki/IntroductionToSBinary">Introduction to SBinary</a> article</p>
</blockquote>

<h3 id="binary-format-for-data-model">Binary format for data model</h3>

<p>First we need a way to read/write data model from binary representation:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">ModelProtocol</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">import</span> <span class="nn">sbinary.DefaultProtocol._</span>
</span><span class='line'>  <span class="k">import</span> <span class="nn">sbinary.Operations._</span>
</span><span class='line'>  <span class="k">import</span> <span class="nn">sbinary._&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">implicit</span> <span class="k">object</span> <span class="nc">genreFormat</span> <span class="k">extends</span> <span class="nc">Format</span><span class="o">[</span><span class="kt">Genre</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">import</span> <span class="nn">Genre._&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">override</span> <span class="k">def</span> <span class="n">reads</span><span class="o">(</span><span class="n">in</span><span class="k">:</span> <span class="kt">Input</span><span class="o">)</span><span class="k">:</span> <span class="kt">Genre</span> <span class="o">=</span> <span class="n">read</span><span class="o">[</span><span class="kt">Byte</span><span class="o">](</span><span class="n">in</span><span class="o">)</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">0</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">Action</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">1</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">Adventure</span>
</span><span class='line'>  <span class="o">....</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">override</span> <span class="k">def</span> <span class="n">writes</span><span class="o">(</span><span class="n">out</span><span class="k">:</span> <span class="kt">Output</span><span class="o">,</span> <span class="n">value</span><span class="k">:</span> <span class="kt">Genre</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">genreCode</span><span class="k">:</span> <span class="kt">Byte</span> <span class="o">=</span> <span class="n">value</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Action</span>      <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Adventure</span>   <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">1</span>
</span><span class='line'>    <span class="o">....</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">write</span><span class="o">[</span><span class="kt">Byte</span><span class="o">](</span><span class="n">out</span><span class="o">,</span> <span class="n">genreCode</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>   <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">implicit</span> <span class="k">object</span> <span class="nc">personFormat</span> <span class="k">extends</span> <span class="nc">Format</span><span class="o">[</span><span class="kt">Person</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">def</span> <span class="n">reads</span><span class="o">(</span><span class="n">in</span><span class="k">:</span> <span class="kt">Input</span><span class="o">)</span> <span class="k">=</span>
</span><span class='line'>      <span class="nc">Person</span><span class="o">(</span><span class="n">read</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;in&quot;</span><span class="o">&gt;</span><span class="nc">String</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;,</span> <span class="n">read</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;in&quot;</span><span class="o">&gt;</span><span class="nc">String</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;,</span> <span class="n">read</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;in&quot;</span><span class="o">&gt;</span><span class="nc">LocalDate</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">override</span> <span class="k">def</span> <span class="n">writes</span><span class="o">(</span><span class="n">out</span><span class="k">:</span> <span class="kt">Output</span><span class="o">,</span> <span class="n">person</span><span class="k">:</span> <span class="kt">Person</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">write</span><span class="o">[</span><span class="kt">String</span><span class="o">](</span><span class="n">out</span><span class="o">,</span> <span class="n">person</span><span class="o">.</span><span class="n">firstName</span><span class="o">)</span>
</span><span class='line'>  <span class="n">write</span><span class="o">[</span><span class="kt">String</span><span class="o">](</span><span class="n">out</span><span class="o">,</span> <span class="n">person</span><span class="o">.</span><span class="n">secondName</span><span class="o">)</span>
</span><span class='line'>  <span class="n">write</span><span class="o">[</span><span class="kt">LocalDate</span><span class="o">](</span><span class="n">out</span><span class="o">,</span> <span class="n">person</span><span class="o">.</span><span class="n">born</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>   <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;//</span> <span class="err">…</span> <span class="n">much</span> <span class="n">more</span> <span class="n">on</span> <span class="nc">Github</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="binary-format-for-requestresponse">Binary format for Request/Response</h3>

<p>Nest step, is to build request-response commands that going to be passed between server and client:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">ServiceProtocol</span> <span class="k">extends</span> <span class="nc">ModelProtocol</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">FmdbReq</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">GetPeople</span> <span class="k">extends</span> <span class="nc">FmdbReq</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">class</span> <span class="nc">GetMovies</span><span class="o">(</span><span class="n">year</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Int</span><span class="o">],</span> <span class="n">genre</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Genre</span><span class="o">],</span> <span class="n">person</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Person</span><span class="o">])</span> <span class="k">extends</span> <span class="nc">FmdbReq</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">FmdbRep</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">class</span> <span class="nc">GotPeople</span><span class="o">(</span><span class="n">people</span><span class="k">:</span> <span class="kt">Vector</span><span class="o">[</span><span class="kt">Person</span><span class="o">])</span> <span class="k">extends</span> <span class="nc">FmdbRep</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">class</span> <span class="nc">GotMovies</span><span class="o">(</span><span class="n">movies</span><span class="k">:</span> <span class="kt">Vector</span><span class="o">[</span><span class="kt">Movie</span><span class="o">])</span> <span class="k">extends</span> <span class="nc">FmdbRep</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">implicit</span> <span class="k">object</span> <span class="nc">requestFormat</span> <span class="k">extends</span> <span class="nc">Format</span><span class="o">[</span><span class="kt">FmdbReq</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">def</span> <span class="n">reads</span><span class="o">(</span><span class="n">in</span><span class="k">:</span> <span class="kt">Input</span><span class="o">)</span> <span class="k">=</span> <span class="n">read</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;in&quot;</span><span class="o">&gt;</span><span class="nc">Byte</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">0</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>           <span class="nc">GetPeople</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="k">case</span> <span class="mi">1</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>       <span class="nc">GetMovies</span><span class="o">(</span><span class="n">read</span><span class="o">[</span><span class="kt">Option</span><span class="o">[</span><span class="kt">Int</span><span class="o">]](</span><span class="n">in</span><span class="o">),</span>
</span><span class='line'>                 <span class="n">read</span><span class="o">[</span><span class="kt">Option</span><span class="o">[</span><span class="kt">Genre</span><span class="o">]](</span><span class="n">in</span><span class="o">),</span>
</span><span class='line'>                 <span class="n">read</span><span class="o">[</span><span class="kt">Option</span><span class="o">[</span><span class="kt">Person</span><span class="o">]](</span><span class="n">in</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">override</span> <span class="k">def</span> <span class="n">writes</span><span class="o">(</span><span class="n">out</span><span class="k">:</span> <span class="kt">Output</span><span class="o">,</span> <span class="n">req</span><span class="k">:</span> <span class="kt">FmdbReq</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">req</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">GetPeople</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>      <span class="n">write</span><span class="o">[</span><span class="kt">Byte</span><span class="o">](</span><span class="n">out</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="nc">GetMovies</span><span class="o">(</span><span class="n">year</span><span class="o">,</span> <span class="n">genre</span><span class="o">,</span> <span class="n">person</span><span class="o">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>       <span class="n">write</span><span class="o">[</span><span class="kt">Byte</span><span class="o">](</span><span class="n">out</span><span class="o">,</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>       <span class="n">write</span><span class="o">[</span><span class="kt">Option</span><span class="o">[</span><span class="kt">Int</span><span class="o">]](</span><span class="n">out</span><span class="o">,</span> <span class="n">year</span><span class="o">)</span>
</span><span class='line'>       <span class="n">write</span><span class="o">[</span><span class="kt">Option</span><span class="o">[</span><span class="kt">Genre</span><span class="o">]](</span><span class="n">out</span><span class="o">,</span> <span class="n">genre</span><span class="o">)</span>
</span><span class='line'>       <span class="n">write</span><span class="o">[</span><span class="kt">Option</span><span class="o">[</span><span class="kt">Person</span><span class="o">]](</span><span class="n">out</span><span class="o">,</span> <span class="n">person</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>   <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;//</span> <span class="err">…</span> <span class="n">the</span> <span class="n">same</span> <span class="k">for</span> <span class="nc">Response</span><span class="o">,</span> <span class="n">see</span> <span class="n">more</span> <span class="n">on</span> <span class="nc">Github</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="combine-it-all-together">Combine it all together</h3>

<p>Now we need to combine together binary protocol defined earlier with Finagle channel pipelines, and create Client/Server builders.</p>

<p>For sure we want to update this binary protocol at some later point, adding new commands and updating application model, and to be it still safe.
For this reason I’m wrapping each message into <code>versioned envelop</code>, however I’m not going to describe it in this post, full code is available on Github.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">Fmdb</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">import</span> <span class="nn">ServiceProtocol._</span>
</span><span class='line'>  <span class="k">import</span> <span class="nn">envelopeCodec._&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">private</span><span class="o">[</span><span class="kt">this</span><span class="o">]</span> <span class="k">val</span> <span class="nc">ProtocolVersion</span><span class="k">:</span> <span class="kt">Long</span> <span class="o">=</span> <span class="mi">1</span><span class="n">l</span>
</span><span class='line'>  <span class="k">private</span><span class="o">[</span><span class="kt">this</span><span class="o">]</span> <span class="k">val</span> <span class="nc">ReqDecoder</span> <span class="k">=</span>
</span><span class='line'>     <span class="n">versionCheckingEnvelopeToContentDecoder</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;ProtocolVersion&quot;</span><span class="o">&gt;</span><span class="nc">FmdbReq</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="k">private</span><span class="o">[</span><span class="kt">this</span><span class="o">]</span> <span class="k">val</span> <span class="nc">RepDecoder</span> <span class="k">=</span>
</span><span class='line'>     <span class="n">versionCheckingEnvelopeToContentDecoder</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;ProtocolVersion&quot;</span><span class="o">&gt;</span><span class="nc">FmdbRep</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="k">private</span><span class="o">[</span><span class="kt">this</span><span class="o">]</span> <span class="k">val</span> <span class="nc">ReqEncoder</span> <span class="k">=</span> <span class="n">typeSafeEncoder</span><span class="o">[</span><span class="kt">FmdbReq</span><span class="o">]</span>
</span><span class='line'>  <span class="k">private</span><span class="o">[</span><span class="kt">this</span><span class="o">]</span> <span class="k">val</span> <span class="nc">RepEncoder</span> <span class="k">=</span> <span class="n">typeSafeEncoder</span><span class="o">[</span><span class="kt">FmdbRep</span><span class="o">]&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">private</span><span class="o">[</span><span class="kt">this</span><span class="o">]</span> <span class="k">object</span> <span class="nc">FmdbServerPipeline</span> <span class="k">extends</span> <span class="nc">ChannelPipelineFactory</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">getPipeline</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">pipeline</span> <span class="k">=</span> <span class="nc">Channels</span><span class="o">.</span><span class="n">pipeline</span><span class="o">()</span>
</span><span class='line'>      <span class="n">pipeline</span><span class="o">.</span><span class="n">addLast</span><span class="o">(</span><span class="err">“</span><span class="n">envDecoder</span><span class="err">”</span><span class="o">,</span> <span class="k">new</span> <span class="nc">EnvelopeDecoder</span><span class="o">)</span>
</span><span class='line'>      <span class="n">pipeline</span><span class="o">.</span><span class="n">addLast</span><span class="o">(</span><span class="err">“</span><span class="n">reqDecoder</span><span class="err">”</span><span class="o">,</span> <span class="nc">ReqDecoder</span><span class="o">)</span>
</span><span class='line'>      <span class="n">pipeline</span><span class="o">.</span><span class="n">addLast</span><span class="o">(</span><span class="err">“</span><span class="n">envEncoder</span><span class="err">”</span><span class="o">,</span> <span class="k">new</span> <span class="nc">EnvelopeEncoder</span><span class="o">(</span><span class="nc">ProtocolVersion</span><span class="o">))</span>
</span><span class='line'>      <span class="n">pipeline</span><span class="o">.</span><span class="n">addLast</span><span class="o">(</span><span class="err">“</span><span class="n">repEncoder</span><span class="err">”</span><span class="o">,</span> <span class="nc">RepEncoder</span><span class="o">)</span>
</span><span class='line'>      <span class="n">pipeline</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">private</span><span class="o">[</span><span class="kt">this</span><span class="o">]</span> <span class="k">object</span> <span class="nc">FmdbClientPipeline</span> <span class="k">extends</span> <span class="nc">ChannelPipelineFactory</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">getPipeline</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">pipeline</span> <span class="k">=</span> <span class="nc">Channels</span><span class="o">.</span><span class="n">pipeline</span><span class="o">()</span>
</span><span class='line'>      <span class="n">pipeline</span><span class="o">.</span><span class="n">addLast</span><span class="o">(</span><span class="err">“</span><span class="n">envEncode</span><span class="err">”</span><span class="o">,</span> <span class="k">new</span> <span class="nc">EnvelopeEncoder</span><span class="o">(</span><span class="nc">ProtocolVersion</span><span class="o">))</span>
</span><span class='line'>      <span class="n">pipeline</span><span class="o">.</span><span class="n">addLast</span><span class="o">(</span><span class="err">“</span><span class="n">reqEncode</span><span class="err">”</span><span class="o">,</span> <span class="nc">ReqEncoder</span><span class="o">)</span>
</span><span class='line'>      <span class="n">pipeline</span><span class="o">.</span><span class="n">addLast</span><span class="o">(</span><span class="err">“</span><span class="n">envDecode</span><span class="err">”</span><span class="o">,</span> <span class="k">new</span> <span class="nc">EnvelopeDecoder</span><span class="o">)</span>
</span><span class='line'>      <span class="n">pipeline</span><span class="o">.</span><span class="n">addLast</span><span class="o">(</span><span class="err">“</span><span class="n">repDecode</span><span class="err">”</span><span class="o">,</span> <span class="nc">RepDecoder</span><span class="o">)</span>
</span><span class='line'>      <span class="n">pipeline</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">private</span><span class="o">[</span><span class="kt">this</span><span class="o">]</span> <span class="k">object</span> <span class="nc">FmdbClientTransporter</span> <span class="k">extends</span> <span class="nc">Netty3Transporter</span><span class="o">[</span><span class="kt">FmdbReq</span>, <span class="kt">FmdbRep</span><span class="o">](</span>
</span><span class='line'>    <span class="err">“</span><span class="n">fmdbClientTransporter</span><span class="err">”</span><span class="o">,</span> <span class="nc">FmdbClientPipeline</span>
</span><span class='line'>  <span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">private</span><span class="o">[</span><span class="kt">distributed</span><span class="o">]</span> <span class="k">object</span> <span class="nc">Client</span> <span class="k">extends</span> <span class="nc">DefaultClient</span><span class="o">[</span><span class="kt">FmdbReq</span>, <span class="kt">FmdbRep</span><span class="o">](</span>
</span><span class='line'>    <span class="err">“</span><span class="n">fmdbClient</span><span class="err">”</span><span class="o">,</span> <span class="n">endpointer</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">bridge</span> <span class="k">=</span>
</span><span class='line'>        <span class="nc">Bridge</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;FmdbClientTransporter, new SerialClientDispatcher(_)&quot;</span><span class="o">&gt;</span><span class="nc">FmdbReq</span><span class="o">,</span> <span class="nc">FmdbRep</span><span class="o">,</span> <span class="nc">FmdbReq</span><span class="o">,</span> <span class="nc">FmdbRep</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">(</span><span class="n">addr</span><span class="o">,</span> <span class="n">stats</span><span class="o">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">bridge</span><span class="o">(</span><span class="n">addr</span><span class="o">,</span> <span class="n">stats</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">private</span><span class="o">[</span><span class="kt">this</span><span class="o">]</span> <span class="k">object</span> <span class="nc">FmdbListener</span> <span class="k">extends</span> <span class="nc">Netty3Listener</span><span class="o">[</span><span class="kt">FmdbRep</span>, <span class="kt">FmdbReq</span><span class="o">](</span>
</span><span class='line'>    <span class="err">“</span><span class="n">fmdbListener</span><span class="err">”</span><span class="o">,</span> <span class="nc">FmdbServerPipeline</span>
</span><span class='line'>  <span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">protected</span><span class="o">[</span><span class="kt">distributed</span><span class="o">]</span> <span class="k">object</span> <span class="nc">Server</span> <span class="k">extends</span> <span class="nc">DefaultServer</span><span class="o">[</span><span class="kt">FmdbReq</span>, <span class="kt">FmdbRep</span>, <span class="kt">FmdbRep</span>, <span class="kt">FmdbReq</span><span class="o">](</span>
</span><span class='line'>    <span class="err">“</span><span class="n">fmdbServer</span><span class="err">”</span><span class="o">,</span> <span class="nc">FmdbListener</span><span class="o">,</span> <span class="k">new</span> <span class="nc">SerialServerDispatcher</span><span class="o">(</span><span class="k">_</span><span class="o">,</span> <span class="k">_</span><span class="o">)</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="services-implementation">Services implementation</h3>

<p>Now we can implement services defined in first part, that will perform network call to Finagle server, instead of running computations/data-fetching locally:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">FmdbServerConfig</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">serverAddress</span><span class="k">:</span> <span class="kt">SocketAddress&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">import</span> <span class="nn">ServiceProtocol._&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">private</span><span class="o">[</span><span class="kt">this</span><span class="o">]</span> <span class="k">val</span> <span class="n">retry</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">RetryingFilter</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;retryPolicy = RetryPolicy.tries(3),</span>
</span><span class='line'><span class="s">    timer = DefaultTimer.twitter&quot;</span><span class="o">&gt;</span><span class="nc">FmdbReq</span><span class="o">,</span> <span class="nc">FmdbRep</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">private</span><span class="o">[</span><span class="kt">this</span><span class="o">]</span> <span class="k">val</span> <span class="n">timeout</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">TimeoutFilter</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;timeout = Duration.fromSeconds(10),</span>
</span><span class='line'><span class="s">    timer = DefaultTimer.twitter&quot;</span><span class="o">&gt;</span><span class="nc">FmdbReq</span><span class="o">,</span> <span class="nc">FmdbRep</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">protected</span> <span class="k">lazy</span> <span class="k">val</span> <span class="n">client</span> <span class="k">=</span>
</span><span class='line'>    <span class="n">retry</span>      <span class="n">andThen</span>
</span><span class='line'>    <span class="n">timeout</span>    <span class="n">andThen</span>
</span><span class='line'>    <span class="nc">Fmdb</span><span class="o">.</span><span class="nc">Client</span><span class="o">.</span><span class="n">newService</span><span class="o">(</span><span class="nc">Name</span><span class="o">.</span><span class="n">bound</span><span class="o">(</span><span class="n">serverAddress</span><span class="o">),</span> <span class="err">“</span><span class="n">fmdbClient</span><span class="err">”</span><span class="o">)</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">trait</span> <span class="nc">PeopleServiceImpl</span> <span class="k">extends</span> <span class="nc">PeopleService</span> <span class="k">with</span> <span class="nc">FmdbServerConfig</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">import</span> <span class="nn">ServiceProtocol._&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">people</span><span class="o">()</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Vector</span><span class="o">[</span><span class="kt">Person</span><span class="o">]]</span> <span class="k">=</span> <span class="n">client</span><span class="o">(</span><span class="nc">GetPeople</span><span class="o">).</span><span class="n">map</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">GotPeople</span><span class="o">(</span><span class="n">people</span><span class="o">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">people</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">err</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">sys</span><span class="o">.</span><span class="n">error</span><span class="o">(</span><span class="n">s</span><span class="err">”</span><span class="nc">Unexpected</span> <span class="n">server</span> <span class="n">response</span><span class="k">:</span> <span class="kt">$err</span><span class="err">”</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}.</span><span class="n">toScala</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;//</span> <span class="err">…</span> <span class="n">more</span> <span class="n">on</span> <span class="nc">Github</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I’m not going to describe hot convert Twitter Future to Scala Future, it’s all available on <a href="https://github.com/ezhulenev/finagled-movie-db">Github</a>.</p>

<h3 id="lets-run-it">Let’s run it!</h3>

<p>Let’s find all movies with Leonardo DiCaprio, as we did in first part. However now example application will be a client that will be sending requests via network to movies service server.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">DistributedExample</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">val</span> <span class="n">address</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">InetSocketAddress</span><span class="o">(</span><span class="mi">10000</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;//</span> <span class="nc">Lets</span> <span class="n">start</span> <span class="n">server</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">server</span> <span class="k">=</span> <span class="nc">FmdbServer</span><span class="o">.</span><span class="n">serve</span><span class="o">(</span><span class="n">address</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;//</span> <span class="nc">Lets</span> <span class="n">create</span> <span class="n">services</span>
</span><span class='line'>  <span class="k">object</span> <span class="nc">Services</span> <span class="k">extends</span> <span class="nc">PeopleServiceImpl</span> <span class="k">with</span> <span class="nc">MoviesServiceImpl</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">serverAddress</span><span class="k">:</span> <span class="kt">SocketAddress</span> <span class="o">=</span> <span class="n">address</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;//</span> <span class="nc">Lets</span><span class="err">’</span> <span class="n">get</span> <span class="n">all</span> <span class="n">movies</span> <span class="k">for</span> <span class="nc">Leonardo</span> <span class="nc">DiCaprio</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">leo</span> <span class="k">=</span> <span class="nc">Await</span><span class="o">.</span>
</span><span class='line'>    <span class="n">result</span><span class="o">(</span><span class="nc">Services</span><span class="o">.</span><span class="n">people</span><span class="o">(),</span> <span class="mf">1.</span><span class="n">second</span><span class="o">).</span><span class="n">find</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">firstName</span> <span class="o">==</span> <span class="err">“</span><span class="nc">Leonardo</span><span class="err">”</span><span class="o">).</span><span class="n">get</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">leoMovies</span> <span class="k">=</span> <span class="nc">Await</span><span class="o">.</span>
</span><span class='line'>    <span class="n">result</span><span class="o">(</span><span class="nc">Services</span><span class="o">.</span><span class="n">movies</span><span class="o">(</span><span class="n">leo</span><span class="o">),</span> <span class="mf">1.</span><span class="n">second</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="err">”</span><span class="nc">Movies</span> <span class="k">with</span> <span class="n">$</span><span class="o">{</span><span class="n">leo</span><span class="o">.</span><span class="n">firstName</span><span class="o">}</span> <span class="n">$</span><span class="o">{</span><span class="n">leo</span><span class="o">.</span><span class="n">secondName</span><span class="o">}</span><span class="k">:</span><span class="err">”</span><span class="o">)</span>
</span><span class='line'>  <span class="n">leoMovies</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">m</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">s</span><span class="err">”</span> <span class="o">-</span> <span class="n">$</span><span class="o">{</span><span class="n">m</span><span class="o">.</span><span class="n">title</span><span class="o">},</span> <span class="n">$</span><span class="o">{</span><span class="n">m</span><span class="o">.</span><span class="n">year</span><span class="o">}</span><span class="err">”</span><span class="o">).</span><span class="n">foreach</span><span class="o">(</span><span class="n">println</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;//</span> <span class="nc">Shutdown</span>
</span><span class='line'>  <span class="n">server</span><span class="o">.</span><span class="n">close</span><span class="o">()</span>
</span><span class='line'>  <span class="nc">System</span><span class="o">.</span><span class="n">exit</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h5 id="output">Output</h5>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Apr 09, 2014 2:02:18 PM com.twitter.finagle.Init$ apply
</span><span class='line'>INFO: Finagle version 6.13.1 (rev=12bb3f3f5004109a4c2b981091a327b6ba2e7a6a) built at 20140324-225705
</span><span class='line'>Movies with Leonardo DiCaprio:
</span><span class='line'> - Django Unchained, 2012</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="result">Result</h3>

<p>As you can see final application in Part 1 is pretty the same is in Part 2.
But with Finagle server-side part of application can be scaled independently, and completely transparent to the client.</p>

<p>Finagle has amazing cluster discovery support, built on top of Zookeeper and ServerGroups, and it’s perfect choice for cloud environment.</p>

<h2 id="go-to-part-1blog20140409seamless-migration-from-monolithic-application-to-finagle-services-1"><a href="/blog/2014/04/09/seamless-migration-from-monolithic-application-to-finagle-services-1">«&lt; Go to Part 1</a></h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seamless Migration From Monolithic Application to Finagle Services (Part 1/2)]]></title>
    <link href="http://eugenezhulenev.com/blog/2014/04/09/seamless-migration-from-monolithic-application-to-finagle-services-1/"/>
    <updated>2014-04-09T22:03:45-04:00</updated>
    <id>http://eugenezhulenev.com/blog/2014/04/09/seamless-migration-from-monolithic-application-to-finagle-services-1</id>
    <content type="html"><![CDATA[<h3 id="synopsis">Synopsis</h3>

<blockquote>
  <p>The code &amp; sample app can be found on <a href="https://github.com/ezhulenev/finagled-movie-db">Github</a></p>
</blockquote>

<p>Distributed micro-services architecture is hot trend right now, it’s widely adopted by <a href="https://blog.twitter.com/2011/finagle-a-protocol-agnostic-rpc-system">Twitter</a>, <a href="https://engineering.linkedin.com/architecture/restli-restful-service-architecture-scale">LinkedIn</a> and <a href="http://www.slideshare.net/LappleApple/gilt-from-monolith-ruby-app-to-micro-service-scala-service-architecture">Gilt</a>.
However it can be difficult if data model is already defined, and services accessed via existing API throughout all your code. I’ll show how it’s possible to split monoliths app into standalone services built with Finagle and SBinary for custom communication protocol.</p>

<p>I’m going to show it on example of small Fancy Movie Database application.</p>

<h2 id="part-1-fancy-movie-database-application">[Part 1] Fancy Movie Database application</h2>

<p>Go to <a href="/blog/2014/04/09/seamless-migration-from-monolithic-application-to-finagle-services-2">Part 2</a> where fancy movie database application is divided into server and client using Finagle.</p>

<!-- more -->

<h3 id="data-model">Data model</h3>

<p>Let’s start with application data model definition:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">Genre</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">object</span> <span class="nc">Genre</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Action</span>      <span class="k">extends</span> <span class="nc">Genre</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Adventure</span>   <span class="k">extends</span> <span class="nc">Genre</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Animation</span>   <span class="k">extends</span> <span class="nc">Genre</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Biography</span>   <span class="k">extends</span> <span class="nc">Genre</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Comedy</span>      <span class="k">extends</span> <span class="nc">Genre</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Crime</span>       <span class="k">extends</span> <span class="nc">Genre</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Documentary</span> <span class="k">extends</span> <span class="nc">Genre</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Drama</span>       <span class="k">extends</span> <span class="nc">Genre</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Thriller</span>    <span class="k">extends</span> <span class="nc">Genre</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Western</span>     <span class="k">extends</span> <span class="nc">Genre</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">case</span> <span class="k">class</span> <span class="nc">Person</span><span class="o">(</span><span class="n">firstName</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">secondName</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">born</span><span class="k">:</span> <span class="kt">LocalDate</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">case</span> <span class="k">class</span> <span class="nc">Cast</span><span class="o">(</span><span class="n">person</span><span class="k">:</span> <span class="kt">Person</span><span class="o">,</span> <span class="n">as</span><span class="k">:</span> <span class="kt">String</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">case</span> <span class="k">class</span> <span class="nc">Movie</span><span class="o">(</span><span class="n">title</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span>
</span><span class='line'>                 <span class="n">genre</span><span class="k">:</span> <span class="kt">Genre</span><span class="o">,</span>
</span><span class='line'>                 <span class="n">year</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span>
</span><span class='line'>                 <span class="n">directedBy</span><span class="k">:</span> <span class="kt">Person</span><span class="o">,</span>
</span><span class='line'>                 <span class="n">cast</span><span class="k">:</span> <span class="kt">Vector</span><span class="o">[</span><span class="kt">Cast</span><span class="o">])&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="services-definition">Services definition</h3>

<p>And services that we want to provide:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">PeopleService</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">people</span><span class="o">()</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Vector</span><span class="o">[</span><span class="kt">Person</span><span class="o">]]</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">trait</span> <span class="nc">MoviesService</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">movies</span><span class="o">()</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Vector</span><span class="o">[</span><span class="kt">Movie</span><span class="o">]]&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">movies</span><span class="o">(</span><span class="n">year</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Vector</span><span class="o">[</span><span class="kt">Movie</span><span class="o">]]&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">movies</span><span class="o">(</span><span class="n">genre</span><span class="k">:</span> <span class="kt">Genre</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Vector</span><span class="o">[</span><span class="kt">Movie</span><span class="o">]]&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">movies</span><span class="o">(</span><span class="n">person</span><span class="k">:</span> <span class="kt">Person</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Vector</span><span class="o">[</span><span class="kt">Movie</span><span class="o">]]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="mock-data-access-layer">Mock data access layer</h3>

<p>In real application we probably would have SQL database or some other type of storage with movies data.
Let’s assume that this storage is <code>blocking resource</code>, and quite expensive to access.
However for this example application I will use small in-memory mock implementation of access layer with only two movies directed by <a href="http://www.imdb.com/name/nm0000233/">Quentin Tarantino</a>: <a href="http://www.imdb.com/title/tt1853728/?ref_=nm_flmg_dr_3">Django Unchained</a>, and <a href="http://www.imdb.com/title/tt0361748/?ref_=nm_flmg_dr_4">Inglourious Basterds</a></p>

<blockquote>
  <p>Source code for access layer on Github: <a href="https://github.com/ezhulenev/finagled-movie-db/blob/master/core/src/main/scala/com/fmdb/MovieDatabaseAccess.scala">MovieDatabaseAccess.scala</a></p>
</blockquote>

<h3 id="lets-be-reactive">Let’s be reactive</h3>

<p>I hope we all agree that applications needs to be <code>reactive</code>, that’s why I’m wrapping <code>blocking</code> calls into <code>scala.concurrent.future</code>.</p>

<p>Straightforward services layer implementation:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">object</span> <span class="n">monolithic</span> <span class="o">{</span>
</span><span class='line'><span class="k">trait</span> <span class="nc">PeopleServiceImpl</span> <span class="k">extends</span> <span class="nc">PeopleService</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">people</span><span class="o">()</span> <span class="k">=</span>
</span><span class='line'>       <span class="n">future</span> <span class="o">{</span> <span class="nc">MovieDatabaseAccess</span><span class="o">.</span><span class="n">people</span><span class="o">()</span> <span class="o">}</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">trait</span> <span class="nc">MoviesServiceImpl</span> <span class="k">extends</span> <span class="nc">MoviesService</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">movies</span><span class="o">(</span><span class="n">person</span><span class="k">:</span> <span class="kt">Person</span><span class="o">)</span> <span class="k">=</span>
</span><span class='line'>       <span class="n">future</span> <span class="o">{</span> <span class="nc">MovieDatabaseAccess</span><span class="o">.</span><span class="n">movies</span><span class="o">(</span><span class="n">person</span><span class="o">)</span> <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">override</span> <span class="k">def</span> <span class="n">movies</span><span class="o">(</span><span class="n">genre</span><span class="k">:</span> <span class="kt">Genre</span><span class="o">)</span> <span class="k">=</span>
</span><span class='line'>       <span class="n">future</span> <span class="o">{</span> <span class="nc">MovieDatabaseAccess</span><span class="o">.</span><span class="n">movies</span><span class="o">(</span><span class="n">genre</span><span class="o">)</span> <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">override</span> <span class="k">def</span> <span class="n">movies</span><span class="o">(</span><span class="n">year</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span>
</span><span class='line'>       <span class="n">future</span> <span class="o">{</span> <span class="nc">MovieDatabaseAccess</span><span class="o">.</span><span class="n">movies</span><span class="o">(</span><span class="n">year</span><span class="o">)</span> <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">override</span> <span class="k">def</span> <span class="n">movies</span><span class="o">()</span> <span class="k">=</span>
</span><span class='line'>       <span class="n">future</span> <span class="o">{</span> <span class="nc">MovieDatabaseAccess</span><span class="o">.</span><span class="n">movies</span><span class="o">()</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="lets-combine-it-together">Let’s combine it together</h3>

<p>After model and services are defined, and basic implementation is provided we can build simple application for querying Fancy Movies Database.</p>

<p>Let’s find all movies with Leonardo DiCaprio:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">MonolithicExample</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;//</span> <span class="nc">Lets</span> <span class="n">create</span> <span class="n">services</span>
</span><span class='line'>  <span class="k">object</span> <span class="nc">Services</span> <span class="k">extends</span> <span class="nc">PeopleServiceImpl</span> <span class="k">with</span> <span class="nc">MoviesServiceImpl</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;//</span> <span class="nc">Lets</span><span class="err">’</span> <span class="n">get</span> <span class="n">all</span> <span class="n">movies</span> <span class="k">for</span> <span class="nc">Leonardo</span> <span class="nc">DiCaprio</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">leo</span> <span class="k">=</span> <span class="nc">Await</span><span class="o">.</span>
</span><span class='line'>    <span class="n">result</span><span class="o">(</span><span class="nc">Services</span><span class="o">.</span><span class="n">people</span><span class="o">(),</span> <span class="mf">1.</span><span class="n">second</span><span class="o">).</span><span class="n">find</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">firstName</span> <span class="o">==</span> <span class="err">“</span><span class="nc">Leonardo</span><span class="err">”</span><span class="o">).</span><span class="n">get</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">val</span> <span class="n">leoMovies</span> <span class="k">=</span> <span class="nc">Await</span><span class="o">.</span>
</span><span class='line'>    <span class="n">result</span><span class="o">(</span><span class="nc">Services</span><span class="o">.</span><span class="n">movies</span><span class="o">(</span><span class="n">leo</span><span class="o">),</span> <span class="mf">1.</span><span class="n">second</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="err">”</span><span class="nc">Movies</span> <span class="k">with</span> <span class="n">$</span><span class="o">{</span><span class="n">leo</span><span class="o">.</span><span class="n">firstName</span><span class="o">}</span> <span class="n">$</span><span class="o">{</span><span class="n">leo</span><span class="o">.</span><span class="n">secondName</span><span class="o">}</span><span class="k">:</span><span class="err">”</span><span class="o">)</span>
</span><span class='line'>  <span class="n">leoMovies</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">m</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">s</span><span class="err">”</span> <span class="o">-</span> <span class="n">$</span><span class="o">{</span><span class="n">m</span><span class="o">.</span><span class="n">title</span><span class="o">},</span> <span class="n">$</span><span class="o">{</span><span class="n">m</span><span class="o">.</span><span class="n">year</span><span class="o">}</span><span class="err">”</span><span class="o">).</span><span class="n">foreach</span><span class="o">(</span><span class="n">println</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;//</span> <span class="nc">Shutdown</span>
</span><span class='line'>  <span class="nc">System</span><span class="o">.</span><span class="n">exit</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h5 id="output">Output</h5>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Movies with Leonardo DiCaprio:
</span><span class='line'> - Django Unchained, 2012</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="next-step">Next step</h3>

<p>In next part I’m going to divide this application into server and client preserving existing API, such that migration from monolithic application to distributed is completely seamless for <code>service clients</code>.</p>

<h2 id="go-to-part-2blog20140409seamless-migration-from-monolithic-application-to-finagle-services-2"><a href="/blog/2014/04/09/seamless-migration-from-monolithic-application-to-finagle-services-2">»&gt; Go to Part 2</a></h2>
]]></content>
  </entry>
  
</feed>
