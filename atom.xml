<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Eugene Zhulenev]]></title>
  <link href="http://eugenezhulenev.com/atom.xml" rel="self"/>
  <link href="http://eugenezhulenev.com/"/>
  <updated>2019-01-01T15:30:25-08:00</updated>
  <id>http://eugenezhulenev.com/</id>
  <author>
    <name><![CDATA[Eugene Zhulenev]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Type-Level Instant Insanity in Scala]]></title>
    <link href="http://eugenezhulenev.com/blog/2017/04/26/type-level-instant-insanity-in-scala/"/>
    <updated>2017-04-26T10:15:16-07:00</updated>
    <id>http://eugenezhulenev.com/blog/2017/04/26/type-level-instant-insanity-in-scala</id>
    <content type="html"><![CDATA[<blockquote>
  <p>This post is a Scala version of <a href="http://blog.kfish.org/2007/09/type-level-instant-insanity.html" target="_blank">Haskell Type-Level Instant Insanity by Conrad Parker</a></p>
</blockquote>

<p>This post shows an implementation of Instant Insanity puzzle game at compile time, using powerful Scala type system. This post is
based on amazing article by Conrad Parker in the <a href="https://wiki.haskell.org/wikiupload/d/dd/TMR-Issue8.pdf" target="_blank">Monad Reader Issue 8</a>.
Original article is around 20 pages long, this post is much more concise version of it. Original article is very well written and easy to 
understand, this post should help with jumping from Scala to Haskell code for people who are not familiar with Haskell language.</p>

<h1 id="textbook-implementation">Textbook Implementation</h1>

<p><em><a href="https://en.wikipedia.org/wiki/Instant_Insanity" target="_blank">Instant Insanity</a></em> puzzle formulated as:</p>

<blockquote>
  <p>It consists of four cubes, with faces coloured blue, green, red or white.
The problem is to arrange the cubes in a vertical pile such that each
visible column of faces contains four distinct colours.</p>
</blockquote>

<p>“Classic” solution in scala can be found <a href="https://gist.github.com/ezhulenev/db594992e5f68f435fdc5970e97f02db" target="_blank">here</a>, this solution
stacks the cubes one at a time, trying each possible orientation of each cube.</p>

<p>I’m going to show how to translate this solution into Scala Type System.</p>

<!-- more -->

<h1 id="type-level-implementation">Type-Level Implementation</h1>

<p>When I say “Type-Level Implementation”, I mean that I’m going to find a solution to the problem without creating any “values”,
just operating with types, and I’ll do it using Scala compiler only, without running any code.</p>

<h1 id="bottom">⊥ (Bottom)</h1>

<p>I’m working in the type system, so I don’t need any value for any of the variables, just the type. In scala there is one
special type, that is subtype of every other type - <code>Nothing</code>. There exist no instances of this type, but that’s ok because I don’t need one.</p>

<p>I’m introducing two functions that will make code look closer to Haskell version, and will save me some typing.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">def</span> <span class="n">undefined</span><span class="o">[</span><span class="kt">T</span><span class="o">]</span><span class="k">:</span> <span class="kt">T</span> <span class="o">=</span> <span class="o">???</span>
</span><span class="line"><span class="k">def</span> <span class="o">⊥[</span><span class="kt">T</span><span class="o">]</span><span class="k">:</span> <span class="kt">T</span> <span class="o">=</span> <span class="n">undefined</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">:type</span> <span class="kt">⊥</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span>
</span><span class="line"><span class="nc">Int</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">:type</span> <span class="kt">⊥</span><span class="o">[</span><span class="kt">Seq</span><span class="o">[</span><span class="kt">String</span><span class="o">]]</span>
</span><span class="line"><span class="nc">Seq</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="simple-types">Simple Types</h2>

<p>There are four possible colors. Rather then encoding them as <code>values</code> of type <code>Char</code>, I’m introducing new types.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">trait</span> <span class="nc">R</span>   <span class="c1">// Red</span>
</span><span class="line"><span class="k">trait</span> <span class="nc">G</span>   <span class="c1">// Green</span>
</span><span class="line"><span class="k">trait</span> <span class="nc">B</span>   <span class="c1">// Blue</span>
</span><span class="line"><span class="k">trait</span> <span class="nc">W</span>   <span class="c1">// White</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">:type</span> <span class="kt">⊥</span><span class="o">[</span><span class="kt">R</span><span class="o">]</span>
</span><span class="line"><span class="n">R</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="parametrized-types">Parametrized Types</h2>

<p>A cube is a thing that can have six faces. In Scala Type System, I use the keyword <code>trait</code> to introduce such a thing:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">trait</span> <span class="nc">Cube</span><span class="o">[</span><span class="kt">u</span>, <span class="kt">f</span>, <span class="kt">r</span>, <span class="kt">b</span>, <span class="kt">l</span>, <span class="kt">d</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I can’t get a type of a <code>Cube</code> because there is not such thing, <code>Cube</code> exist only when it’s applied to <strong>type parameters</strong>,
namely <em>u, f, r, b, l, d</em>. Applying concrete types to <code>Cube</code> will create concrete result type.
One way to think about <code>Cube</code> is that it’s like a function, but at the type level.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">:type</span> <span class="kt">⊥</span><span class="o">[</span><span class="kt">Cube</span><span class="o">]</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">console</span><span class="k">&gt;:</span><span class="mi">17</span><span class="k">:</span> <span class="kt">error:</span> <span class="kt">trait</span> <span class="kt">Cube</span> <span class="kt">takes</span> <span class="k">type</span> <span class="kt">parameters</span>
</span><span class="line">       <span class="o">⊥[</span><span class="kt">Cube</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">:type</span> <span class="kt">⊥</span><span class="o">[</span><span class="kt">Cube</span><span class="o">[</span><span class="kt">R</span>, <span class="kt">R</span>, <span class="kt">R</span>, <span class="kt">R</span>, <span class="kt">R</span>, <span class="kt">R</span><span class="o">]]</span> <span class="c1">// a red cube</span>
</span><span class="line"><span class="nc">Cube</span><span class="o">[</span><span class="kt">R</span>,<span class="kt">R</span>,<span class="kt">R</span>,<span class="kt">R</span>,<span class="kt">R</span>,<span class="kt">R</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="type-aliases">Type Aliases</h2>

<p>Now I can define the actual cubes in our puzzle as results of applying <code>Cube</code> function to concrete types.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">type</span> <span class="kt">CubeRed</span> <span class="o">=</span> <span class="nc">Cube</span><span class="o">[</span><span class="kt">R</span>, <span class="kt">R</span>, <span class="kt">R</span>, <span class="kt">R</span>, <span class="kt">R</span>, <span class="kt">R</span><span class="o">]</span>
</span><span class="line"><span class="k">type</span> <span class="kt">CubeBlue</span> <span class="o">=</span> <span class="nc">Cube</span><span class="o">[</span><span class="kt">B</span>, <span class="kt">B</span>, <span class="kt">B</span>, <span class="kt">B</span>, <span class="kt">B</span>, <span class="kt">B</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="k">type</span> <span class="kt">Cube1</span> <span class="o">=</span> <span class="nc">Cube</span><span class="o">[</span><span class="kt">B</span>, <span class="kt">G</span>, <span class="kt">W</span>, <span class="kt">G</span>, <span class="kt">B</span>, <span class="kt">R</span><span class="o">]</span>
</span><span class="line"><span class="k">type</span> <span class="kt">Cube2</span> <span class="o">=</span> <span class="nc">Cube</span><span class="o">[</span><span class="kt">W</span>, <span class="kt">G</span>, <span class="kt">B</span>, <span class="kt">W</span>, <span class="kt">R</span>, <span class="kt">R</span><span class="o">]</span>
</span><span class="line"><span class="k">type</span> <span class="kt">Cube3</span> <span class="o">=</span> <span class="nc">Cube</span><span class="o">[</span><span class="kt">G</span>, <span class="kt">W</span>, <span class="kt">R</span>, <span class="kt">B</span>, <span class="kt">R</span>, <span class="kt">R</span><span class="o">]</span>
</span><span class="line"><span class="k">type</span> <span class="kt">Cube4</span> <span class="o">=</span> <span class="nc">Cube</span><span class="o">[</span><span class="kt">B</span>, <span class="kt">R</span>, <span class="kt">G</span>, <span class="kt">G</span>, <span class="kt">W</span>, <span class="kt">W</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="transformation-functions">Transformation Functions</h2>

<p>Now I need to encode following three functions from textbook solution at a type-level.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="c1">// Rotate a cube 90 degrees over its Z-axis, leaving up and down in place.</span>
</span><span class="line"><span class="k">def</span> <span class="n">rot</span><span class="k">:</span> <span class="kt">Cube</span> <span class="o">=&gt;</span> <span class="nc">Cube</span> <span class="k">=</span> <span class="o">{</span> <span class="k">case</span> <span class="nc">Seq</span><span class="o">(</span><span class="n">u</span><span class="o">,</span> <span class="n">f</span><span class="o">,</span> <span class="n">r</span><span class="o">,</span> <span class="n">b</span><span class="o">,</span> <span class="n">l</span><span class="o">,</span> <span class="n">d</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">Seq</span><span class="o">(</span><span class="n">u</span><span class="o">,</span> <span class="n">r</span><span class="o">,</span> <span class="n">b</span><span class="o">,</span> <span class="n">l</span><span class="o">,</span> <span class="n">f</span><span class="o">,</span> <span class="n">d</span><span class="o">)</span> <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Twist a cube around the axis running from the upper-front-right</span>
</span><span class="line"><span class="c1">// corner to the back-left-down corner.</span>
</span><span class="line"><span class="k">def</span> <span class="n">twist</span><span class="k">:</span> <span class="kt">Cube</span> <span class="o">=&gt;</span> <span class="nc">Cube</span> <span class="k">=</span> <span class="o">{</span> <span class="k">case</span> <span class="nc">Seq</span><span class="o">(</span><span class="n">u</span><span class="o">,</span> <span class="n">f</span><span class="o">,</span> <span class="n">r</span><span class="o">,</span> <span class="n">b</span><span class="o">,</span> <span class="n">l</span><span class="o">,</span> <span class="n">d</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">Seq</span><span class="o">(</span><span class="n">f</span><span class="o">,</span> <span class="n">r</span><span class="o">,</span> <span class="n">u</span><span class="o">,</span> <span class="n">l</span><span class="o">,</span> <span class="n">d</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Exchange up and down, front and left, back and right.</span>
</span><span class="line"><span class="k">def</span> <span class="n">flip</span><span class="k">:</span> <span class="kt">Cube</span> <span class="o">=&gt;</span> <span class="nc">Cube</span> <span class="k">=</span> <span class="o">{</span> <span class="k">case</span> <span class="nc">Seq</span><span class="o">(</span><span class="n">u</span><span class="o">,</span> <span class="n">f</span><span class="o">,</span> <span class="n">r</span><span class="o">,</span> <span class="n">b</span><span class="o">,</span> <span class="n">l</span><span class="o">,</span> <span class="n">d</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">Seq</span><span class="o">(</span><span class="n">d</span><span class="o">,</span> <span class="n">l</span><span class="o">,</span> <span class="n">b</span><span class="o">,</span> <span class="n">r</span><span class="o">,</span> <span class="n">f</span><span class="o">,</span> <span class="n">u</span><span class="o">)</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I’m going to group all of them into single <code>Transform</code> trait. Implicit <code>transform</code> function can generate an
instance of <code>Transform</code> for any type <em>u, f, r, b, l, d</em>. I’m not providing any implementation for any of them,
because I never going to <em>call</em> them.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">trait</span> <span class="nc">Transform</span><span class="o">[</span><span class="kt">u</span>, <span class="kt">f</span>, <span class="kt">r</span>, <span class="kt">b</span>, <span class="kt">l</span>, <span class="kt">d</span><span class="o">]</span> <span class="o">{</span>
</span><span class="line">  <span class="k">def</span> <span class="n">rot</span><span class="k">:</span> <span class="kt">Cube</span><span class="o">[</span><span class="kt">u</span>, <span class="kt">f</span>, <span class="kt">r</span>, <span class="kt">b</span>, <span class="kt">l</span>, <span class="kt">d</span><span class="o">]</span> <span class="k">=&gt;</span> <span class="nc">Cube</span><span class="o">[</span><span class="kt">u</span>, <span class="kt">r</span>, <span class="kt">b</span>, <span class="kt">l</span>, <span class="kt">f</span>, <span class="kt">d</span><span class="o">]</span>
</span><span class="line">  <span class="k">def</span> <span class="n">twist</span><span class="k">:</span> <span class="kt">Cube</span><span class="o">[</span><span class="kt">u</span>, <span class="kt">f</span>, <span class="kt">r</span>, <span class="kt">b</span>, <span class="kt">l</span>, <span class="kt">d</span><span class="o">]</span> <span class="k">=&gt;</span> <span class="nc">Cube</span><span class="o">[</span><span class="kt">f</span>, <span class="kt">r</span>, <span class="kt">u</span>, <span class="kt">l</span>, <span class="kt">d</span>, <span class="kt">b</span><span class="o">]</span>
</span><span class="line">  <span class="k">def</span> <span class="n">flip</span><span class="k">:</span> <span class="kt">Cube</span><span class="o">[</span><span class="kt">u</span>, <span class="kt">f</span>, <span class="kt">r</span>, <span class="kt">b</span>, <span class="kt">l</span>, <span class="kt">d</span><span class="o">]</span> <span class="k">=&gt;</span> <span class="nc">Cube</span><span class="o">[</span><span class="kt">d</span>, <span class="kt">l</span>, <span class="kt">b</span>, <span class="kt">r</span>, <span class="kt">f</span>, <span class="kt">u</span><span class="o">]</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="k">implicit</span> <span class="k">def</span> <span class="n">transform</span><span class="o">[</span><span class="kt">u</span>, <span class="kt">f</span>, <span class="kt">r</span>, <span class="kt">b</span>, <span class="kt">l</span>, <span class="kt">d</span><span class="o">]</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Transform</span><span class="o">[</span><span class="kt">u</span>, <span class="kt">f</span>, <span class="kt">r</span>, <span class="kt">b</span>, <span class="kt">l</span>, <span class="kt">d</span><span class="o">]</span> <span class="o">{</span>
</span><span class="line">  <span class="k">def</span> <span class="n">rot</span><span class="k">:</span> <span class="o">(</span><span class="kt">Cube</span><span class="o">[</span><span class="kt">u</span>, <span class="kt">f</span>, <span class="kt">r</span>, <span class="kt">b</span>, <span class="kt">l</span>, <span class="kt">d</span><span class="o">])</span> <span class="k">=&gt;</span> <span class="nc">Cube</span><span class="o">[</span><span class="kt">u</span>, <span class="kt">r</span>, <span class="kt">b</span>, <span class="kt">l</span>, <span class="kt">f</span>, <span class="kt">d</span><span class="o">]</span> <span class="k">=</span> <span class="o">⊥</span>
</span><span class="line">  <span class="k">def</span> <span class="n">twist</span><span class="k">:</span> <span class="o">(</span><span class="kt">Cube</span><span class="o">[</span><span class="kt">u</span>, <span class="kt">f</span>, <span class="kt">r</span>, <span class="kt">b</span>, <span class="kt">l</span>, <span class="kt">d</span><span class="o">])</span> <span class="k">=&gt;</span> <span class="nc">Cube</span><span class="o">[</span><span class="kt">f</span>, <span class="kt">r</span>, <span class="kt">u</span>, <span class="kt">l</span>, <span class="kt">d</span>, <span class="kt">b</span><span class="o">]</span> <span class="k">=</span> <span class="o">⊥</span>
</span><span class="line">  <span class="k">def</span> <span class="n">flip</span><span class="k">:</span> <span class="o">(</span><span class="kt">Cube</span><span class="o">[</span><span class="kt">u</span>, <span class="kt">f</span>, <span class="kt">r</span>, <span class="kt">b</span>, <span class="kt">l</span>, <span class="kt">d</span><span class="o">])</span> <span class="k">=&gt;</span> <span class="nc">Cube</span><span class="o">[</span><span class="kt">d</span>, <span class="kt">l</span>, <span class="kt">b</span>, <span class="kt">r</span>, <span class="kt">f</span>, <span class="kt">u</span><span class="o">]</span> <span class="k">=</span> <span class="o">⊥</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="n">rot</span><span class="o">[</span><span class="kt">u</span>, <span class="kt">f</span>, <span class="kt">r</span>, <span class="kt">b</span>, <span class="kt">l</span>, <span class="kt">d</span><span class="o">](</span><span class="n">cube</span><span class="k">:</span> <span class="kt">Cube</span><span class="o">[</span><span class="kt">u</span>, <span class="kt">f</span>, <span class="kt">r</span>, <span class="kt">b</span>, <span class="kt">l</span>, <span class="kt">d</span><span class="o">])</span>
</span><span class="line">    <span class="o">(</span><span class="k">implicit</span> <span class="n">t</span><span class="k">:</span> <span class="kt">Transform</span><span class="o">[</span><span class="kt">u</span>, <span class="kt">f</span>, <span class="kt">r</span>, <span class="kt">b</span>, <span class="kt">l</span>, <span class="kt">d</span><span class="o">])</span> <span class="k">=</span> <span class="n">t</span><span class="o">.</span><span class="n">rot</span><span class="o">(</span><span class="n">cube</span><span class="o">)</span>
</span><span class="line"><span class="k">def</span> <span class="n">twist</span><span class="o">[</span><span class="kt">u</span>, <span class="kt">f</span>, <span class="kt">r</span>, <span class="kt">b</span>, <span class="kt">l</span>, <span class="kt">d</span><span class="o">](</span><span class="n">cube</span><span class="k">:</span> <span class="kt">Cube</span><span class="o">[</span><span class="kt">u</span>, <span class="kt">f</span>, <span class="kt">r</span>, <span class="kt">b</span>, <span class="kt">l</span>, <span class="kt">d</span><span class="o">])</span>
</span><span class="line">    <span class="o">(</span><span class="k">implicit</span> <span class="n">t</span><span class="k">:</span> <span class="kt">Transform</span><span class="o">[</span><span class="kt">u</span>, <span class="kt">f</span>, <span class="kt">r</span>, <span class="kt">b</span>, <span class="kt">l</span>, <span class="kt">d</span><span class="o">])</span> <span class="k">=</span> <span class="n">t</span><span class="o">.</span><span class="n">twist</span><span class="o">(</span><span class="n">cube</span><span class="o">)</span>
</span><span class="line"><span class="k">def</span> <span class="n">flip</span><span class="o">[</span><span class="kt">u</span>, <span class="kt">f</span>, <span class="kt">r</span>, <span class="kt">b</span>, <span class="kt">l</span>, <span class="kt">d</span><span class="o">](</span><span class="n">cube</span><span class="k">:</span> <span class="kt">Cube</span><span class="o">[</span><span class="kt">u</span>, <span class="kt">f</span>, <span class="kt">r</span>, <span class="kt">b</span>, <span class="kt">l</span>, <span class="kt">d</span><span class="o">])</span>
</span><span class="line">    <span class="o">(</span><span class="k">implicit</span> <span class="n">t</span><span class="k">:</span> <span class="kt">Transform</span><span class="o">[</span><span class="kt">u</span>, <span class="kt">f</span>, <span class="kt">r</span>, <span class="kt">b</span>, <span class="kt">l</span>, <span class="kt">d</span><span class="o">])</span> <span class="k">=</span> <span class="n">t</span><span class="o">.</span><span class="n">flip</span><span class="o">(</span><span class="n">cube</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">:type</span> <span class="kt">rot</span><span class="o">(</span><span class="kt">⊥</span><span class="o">[</span><span class="kt">Cube1</span><span class="o">])</span>
</span><span class="line"><span class="nc">Cube</span><span class="o">[</span><span class="kt">B</span>,<span class="kt">W</span>,<span class="kt">G</span>,<span class="kt">B</span>,<span class="kt">G</span>,<span class="kt">R</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">:type</span> <span class="kt">twist</span><span class="o">(</span><span class="kt">flip</span><span class="o">(</span><span class="kt">rot</span><span class="o">(</span><span class="kt">⊥</span><span class="o">[</span><span class="kt">Cube1</span><span class="o">])))</span>
</span><span class="line"><span class="nc">Cube</span><span class="o">[</span><span class="kt">G</span>,<span class="kt">B</span>,<span class="kt">R</span>,<span class="kt">W</span>,<span class="kt">B</span>,<span class="kt">G</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="type-level-boolean-algebra">Type-Level Boolean Algebra</h2>

<p>So far we’ve seen how to construct simple types, and perform type transformations
of one parametrized type into a differently parametrized type.</p>

<p>For solving a puzzle I’ll need some rudimentary boolean algebra at a type-level:</p>

<ul>
  <li>encode true/false in types</li>
  <li>provide boolean <code>and</code> operator</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">trait</span> <span class="nc">True</span>
</span><span class="line"><span class="k">trait</span> <span class="nc">False</span>
</span><span class="line">
</span><span class="line"><span class="k">trait</span> <span class="nc">And</span><span class="o">[</span><span class="kt">l</span>, <span class="kt">r</span>, <span class="kt">o</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="nc">implicit</span> <span class="k">object</span> <span class="nc">ttt</span> <span class="k">extends</span> <span class="nc">And</span><span class="o">[</span><span class="kt">True</span>, <span class="kt">True</span>, <span class="kt">True</span><span class="o">]</span>
</span><span class="line"><span class="k">implicit</span> <span class="k">object</span> <span class="nc">tff</span> <span class="k">extends</span> <span class="nc">And</span><span class="o">[</span><span class="kt">True</span>, <span class="kt">False</span>, <span class="kt">False</span><span class="o">]</span>
</span><span class="line"><span class="k">implicit</span> <span class="k">object</span> <span class="nc">ftf</span> <span class="k">extends</span> <span class="nc">And</span><span class="o">[</span><span class="kt">False</span>, <span class="kt">True</span>, <span class="kt">False</span><span class="o">]</span>
</span><span class="line"><span class="k">implicit</span> <span class="k">object</span> <span class="nc">fff</span> <span class="k">extends</span> <span class="nc">And</span><span class="o">[</span><span class="kt">False</span>, <span class="kt">False</span>, <span class="kt">False</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="n">and</span><span class="o">[</span><span class="kt">l</span>, <span class="kt">r</span>, <span class="kt">o</span><span class="o">](</span><span class="n">l</span><span class="k">:</span> <span class="kt">l</span><span class="o">,</span> <span class="n">r</span><span class="k">:</span> <span class="kt">r</span><span class="o">)(</span><span class="k">implicit</span> <span class="n">and</span><span class="k">:</span> <span class="kt">And</span><span class="o">[</span><span class="kt">l</span>, <span class="kt">r</span>, <span class="kt">o</span><span class="o">])</span><span class="k">:</span> <span class="kt">o</span> <span class="o">=</span> <span class="o">⊥</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">:type</span> <span class="kt">and</span><span class="o">(</span><span class="kt">⊥</span><span class="o">[</span><span class="kt">True</span><span class="o">],</span> <span class="o">⊥[</span><span class="kt">False</span><span class="o">])</span>
</span><span class="line"><span class="nc">False</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">:type</span> <span class="kt">and</span><span class="o">(</span><span class="kt">⊥</span><span class="o">[</span><span class="kt">True</span><span class="o">],</span> <span class="o">⊥[</span><span class="kt">True</span><span class="o">])</span>
</span><span class="line"><span class="nc">True</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="type-level-lists">Type-Level Lists</h2>

<p>Lists at a type-level can be defined as following atoms:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">trait</span> <span class="nc">Nil</span>
</span><span class="line"><span class="k">trait</span> <span class="nc">:::</span><span class="o">[</span><span class="kt">x</span>, <span class="kt">xs</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To make lists useful I’ll need concatenate function, that should be also encoded at a type-level.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">trait</span> <span class="nc">ListConcat</span><span class="o">[</span><span class="kt">l1</span>, <span class="kt">l2</span>, <span class="kt">l</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="nc">implicit</span> <span class="k">def</span> <span class="n">nilConcat</span><span class="o">[</span><span class="kt">l</span><span class="o">]</span><span class="k">:</span> <span class="kt">ListConcat</span><span class="o">[</span><span class="kt">Nil</span>, <span class="kt">l</span>, <span class="kt">l</span><span class="o">]</span> <span class="k">=</span> <span class="o">⊥</span>
</span><span class="line"><span class="k">implicit</span> <span class="k">def</span> <span class="n">notNilConcat</span><span class="o">[</span><span class="kt">x</span>, <span class="kt">xs</span>, <span class="kt">ys</span>, <span class="kt">zs</span><span class="o">](</span><span class="k">implicit</span>
</span><span class="line">  <span class="n">lc</span><span class="k">:</span> <span class="kt">ListConcat</span><span class="o">[</span><span class="kt">xs</span>, <span class="kt">ys</span>, <span class="kt">zs</span><span class="o">]</span>
</span><span class="line"><span class="o">)</span><span class="k">:</span> <span class="kt">ListConcat</span><span class="o">[</span><span class="kt">x</span> <span class="kt">:::</span> <span class="kt">xs</span>, <span class="kt">ys</span>, <span class="kt">x</span> <span class="kt">:::</span> <span class="kt">zs</span><span class="o">]</span> <span class="k">=</span> <span class="o">⊥</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="n">listConcat</span><span class="o">[</span><span class="kt">xs</span>, <span class="kt">ys</span>, <span class="kt">zs</span><span class="o">](</span><span class="n">l1</span><span class="k">:</span> <span class="kt">xs</span><span class="o">,</span> <span class="n">l2</span><span class="k">:</span> <span class="kt">ys</span><span class="o">)(</span><span class="k">implicit</span>
</span><span class="line">  <span class="n">lc</span><span class="k">:</span> <span class="kt">ListConcat</span><span class="o">[</span><span class="kt">xs</span>, <span class="kt">ys</span>, <span class="kt">zs</span><span class="o">]</span>
</span><span class="line"><span class="o">)</span><span class="k">:</span> <span class="kt">zs</span> <span class="o">=</span> <span class="o">⊥</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">:type</span> <span class="kt">listConcat</span><span class="o">(</span><span class="kt">⊥</span><span class="o">[</span><span class="kt">R</span> <span class="kt">:::</span> <span class="kt">Nil</span><span class="o">],</span> <span class="o">⊥[</span><span class="kt">G</span> <span class="kt">:::</span> <span class="kt">W</span> <span class="kt">:::</span> <span class="kt">Nil</span><span class="o">])</span>
</span><span class="line"><span class="o">:::[</span><span class="kt">R</span>,<span class="kt">:::</span><span class="o">[</span><span class="kt">G</span>,<span class="kt">:::</span><span class="o">[</span><span class="kt">W</span>,<span class="kt">Nil</span><span class="o">]]]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As you can see now I can concatenate two lists at type-level: <em>[R] concat [G, W]</em> yields <em>[R, G, W]</em>.</p>

<h2 id="applyable-type-functions">Applyable Type Functions</h2>

<p>For this puzzle I need to be able to do things like <em>flip</em> each of the cubes in a list, which sounds exactly like <em>map</em> at the type level.</p>

<p>First step is abstracting application of a type-level function, so I introduce <code>Apply</code> and supported <em>operations</em>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">trait</span> <span class="nc">Rotation</span>
</span><span class="line"><span class="k">trait</span> <span class="nc">Twist</span>
</span><span class="line"><span class="k">trait</span> <span class="nc">Flip</span>
</span><span class="line">
</span><span class="line"><span class="k">trait</span> <span class="nc">Apply</span><span class="o">[</span><span class="kt">f</span>, <span class="kt">a</span>, <span class="kt">b</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="nc">implicit</span> <span class="k">def</span> <span class="n">apRotation</span><span class="o">[</span><span class="kt">u</span>, <span class="kt">f</span>, <span class="kt">r</span>, <span class="kt">b</span>, <span class="kt">l</span>, <span class="kt">d</span><span class="o">]</span>
</span><span class="line">  <span class="k">:</span> <span class="kt">Apply</span><span class="o">[</span><span class="kt">Rotation</span>, <span class="kt">Cube</span><span class="o">[</span><span class="kt">u</span>, <span class="kt">f</span>, <span class="kt">r</span>, <span class="kt">b</span>, <span class="kt">l</span>, <span class="kt">d</span><span class="o">]</span>, <span class="kt">Cube</span><span class="o">[</span><span class="kt">u</span>, <span class="kt">r</span>, <span class="kt">b</span>, <span class="kt">l</span>, <span class="kt">f</span>, <span class="kt">d</span><span class="o">]]</span> <span class="k">=</span> <span class="o">⊥</span>
</span><span class="line">
</span><span class="line"><span class="k">implicit</span> <span class="k">def</span> <span class="n">apTwist</span><span class="o">[</span><span class="kt">u</span>, <span class="kt">f</span>, <span class="kt">r</span>, <span class="kt">b</span>, <span class="kt">l</span>, <span class="kt">d</span><span class="o">]</span>
</span><span class="line">  <span class="k">:</span> <span class="kt">Apply</span><span class="o">[</span><span class="kt">Twist</span>, <span class="kt">Cube</span><span class="o">[</span><span class="kt">u</span>, <span class="kt">f</span>, <span class="kt">r</span>, <span class="kt">b</span>, <span class="kt">l</span>, <span class="kt">d</span><span class="o">]</span>, <span class="kt">Cube</span><span class="o">[</span><span class="kt">f</span>, <span class="kt">r</span>, <span class="kt">u</span>, <span class="kt">l</span>, <span class="kt">d</span>, <span class="kt">b</span><span class="o">]]</span> <span class="k">=</span> <span class="o">⊥</span>
</span><span class="line">
</span><span class="line"><span class="k">implicit</span> <span class="k">def</span> <span class="n">apFlip</span><span class="o">[</span><span class="kt">u</span>, <span class="kt">f</span>, <span class="kt">r</span>, <span class="kt">b</span>, <span class="kt">l</span>, <span class="kt">d</span><span class="o">]</span>
</span><span class="line">  <span class="k">:</span> <span class="kt">Apply</span><span class="o">[</span><span class="kt">Flip</span>, <span class="kt">Cube</span><span class="o">[</span><span class="kt">u</span>, <span class="kt">f</span>, <span class="kt">r</span>, <span class="kt">b</span>, <span class="kt">l</span>, <span class="kt">d</span><span class="o">]</span>, <span class="kt">Cube</span><span class="o">[</span><span class="kt">d</span>, <span class="kt">l</span>, <span class="kt">b</span>, <span class="kt">r</span>, <span class="kt">f</span>, <span class="kt">u</span><span class="o">]]</span> <span class="k">=</span> <span class="o">⊥</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="n">ap</span><span class="o">[</span><span class="kt">t</span>, <span class="kt">u</span>, <span class="kt">f</span>, <span class="kt">r</span>, <span class="kt">b</span>, <span class="kt">l</span>, <span class="kt">d</span>, <span class="kt">o</span><span class="o">](</span><span class="n">r</span><span class="k">:</span> <span class="kt">t</span><span class="o">,</span> <span class="n">c1</span><span class="k">:</span> <span class="kt">Cube</span><span class="o">[</span><span class="kt">u</span>, <span class="kt">f</span>, <span class="kt">r</span>, <span class="kt">b</span>, <span class="kt">l</span>, <span class="kt">d</span><span class="o">])(</span><span class="k">implicit</span>
</span><span class="line">  <span class="n">ap</span><span class="k">:</span> <span class="kt">Apply</span><span class="o">[</span><span class="kt">t</span>, <span class="kt">Cube</span><span class="o">[</span><span class="kt">u</span>, <span class="kt">f</span>, <span class="kt">r</span>, <span class="kt">b</span>, <span class="kt">l</span>, <span class="kt">d</span><span class="o">]</span>, <span class="kt">o</span><span class="o">]</span>
</span><span class="line"><span class="o">)</span><span class="k">:</span> <span class="kt">o</span> <span class="o">=</span> <span class="o">⊥</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">:type</span> <span class="kt">ap</span><span class="o">(</span><span class="kt">⊥</span><span class="o">[</span><span class="kt">Rotation</span><span class="o">],</span> <span class="o">⊥[</span><span class="kt">Cube1</span><span class="o">])</span>
</span><span class="line"><span class="nc">Cube</span><span class="o">[</span><span class="kt">B</span>,<span class="kt">W</span>,<span class="kt">G</span>,<span class="kt">B</span>,<span class="kt">G</span>,<span class="kt">R</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="map-and-filter">Map and Filter</h2>

<p>Now I can create a function that recurses over a list and <em>Applys</em> another function <em>f</em>  to each element. This is type-level
equivalent of the <em>map</em> function.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">trait</span> <span class="nc">Map</span><span class="o">[</span><span class="kt">f</span>, <span class="kt">xs</span>, <span class="kt">zs</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="nc">implicit</span> <span class="k">def</span> <span class="n">mapNil</span><span class="o">[</span><span class="kt">f</span><span class="o">]</span><span class="k">:</span> <span class="kt">Map</span><span class="o">[</span><span class="kt">f</span>, <span class="kt">Nil</span>, <span class="kt">Nil</span><span class="o">]</span> <span class="k">=</span> <span class="o">⊥</span>
</span><span class="line"><span class="k">implicit</span> <span class="k">def</span> <span class="n">mapCons</span><span class="o">[</span><span class="kt">f</span>, <span class="kt">x</span>, <span class="kt">z</span>, <span class="kt">xs</span>, <span class="kt">zs</span><span class="o">](</span><span class="k">implicit</span>
</span><span class="line">  <span class="n">ap</span><span class="k">:</span> <span class="kt">Apply</span><span class="o">[</span><span class="kt">f</span>, <span class="kt">x</span>, <span class="kt">z</span><span class="o">],</span>
</span><span class="line">  <span class="n">map</span><span class="k">:</span> <span class="kt">Map</span><span class="o">[</span><span class="kt">f</span>, <span class="kt">xs</span>, <span class="kt">zs</span><span class="o">]</span>
</span><span class="line"><span class="o">)</span><span class="k">:</span> <span class="kt">Map</span><span class="o">[</span><span class="kt">f</span>, <span class="kt">x</span> <span class="kt">:::</span> <span class="kt">xs</span>, <span class="kt">z</span> <span class="kt">:::</span> <span class="kt">zs</span><span class="o">]</span> <span class="k">=</span> <span class="o">⊥</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="n">map</span><span class="o">[</span><span class="kt">f</span>, <span class="kt">xs</span>, <span class="kt">zs</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">f</span><span class="o">,</span> <span class="n">xs</span><span class="k">:</span> <span class="kt">xs</span><span class="o">)(</span><span class="k">implicit</span>
</span><span class="line">  <span class="n">map</span><span class="k">:</span> <span class="kt">Map</span><span class="o">[</span><span class="kt">f</span>, <span class="kt">xs</span>, <span class="kt">zs</span><span class="o">]</span>
</span><span class="line"><span class="o">)</span><span class="k">:</span> <span class="kt">zs</span> <span class="o">=</span> <span class="o">⊥</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">:type</span> <span class="kt">map</span><span class="o">(</span><span class="kt">⊥</span><span class="o">[</span><span class="kt">Flip</span><span class="o">],</span> <span class="o">⊥[</span><span class="kt">Cube1</span> <span class="kt">:::</span> <span class="kt">Cube2</span> <span class="kt">:::</span> <span class="kt">Nil</span><span class="o">])</span>
</span><span class="line"><span class="o">:::[</span><span class="kt">Cube</span><span class="o">[</span><span class="kt">R</span>,<span class="kt">B</span>,<span class="kt">G</span>,<span class="kt">W</span>,<span class="kt">G</span>,<span class="kt">B</span><span class="o">]</span>,<span class="kt">:::</span><span class="o">[</span><span class="kt">Cube</span><span class="o">[</span><span class="kt">R</span>,<span class="kt">R</span>,<span class="kt">W</span>,<span class="kt">B</span>,<span class="kt">G</span>,<span class="kt">W</span><span class="o">]</span>,<span class="kt">Nil</span><span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>Filter</code> function is similar to <code>Map</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">trait</span> <span class="nc">Filter</span><span class="o">[</span><span class="kt">f</span>, <span class="kt">xs</span>, <span class="kt">zs</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="nc">implicit</span> <span class="k">def</span> <span class="n">filterNil</span><span class="o">[</span><span class="kt">f</span><span class="o">]</span><span class="k">:</span> <span class="kt">Filter</span><span class="o">[</span><span class="kt">f</span>, <span class="kt">Nil</span>, <span class="kt">Nil</span><span class="o">]</span> <span class="k">=</span> <span class="o">⊥</span>
</span><span class="line"><span class="k">implicit</span> <span class="k">def</span> <span class="n">filterCons</span><span class="o">[</span><span class="kt">f</span>, <span class="kt">x</span>, <span class="kt">b</span>, <span class="kt">xs</span>, <span class="kt">ys</span>, <span class="kt">zs</span><span class="o">](</span><span class="k">implicit</span>
</span><span class="line">  <span class="n">ap</span><span class="k">:</span> <span class="kt">Apply</span><span class="o">[</span><span class="kt">f</span>, <span class="kt">x</span>, <span class="kt">b</span><span class="o">],</span>
</span><span class="line">  <span class="n">f</span><span class="k">:</span> <span class="kt">Filter</span><span class="o">[</span><span class="kt">f</span>, <span class="kt">xs</span>, <span class="kt">ys</span><span class="o">],</span>
</span><span class="line">  <span class="n">apn</span><span class="k">:</span> <span class="kt">AppendIf</span><span class="o">[</span><span class="kt">b</span>, <span class="kt">x</span>, <span class="kt">ys</span>, <span class="kt">zs</span><span class="o">]</span>
</span><span class="line"><span class="o">)</span><span class="k">:</span> <span class="kt">Filter</span><span class="o">[</span><span class="kt">f</span>, <span class="kt">x</span> <span class="kt">:::</span> <span class="kt">xs</span>, <span class="kt">zs</span><span class="o">]</span> <span class="k">=</span> <span class="o">⊥</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>Filter</code> introduced new constraint, <code>AppendIf</code>, which takes a boolean values <em>b</em>, a value <em>x</em> and a list <em>ys</em>. 
The given values <em>x</em> is appended to <em>ys</em> only if <em>b</em> is <em>True</em>, otherwise <em>ys</em> is returned unaltered:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">trait</span> <span class="nc">AppendIf</span><span class="o">[</span><span class="kt">b</span>, <span class="kt">x</span>, <span class="kt">ys</span>, <span class="kt">zs</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="nc">implicit</span> <span class="k">def</span> <span class="n">appendIfTrue</span><span class="o">[</span><span class="kt">x</span>, <span class="kt">ys</span><span class="o">]</span><span class="k">:</span> <span class="kt">AppendIf</span><span class="o">[</span><span class="kt">True</span>, <span class="kt">x</span>, <span class="kt">ys</span>, <span class="kt">x</span> <span class="kt">:::</span> <span class="kt">ys</span><span class="o">]</span> <span class="k">=</span> <span class="o">⊥</span>
</span><span class="line"><span class="k">implicit</span> <span class="k">def</span> <span class="n">appendIfFalse</span><span class="o">[</span><span class="kt">x</span>, <span class="kt">ys</span><span class="o">]</span><span class="k">:</span> <span class="kt">AppendIf</span><span class="o">[</span><span class="kt">False</span>, <span class="kt">x</span>, <span class="kt">ys</span>, <span class="kt">ys</span><span class="o">]</span> <span class="k">=</span> <span class="o">⊥</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="n">append</span><span class="o">[</span><span class="kt">b</span>, <span class="kt">x</span>, <span class="kt">ys</span>, <span class="kt">zs</span><span class="o">](</span><span class="n">b</span><span class="k">:</span> <span class="kt">b</span><span class="o">,</span> <span class="n">x</span><span class="k">:</span> <span class="kt">x</span><span class="o">,</span> <span class="n">ys</span><span class="k">:</span> <span class="kt">ys</span><span class="o">)(</span><span class="k">implicit</span>
</span><span class="line">  <span class="n">apn</span><span class="k">:</span> <span class="kt">AppendIf</span><span class="o">[</span><span class="kt">b</span>, <span class="kt">x</span>, <span class="kt">ys</span>, <span class="kt">zs</span><span class="o">]</span>
</span><span class="line"><span class="o">)</span><span class="k">:</span> <span class="kt">zs</span> <span class="o">=</span> <span class="o">⊥</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">:type</span> <span class="kt">append</span><span class="o">(</span><span class="kt">⊥</span><span class="o">[</span><span class="kt">True</span><span class="o">],</span> <span class="o">⊥[</span><span class="kt">R</span><span class="o">],</span> <span class="o">⊥[</span><span class="kt">G</span> <span class="kt">:::</span> <span class="kt">W</span> <span class="kt">:::</span> <span class="kt">Nil</span><span class="o">])</span>
</span><span class="line"><span class="o">:::[</span><span class="kt">R</span>,<span class="kt">:::</span><span class="o">[</span><span class="kt">G</span>,<span class="kt">:::</span><span class="o">[</span><span class="kt">W</span>,<span class="kt">Nil</span><span class="o">]]]</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">:type</span> <span class="kt">append</span><span class="o">(</span><span class="kt">⊥</span><span class="o">[</span><span class="kt">False</span><span class="o">],</span> <span class="o">⊥[</span><span class="kt">R</span><span class="o">],</span> <span class="o">⊥[</span><span class="kt">G</span> <span class="kt">:::</span> <span class="kt">W</span> <span class="kt">:::</span> <span class="kt">Nil</span><span class="o">])</span>
</span><span class="line"><span class="o">:::[</span><span class="kt">G</span>,<span class="kt">:::</span><span class="o">[</span><span class="kt">W</span>,<span class="kt">Nil</span><span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="sequence-comprehensions">Sequence Comprehensions</h2>

<p>Unfortunately sequence comprehensions can’t be directly mimiced in Scala Type System, but we can translate the meaning of a given
sequence comprehension using the type-level list functions.</p>

<p>For example, building a list of the possible orientations of a cube involves appending a list of possible
applications of <em>flip</em>, so we will need to be able to map over a list and append the original list. <a href="https://gist.github.com/ezhulenev/db594992e5f68f435fdc5970e97f02db#file-instantinsanity-scala-L18" target="_blank">Original sequence comprehension</a> was:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">def</span> <span class="n">orientations</span><span class="k">:</span> <span class="kt">Cube</span> <span class="o">=&gt;</span> <span class="nc">Seq</span><span class="o">[</span><span class="kt">Cube</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span> <span class="n">c</span><span class="k">:</span> <span class="kt">Cube</span> <span class="o">=&gt;</span>
</span><span class="line">    <span class="k">for</span> <span class="o">{</span>
</span><span class="line">      <span class="o">...</span>
</span><span class="line">      <span class="n">c3</span> <span class="k">&lt;-</span> <span class="nc">Seq</span><span class="o">(</span><span class="n">c2</span><span class="o">,</span> <span class="n">flip</span><span class="o">(</span><span class="n">c2</span><span class="o">))</span>
</span><span class="line">    <span class="o">}</span> <span class="k">yield</span> <span class="n">c3</span>
</span><span class="line">  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I create <code>MapAppend</code> class in order to compose <code>Map</code> and <code>ListConcat</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">trait</span> <span class="nc">MapAppend</span><span class="o">[</span><span class="kt">f</span>, <span class="kt">xs</span>, <span class="kt">zs</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="nc">implicit</span> <span class="k">def</span> <span class="n">mapAppendNil</span><span class="o">[</span><span class="kt">f</span><span class="o">]</span><span class="k">:</span> <span class="kt">MapAppend</span><span class="o">[</span><span class="kt">f</span>, <span class="kt">Nil</span>, <span class="kt">Nil</span><span class="o">]</span> <span class="k">=</span> <span class="o">⊥</span>
</span><span class="line"><span class="k">implicit</span> <span class="k">def</span> <span class="n">mapAppendCons</span><span class="o">[</span><span class="kt">f</span>, <span class="kt">xs</span>, <span class="kt">ys</span>, <span class="kt">zs</span><span class="o">](</span><span class="k">implicit</span>
</span><span class="line">  <span class="n">m</span><span class="k">:</span> <span class="kt">Map</span><span class="o">[</span><span class="kt">f</span>, <span class="kt">xs</span>, <span class="kt">ys</span><span class="o">],</span>
</span><span class="line">  <span class="n">lc</span><span class="k">:</span> <span class="kt">ListConcat</span><span class="o">[</span><span class="kt">xs</span>, <span class="kt">ys</span>, <span class="kt">zs</span><span class="o">]</span>
</span><span class="line"><span class="o">)</span><span class="k">:</span> <span class="kt">MapAppend</span><span class="o">[</span><span class="kt">f</span>, <span class="kt">xs</span>, <span class="kt">zs</span><span class="o">]</span> <span class="k">=</span> <span class="o">⊥</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Further, I’ll need to be able to do the same twice for <em>twist</em> and three times for <em>rot</em>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">trait</span> <span class="nc">MapAppend2</span><span class="o">[</span><span class="kt">f</span>, <span class="kt">xs</span>, <span class="kt">zs</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="nc">implicit</span> <span class="k">def</span> <span class="n">mapAppend2Nil</span><span class="o">[</span><span class="kt">f</span><span class="o">]</span><span class="k">:</span> <span class="kt">MapAppend2</span><span class="o">[</span><span class="kt">f</span>, <span class="kt">Nil</span>, <span class="kt">Nil</span><span class="o">]</span> <span class="k">=</span> <span class="o">⊥</span>
</span><span class="line"><span class="k">implicit</span> <span class="k">def</span> <span class="n">mapAppend2Cons</span><span class="o">[</span><span class="kt">f</span>, <span class="kt">xs</span>, <span class="kt">ys</span>, <span class="k">_</span><span class="kt">ys</span>, <span class="kt">zs</span><span class="o">](</span><span class="k">implicit</span>
</span><span class="line">  <span class="n">m</span><span class="k">:</span> <span class="kt">Map</span><span class="o">[</span><span class="kt">f</span>, <span class="kt">xs</span>, <span class="kt">ys</span><span class="o">],</span>
</span><span class="line">  <span class="n">ma</span><span class="k">:</span> <span class="kt">MapAppend</span><span class="o">[</span><span class="kt">f</span>, <span class="kt">ys</span>, <span class="k">_</span><span class="kt">ys</span><span class="o">],</span>
</span><span class="line">  <span class="n">lc</span><span class="k">:</span> <span class="kt">ListConcat</span><span class="o">[</span><span class="kt">xs</span>, <span class="k">_</span><span class="kt">ys</span>, <span class="kt">zs</span><span class="o">]</span>
</span><span class="line"><span class="o">)</span><span class="k">:</span> <span class="kt">MapAppend2</span><span class="o">[</span><span class="kt">f</span>, <span class="kt">xs</span>, <span class="kt">zs</span><span class="o">]</span> <span class="k">=</span> <span class="o">⊥</span>
</span><span class="line">
</span><span class="line"><span class="k">trait</span> <span class="nc">MapAppend3</span><span class="o">[</span><span class="kt">f</span>, <span class="kt">xs</span>, <span class="kt">zs</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="nc">implicit</span> <span class="k">def</span> <span class="n">mapAppend3Nil</span><span class="o">[</span><span class="kt">f</span><span class="o">]</span><span class="k">:</span> <span class="kt">MapAppend3</span><span class="o">[</span><span class="kt">f</span>, <span class="kt">Nil</span>, <span class="kt">Nil</span><span class="o">]</span> <span class="k">=</span> <span class="o">⊥</span>
</span><span class="line"><span class="k">implicit</span> <span class="k">def</span> <span class="n">mapAppend3Cons</span><span class="o">[</span><span class="kt">f</span>, <span class="kt">xs</span>, <span class="kt">ys</span>, <span class="k">_</span><span class="kt">ys</span>, <span class="kt">zs</span><span class="o">](</span><span class="k">implicit</span>
</span><span class="line">  <span class="n">m</span><span class="k">:</span> <span class="kt">Map</span><span class="o">[</span><span class="kt">f</span>, <span class="kt">xs</span>, <span class="kt">ys</span><span class="o">],</span>
</span><span class="line">  <span class="n">ma2</span><span class="k">:</span> <span class="kt">MapAppend2</span><span class="o">[</span><span class="kt">f</span>, <span class="kt">ys</span>, <span class="k">_</span><span class="kt">ys</span><span class="o">],</span>
</span><span class="line">  <span class="n">lc</span><span class="k">:</span> <span class="kt">ListConcat</span><span class="o">[</span><span class="kt">xs</span>, <span class="k">_</span><span class="kt">ys</span>, <span class="kt">zs</span><span class="o">]</span>
</span><span class="line"><span class="o">)</span><span class="k">:</span> <span class="kt">MapAppend3</span><span class="o">[</span><span class="kt">f</span>, <span class="kt">xs</span>, <span class="kt">zs</span><span class="o">]</span> <span class="k">=</span> <span class="o">⊥</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="orientation">Orientation</h2>

<p>The full sequence comprehension for generating all possible orientations of a cube build upon all
combinations of <em>rot</em>, <em>twist</em> and <em>flip</em>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">def</span> <span class="n">orientations</span><span class="k">:</span> <span class="kt">Cube</span> <span class="o">=&gt;</span> <span class="nc">Seq</span><span class="o">[</span><span class="kt">Cube</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span> <span class="n">c</span><span class="k">:</span> <span class="kt">Cube</span> <span class="o">=&gt;</span>
</span><span class="line">  <span class="k">for</span> <span class="o">{</span>
</span><span class="line">    <span class="n">c1</span> <span class="k">&lt;-</span> <span class="nc">Seq</span><span class="o">(</span><span class="n">c</span><span class="o">,</span> <span class="n">rot</span><span class="o">(</span><span class="n">c</span><span class="o">),</span> <span class="n">rot</span><span class="o">(</span><span class="n">rot</span><span class="o">(</span><span class="n">c</span><span class="o">)),</span> <span class="n">rot</span><span class="o">(</span><span class="n">rot</span><span class="o">(</span><span class="n">rot</span><span class="o">(</span><span class="n">c</span><span class="o">))))</span>
</span><span class="line">    <span class="n">c2</span> <span class="k">&lt;-</span> <span class="nc">Seq</span><span class="o">(</span><span class="n">c1</span><span class="o">,</span> <span class="n">twist</span><span class="o">(</span><span class="n">c1</span><span class="o">),</span> <span class="n">twist</span><span class="o">(</span><span class="n">twist</span><span class="o">(</span><span class="n">c1</span><span class="o">)))</span>
</span><span class="line">    <span class="n">c3</span> <span class="k">&lt;-</span> <span class="nc">Seq</span><span class="o">(</span><span class="n">c2</span><span class="o">,</span> <span class="n">flip</span><span class="o">(</span><span class="n">c2</span><span class="o">))</span>
</span><span class="line">  <span class="o">}</span> <span class="k">yield</span> <span class="n">c3</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I will implement <code>Orientation</code> as an <em>Apply</em>able type function. It’s defined in terms of applications of
<code>Rotation</code>, <code>Twist</code> and <code>Flip</code>, invoked via various <code>MapAppend</code> functions:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">trait</span> <span class="nc">Orientations</span>
</span><span class="line">
</span><span class="line"><span class="k">implicit</span> <span class="k">def</span> <span class="n">orientations</span><span class="o">[</span><span class="kt">c</span>, <span class="kt">fs</span>, <span class="kt">ts</span>, <span class="kt">zs</span><span class="o">](</span><span class="k">implicit</span>
</span><span class="line">  <span class="n">ma</span><span class="k">:</span> <span class="kt">MapAppend</span><span class="o">[</span><span class="kt">Flip</span>, <span class="kt">c</span> <span class="kt">:::</span> <span class="kt">Nil</span>, <span class="kt">fs</span><span class="o">],</span>
</span><span class="line">  <span class="n">ma2</span><span class="k">:</span> <span class="kt">MapAppend2</span><span class="o">[</span><span class="kt">Twist</span>, <span class="kt">fs</span>, <span class="kt">ts</span><span class="o">],</span>
</span><span class="line">  <span class="n">ma3</span><span class="k">:</span> <span class="kt">MapAppend3</span><span class="o">[</span><span class="kt">Rotation</span>, <span class="kt">ts</span>, <span class="kt">zs</span><span class="o">]</span>
</span><span class="line"><span class="o">)</span><span class="k">:</span> <span class="kt">Apply</span><span class="o">[</span><span class="kt">Orientations</span>, <span class="kt">c</span>, <span class="kt">zs</span><span class="o">]</span> <span class="k">=</span> <span class="o">⊥</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>For any <code>Cube</code> this function generates the 24 possible orientations:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">:type</span> <span class="kt">ap</span><span class="o">(</span><span class="kt">⊥</span><span class="o">[</span><span class="kt">Orientations</span><span class="o">],</span> <span class="o">⊥[</span><span class="kt">Cube1</span><span class="o">])</span>
</span><span class="line"><span class="o">:::[</span><span class="kt">Cube</span><span class="o">[</span><span class="kt">B</span>,<span class="kt">G</span>,<span class="kt">W</span>,<span class="kt">G</span>,<span class="kt">B</span>,<span class="kt">R</span><span class="o">]</span>,<span class="kt">:::</span><span class="o">[</span><span class="kt">Cube</span><span class="o">[</span><span class="kt">R</span>,<span class="kt">B</span>,<span class="kt">G</span>,<span class="kt">W</span>,<span class="kt">G</span>,<span class="kt">B</span><span class="o">]</span>,
</span><span class="line"><span class="kt">:::</span><span class="o">[</span><span class="kt">Cube</span><span class="o">[</span><span class="kt">G</span>,<span class="kt">W</span>,<span class="kt">B</span>,<span class="kt">B</span>,<span class="kt">R</span>,<span class="kt">G</span><span class="o">]</span>,<span class="kt">:::</span><span class="o">[</span><span class="kt">Cube</span><span class="o">[</span><span class="kt">B</span>,<span class="kt">G</span>,<span class="kt">R</span>,<span class="kt">G</span>,<span class="kt">B</span>,<span class="kt">W</span><span class="o">]</span>,
</span><span class="line"><span class="kt">:::</span><span class="o">[</span><span class="kt">Cube</span><span class="o">[</span><span class="kt">W</span>,<span class="kt">B</span>,<span class="kt">G</span>,<span class="kt">R</span>,<span class="kt">G</span>,<span class="kt">B</span><span class="o">]</span>,<span class="kt">:::</span><span class="o">[</span><span class="kt">Cube</span><span class="o">[</span><span class="kt">G</span>,<span class="kt">R</span>,<span class="kt">B</span>,<span class="kt">B</span>,<span class="kt">W</span>,<span class="kt">G</span><span class="o">]</span>,
</span><span class="line"><span class="kt">:::</span><span class="o">[</span><span class="kt">Cube</span><span class="o">[</span><span class="kt">B</span>,<span class="kt">W</span>,<span class="kt">G</span>,<span class="kt">B</span>,<span class="kt">G</span>,<span class="kt">R</span><span class="o">]</span>,<span class="kt">:::</span><span class="o">[</span><span class="kt">Cube</span><span class="o">[</span><span class="kt">R</span>,<span class="kt">G</span>,<span class="kt">W</span>,<span class="kt">G</span>,<span class="kt">B</span>,<span class="kt">B</span><span class="o">]</span>,
</span><span class="line"><span class="kt">:::</span><span class="o">[</span><span class="kt">Cube</span><span class="o">[</span><span class="kt">G</span>,<span class="kt">B</span>,<span class="kt">B</span>,<span class="kt">R</span>,<span class="kt">W</span>,<span class="kt">G</span><span class="o">]</span>,<span class="kt">:::</span><span class="o">[</span><span class="kt">Cube</span><span class="o">[</span><span class="kt">B</span>,<span class="kt">R</span>,<span class="kt">G</span>,<span class="kt">B</span>,<span class="kt">G</span>,<span class="kt">W</span><span class="o">]</span>,
</span><span class="line"><span class="kt">:::</span><span class="o">[</span><span class="kt">Cube</span><span class="o">[</span><span class="kt">W</span>,<span class="kt">G</span>,<span class="kt">R</span>,<span class="kt">G</span>,<span class="kt">B</span>,<span class="kt">B</span><span class="o">]</span>,<span class="kt">:::</span><span class="o">[</span><span class="kt">Cube</span><span class="o">[</span><span class="kt">G</span>,<span class="kt">B</span>,<span class="kt">B</span>,<span class="kt">W</span>,<span class="kt">R</span>,<span class="kt">G</span><span class="o">]</span>,
</span><span class="line"><span class="kt">:::</span><span class="o">[</span><span class="kt">Cube</span><span class="o">[</span><span class="kt">B</span>,<span class="kt">G</span>,<span class="kt">B</span>,<span class="kt">G</span>,<span class="kt">W</span>,<span class="kt">R</span><span class="o">]</span>,<span class="kt">:::</span><span class="o">[</span><span class="kt">Cube</span><span class="o">[</span><span class="kt">R</span>,<span class="kt">W</span>,<span class="kt">G</span>,<span class="kt">B</span>,<span class="kt">G</span>,<span class="kt">B</span><span class="o">]</span>,
</span><span class="line"><span class="kt">:::</span><span class="o">[</span><span class="kt">Cube</span><span class="o">[</span><span class="kt">G</span>,<span class="kt">B</span>,<span class="kt">R</span>,<span class="kt">W</span>,<span class="kt">B</span>,<span class="kt">G</span><span class="o">]</span>,<span class="kt">:::</span><span class="o">[</span><span class="kt">Cube</span><span class="o">[</span><span class="kt">B</span>,<span class="kt">G</span>,<span class="kt">B</span>,<span class="kt">G</span>,<span class="kt">R</span>,<span class="kt">W</span><span class="o">]</span>,
</span><span class="line"><span class="kt">:::</span><span class="o">[</span><span class="kt">Cube</span><span class="o">[</span><span class="kt">W</span>,<span class="kt">R</span>,<span class="kt">G</span>,<span class="kt">B</span>,<span class="kt">G</span>,<span class="kt">B</span><span class="o">]</span>,<span class="kt">:::</span><span class="o">[</span><span class="kt">Cube</span><span class="o">[</span><span class="kt">G</span>,<span class="kt">B</span>,<span class="kt">W</span>,<span class="kt">R</span>,<span class="kt">B</span>,<span class="kt">G</span><span class="o">]</span>,
</span><span class="line"><span class="kt">:::</span><span class="o">[</span><span class="kt">Cube</span><span class="o">[</span><span class="kt">B</span>,<span class="kt">B</span>,<span class="kt">G</span>,<span class="kt">W</span>,<span class="kt">G</span>,<span class="kt">R</span><span class="o">]</span>,<span class="kt">:::</span><span class="o">[</span><span class="kt">Cube</span><span class="o">[</span><span class="kt">R</span>,<span class="kt">G</span>,<span class="kt">B</span>,<span class="kt">G</span>,<span class="kt">W</span>,<span class="kt">B</span><span class="o">]</span>,
</span><span class="line"><span class="kt">:::</span><span class="o">[</span><span class="kt">Cube</span><span class="o">[</span><span class="kt">G</span>,<span class="kt">R</span>,<span class="kt">W</span>,<span class="kt">B</span>,<span class="kt">B</span>,<span class="kt">G</span><span class="o">]</span>,<span class="kt">:::</span><span class="o">[</span><span class="kt">Cube</span><span class="o">[</span><span class="kt">B</span>,<span class="kt">B</span>,<span class="kt">G</span>,<span class="kt">R</span>,<span class="kt">G</span>,<span class="kt">W</span><span class="o">]</span>,
</span><span class="line"><span class="kt">:::</span><span class="o">[</span><span class="kt">Cube</span><span class="o">[</span><span class="kt">W</span>,<span class="kt">G</span>,<span class="kt">B</span>,<span class="kt">G</span>,<span class="kt">R</span>,<span class="kt">B</span><span class="o">]</span>,<span class="kt">:::</span><span class="o">[</span><span class="kt">Cube</span><span class="o">[</span><span class="kt">G</span>,<span class="kt">W</span>,<span class="kt">R</span>,<span class="kt">B</span>,<span class="kt">B</span>,<span class="kt">G</span><span class="o">]</span>,
</span><span class="line"><span class="kt">Nil</span><span class="o">]]]]]]]]]]]]]]]]]]]]]]]]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="stacking-cubes">Stacking Cubes</h2>

<p>Given two cubes <code>Cube[u1, f1, r1, b1, l1, d1]</code> and <code>Cube[u2, f2, r2, b2, l2, d2]</code>, I want to check that none of
the corresponding visible faces are the same color: the front sides <em>f1</em> and <em>f2</em> are not equal, and the right
sides <em>r1</em> and <em>r2</em> are not equal, and so on.</p>

<p>In order to do this, it’s required to define <em>not equal</em> relation for all four colors. Given two cubes I can apply
this relations to each pair of visible faces to get four boolean values. To check that all of these are <em>True</em>, I will
construct a list of those values and then write generic list function to check if all elements of a list are <em>True</em>.</p>

<h2 id="not-equal">Not Equal</h2>

<p>I’m instantiating <code>NE</code> instance for all color combinations.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">trait</span> <span class="nc">NE</span><span class="o">[</span><span class="kt">x</span>, <span class="kt">y</span>, <span class="kt">b</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="nc">implicit</span> <span class="k">object</span> <span class="nc">neRR</span> <span class="k">extends</span> <span class="nc">NE</span><span class="o">[</span><span class="kt">R</span>, <span class="kt">R</span>, <span class="kt">False</span><span class="o">]</span>
</span><span class="line"><span class="k">implicit</span> <span class="k">object</span> <span class="nc">neRG</span> <span class="k">extends</span> <span class="nc">NE</span><span class="o">[</span><span class="kt">R</span>, <span class="kt">G</span>, <span class="kt">True</span><span class="o">]</span>
</span><span class="line"><span class="k">implicit</span> <span class="k">object</span> <span class="nc">neRB</span> <span class="k">extends</span> <span class="nc">NE</span><span class="o">[</span><span class="kt">R</span>, <span class="kt">B</span>, <span class="kt">True</span><span class="o">]</span>
</span><span class="line"><span class="k">implicit</span> <span class="k">object</span> <span class="nc">neRW</span> <span class="k">extends</span> <span class="nc">NE</span><span class="o">[</span><span class="kt">R</span>, <span class="kt">W</span>, <span class="kt">True</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="k">implicit</span> <span class="k">object</span> <span class="nc">neGR</span> <span class="k">extends</span> <span class="nc">NE</span><span class="o">[</span><span class="kt">G</span>, <span class="kt">R</span>, <span class="kt">True</span><span class="o">]</span>
</span><span class="line"><span class="k">implicit</span> <span class="k">object</span> <span class="nc">neGG</span> <span class="k">extends</span> <span class="nc">NE</span><span class="o">[</span><span class="kt">G</span>, <span class="kt">G</span>, <span class="kt">False</span><span class="o">]</span>
</span><span class="line"><span class="k">implicit</span> <span class="k">object</span> <span class="nc">neGB</span> <span class="k">extends</span> <span class="nc">NE</span><span class="o">[</span><span class="kt">G</span>, <span class="kt">B</span>, <span class="kt">True</span><span class="o">]</span>
</span><span class="line"><span class="k">implicit</span> <span class="k">object</span> <span class="nc">neGW</span> <span class="k">extends</span> <span class="nc">NE</span><span class="o">[</span><span class="kt">G</span>, <span class="kt">W</span>, <span class="kt">True</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="k">implicit</span> <span class="k">object</span> <span class="nc">neBR</span> <span class="k">extends</span> <span class="nc">NE</span><span class="o">[</span><span class="kt">B</span>, <span class="kt">R</span>, <span class="kt">True</span><span class="o">]</span>
</span><span class="line"><span class="k">implicit</span> <span class="k">object</span> <span class="nc">neBG</span> <span class="k">extends</span> <span class="nc">NE</span><span class="o">[</span><span class="kt">B</span>, <span class="kt">G</span>, <span class="kt">True</span><span class="o">]</span>
</span><span class="line"><span class="k">implicit</span> <span class="k">object</span> <span class="nc">neBB</span> <span class="k">extends</span> <span class="nc">NE</span><span class="o">[</span><span class="kt">B</span>, <span class="kt">B</span>, <span class="kt">False</span><span class="o">]</span>
</span><span class="line"><span class="k">implicit</span> <span class="k">object</span> <span class="nc">neBW</span> <span class="k">extends</span> <span class="nc">NE</span><span class="o">[</span><span class="kt">B</span>, <span class="kt">W</span>, <span class="kt">True</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="k">implicit</span> <span class="k">object</span> <span class="nc">neWR</span> <span class="k">extends</span> <span class="nc">NE</span><span class="o">[</span><span class="kt">W</span>, <span class="kt">R</span>, <span class="kt">True</span><span class="o">]</span>
</span><span class="line"><span class="k">implicit</span> <span class="k">object</span> <span class="nc">neWG</span> <span class="k">extends</span> <span class="nc">NE</span><span class="o">[</span><span class="kt">W</span>, <span class="kt">G</span>, <span class="kt">True</span><span class="o">]</span>
</span><span class="line"><span class="k">implicit</span> <span class="k">object</span> <span class="nc">neWB</span> <span class="k">extends</span> <span class="nc">NE</span><span class="o">[</span><span class="kt">W</span>, <span class="kt">B</span>, <span class="kt">True</span><span class="o">]</span>
</span><span class="line"><span class="k">implicit</span> <span class="k">object</span> <span class="nc">neWW</span> <span class="k">extends</span> <span class="nc">NE</span><span class="o">[</span><span class="kt">W</span>, <span class="kt">W</span>, <span class="kt">False</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="all">All</h2>

<p>Now, I define a function <em>all</em> to check if all elements of a list are <em>True</em>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">trait</span> <span class="nc">All</span><span class="o">[</span><span class="kt">l</span>, <span class="kt">b</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="nc">implicit</span> <span class="k">def</span> <span class="n">allNil</span><span class="k">:</span> <span class="kt">All</span><span class="o">[</span><span class="kt">Nil</span>, <span class="kt">True</span><span class="o">]</span> <span class="k">=</span> <span class="o">⊥</span>
</span><span class="line"><span class="k">implicit</span> <span class="k">def</span> <span class="n">allFalse</span><span class="o">[</span><span class="kt">xs</span><span class="o">]</span><span class="k">:</span> <span class="kt">All</span><span class="o">[</span><span class="kt">False</span> <span class="kt">:::</span> <span class="kt">xs</span>, <span class="kt">False</span><span class="o">]</span> <span class="k">=</span> <span class="o">⊥</span>
</span><span class="line"><span class="k">implicit</span> <span class="k">def</span> <span class="n">allTrue</span><span class="o">[</span><span class="kt">b</span>, <span class="kt">xs</span><span class="o">](</span><span class="k">implicit</span> <span class="n">all</span><span class="k">:</span> <span class="kt">All</span><span class="o">[</span><span class="kt">xs</span>, <span class="kt">b</span><span class="o">])</span><span class="k">:</span> <span class="kt">All</span><span class="o">[</span><span class="kt">True</span> <span class="kt">:::</span> <span class="kt">xs</span>, <span class="kt">b</span><span class="o">]</span> <span class="k">=</span> <span class="o">⊥</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="n">all</span><span class="o">[</span><span class="kt">b</span>, <span class="kt">xs</span><span class="o">](</span><span class="n">l</span><span class="k">:</span> <span class="kt">xs</span><span class="o">)(</span><span class="k">implicit</span> <span class="n">all</span><span class="k">:</span> <span class="kt">All</span><span class="o">[</span><span class="kt">xs</span>, <span class="kt">b</span><span class="o">])</span><span class="k">:</span> <span class="kt">b</span> <span class="o">=</span> <span class="o">⊥</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">:type</span> <span class="kt">all</span><span class="o">(</span><span class="kt">⊥</span><span class="o">[</span><span class="kt">Nil</span><span class="o">])</span>
</span><span class="line"><span class="nc">True</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">:type</span> <span class="kt">all</span><span class="o">(</span><span class="kt">⊥</span><span class="o">[</span><span class="kt">False</span> <span class="kt">:::</span> <span class="kt">Nil</span><span class="o">])</span>
</span><span class="line"><span class="nc">False</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">:type</span> <span class="kt">all</span><span class="o">(</span><span class="kt">⊥</span><span class="o">[</span><span class="kt">True</span> <span class="kt">:::</span> <span class="kt">False</span> <span class="kt">:::</span> <span class="kt">Nil</span><span class="o">])</span>
</span><span class="line"><span class="nc">False</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">:type</span> <span class="kt">all</span><span class="o">(</span><span class="kt">⊥</span><span class="o">[</span><span class="kt">True</span> <span class="kt">:::</span> <span class="kt">True</span> <span class="kt">:::</span> <span class="kt">Nil</span><span class="o">])</span>
</span><span class="line"><span class="nc">True</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="compatible">Compatible</h2>

<p>Now I can write the compatibility check in the Scala Type System, that corresponds original <em>compatible</em> funcation:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="c1">// Compute which faces of a cube are visible when placed in a pile.</span>
</span><span class="line"><span class="k">def</span> <span class="n">visible</span><span class="k">:</span> <span class="kt">Cube</span> <span class="o">=&gt;</span> <span class="nc">Seq</span><span class="o">[</span><span class="kt">Char</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span> <span class="k">case</span> <span class="nc">Seq</span><span class="o">(</span><span class="n">u</span><span class="o">,</span> <span class="n">f</span><span class="o">,</span> <span class="n">r</span><span class="o">,</span> <span class="n">b</span><span class="o">,</span> <span class="n">l</span><span class="o">,</span> <span class="n">d</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">Seq</span><span class="o">(</span><span class="n">f</span><span class="o">,</span> <span class="n">r</span><span class="o">,</span> <span class="n">b</span><span class="o">,</span> <span class="n">l</span><span class="o">)</span> <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Two cubes are compatible if they have different colours on every</span>
</span><span class="line"><span class="c1">// visible face.</span>
</span><span class="line"><span class="k">def</span> <span class="n">compatible</span><span class="k">:</span> <span class="o">(</span><span class="kt">Cube</span><span class="o">,</span> <span class="kt">Cube</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">Boolean</span> <span class="k">=</span> <span class="o">{</span>
</span><span class="line">  <span class="k">case</span> <span class="o">(</span><span class="n">c1</span><span class="o">,</span> <span class="n">c2</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">visible</span><span class="o">(</span><span class="n">c1</span><span class="o">).</span><span class="n">zip</span><span class="o">(</span><span class="n">visible</span><span class="o">(</span><span class="n">c2</span><span class="o">)).</span><span class="n">forall</span> <span class="o">{</span> <span class="k">case</span> <span class="o">(</span><span class="n">v1</span><span class="o">,</span> <span class="n">v2</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">v1</span> <span class="o">!=</span> <span class="n">v2</span> <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I introduce a new <code>Compatible</code> class, it should check that no corresponding visible faces are the same color. It does
validation by evaluating <code>NE</code> relationship for each pair of corresponding visible faces. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">trait</span> <span class="nc">Compatible</span><span class="o">[</span><span class="kt">c1</span>, <span class="kt">c2</span>, <span class="kt">b</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="nc">implicit</span> <span class="k">def</span> <span class="n">compatibleInstance</span><span class="o">[</span><span class="kt">f1</span>, <span class="kt">f2</span>, <span class="kt">bF</span>, <span class="kt">r1</span>, <span class="kt">r2</span>, <span class="kt">bR</span>, <span class="kt">b1</span>, <span class="kt">b2</span>, <span class="kt">bB</span>, <span class="kt">l1</span>, <span class="kt">l2</span>, <span class="kt">bL</span>, <span class="kt">u1</span>, <span class="kt">u2</span>, <span class="kt">d1</span>, <span class="kt">d2</span>, <span class="kt">b</span><span class="o">](</span><span class="k">implicit</span>
</span><span class="line">  <span class="n">ne1</span><span class="k">:</span> <span class="kt">NE</span><span class="o">[</span><span class="kt">f1</span>, <span class="kt">f2</span>, <span class="kt">bF</span><span class="o">],</span>
</span><span class="line">  <span class="n">ne2</span><span class="k">:</span> <span class="kt">NE</span><span class="o">[</span><span class="kt">r1</span>, <span class="kt">r2</span>, <span class="kt">bR</span><span class="o">],</span>
</span><span class="line">  <span class="n">ne3</span><span class="k">:</span> <span class="kt">NE</span><span class="o">[</span><span class="kt">b1</span>, <span class="kt">b2</span>, <span class="kt">bB</span><span class="o">],</span>
</span><span class="line">  <span class="n">ne4</span><span class="k">:</span> <span class="kt">NE</span><span class="o">[</span><span class="kt">l1</span>, <span class="kt">l2</span>, <span class="kt">bL</span><span class="o">],</span>
</span><span class="line">  <span class="n">all</span><span class="k">:</span> <span class="kt">All</span><span class="o">[</span><span class="kt">bF</span> <span class="kt">:::</span> <span class="kt">bR</span> <span class="kt">:::</span> <span class="kt">bB</span> <span class="kt">:::</span> <span class="kt">bL</span> <span class="kt">:::</span> <span class="kt">Nil</span>, <span class="kt">b</span><span class="o">]</span>
</span><span class="line"><span class="o">)</span><span class="k">:</span> <span class="kt">Compatible</span><span class="o">[</span><span class="kt">Cube</span><span class="o">[</span><span class="kt">u1</span>, <span class="kt">f1</span>, <span class="kt">r1</span>, <span class="kt">b1</span>, <span class="kt">l1</span>, <span class="kt">d1</span><span class="o">]</span>, <span class="kt">Cube</span><span class="o">[</span><span class="kt">u2</span>, <span class="kt">f2</span>, <span class="kt">r2</span>, <span class="kt">b2</span>, <span class="kt">l2</span>, <span class="kt">d2</span><span class="o">]</span>, <span class="kt">b</span><span class="o">]</span> <span class="k">=</span> <span class="o">⊥</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="n">compatible</span><span class="o">[</span><span class="kt">c1</span>, <span class="kt">c2</span>, <span class="kt">b</span><span class="o">](</span><span class="n">c1</span><span class="k">:</span> <span class="kt">c1</span><span class="o">,</span> <span class="n">c2</span><span class="k">:</span> <span class="kt">c2</span><span class="o">)(</span><span class="k">implicit</span>
</span><span class="line">  <span class="n">c</span><span class="k">:</span> <span class="kt">Compatible</span><span class="o">[</span><span class="kt">c1</span>, <span class="kt">c2</span>, <span class="kt">b</span><span class="o">]</span>
</span><span class="line"><span class="o">)</span><span class="k">:</span> <span class="kt">b</span> <span class="o">=</span> <span class="o">⊥</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">:type</span> <span class="kt">compatible</span><span class="o">(</span><span class="kt">⊥</span><span class="o">[</span><span class="kt">Cube</span><span class="o">[</span><span class="kt">R</span>, <span class="kt">R</span>, <span class="kt">R</span>, <span class="kt">R</span>, <span class="kt">R</span>, <span class="kt">R</span><span class="o">]],</span> <span class="o">⊥[</span><span class="kt">Cube</span><span class="o">[</span><span class="kt">B</span>, <span class="kt">B</span>, <span class="kt">B</span>, <span class="kt">B</span>, <span class="kt">B</span>, <span class="kt">B</span><span class="o">]])</span>
</span><span class="line"><span class="nc">True</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">:type</span> <span class="kt">compatible</span><span class="o">(</span><span class="kt">⊥</span><span class="o">[</span><span class="kt">Cube</span><span class="o">[</span><span class="kt">R</span>, <span class="kt">R</span>, <span class="kt">G</span>, <span class="kt">R</span>, <span class="kt">R</span>, <span class="kt">R</span><span class="o">]],</span> <span class="o">⊥[</span><span class="kt">Cube</span><span class="o">[</span><span class="kt">B</span>, <span class="kt">B</span>, <span class="kt">G</span>, <span class="kt">B</span>, <span class="kt">B</span>, <span class="kt">B</span><span class="o">]])</span>
</span><span class="line"><span class="nc">False</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="allowed">Allowed</h2>

<p>The above <code>Compatible</code> class checks a cube for compatibility with another single cube. In the puzzle,
a cube needs to be compatible with all the other cubes in the pile.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="c1">// Determine whether a cube can be added to pile of cubes, without</span>
</span><span class="line"><span class="c1">// invalidating the solution.</span>
</span><span class="line"><span class="k">def</span> <span class="n">allowed</span><span class="k">:</span> <span class="o">(</span><span class="kt">Cube</span><span class="o">,</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">Cube</span><span class="o">])</span> <span class="k">=&gt;</span> <span class="nc">Boolean</span> <span class="k">=</span> <span class="o">{</span>
</span><span class="line">  <span class="k">case</span> <span class="o">(</span><span class="n">c</span><span class="o">,</span> <span class="n">cs</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">cs</span><span class="o">.</span><span class="n">forall</span><span class="o">(</span><span class="n">compatible</span><span class="o">(</span><span class="k">_</span><span class="o">,</span> <span class="n">c</span><span class="o">))</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>Allowed</code> class generalize <code>Compatible</code> over list.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">trait</span> <span class="nc">Allowed</span><span class="o">[</span><span class="kt">c</span>, <span class="kt">cs</span>, <span class="kt">b</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="nc">implicit</span> <span class="k">def</span> <span class="n">allowedNil</span><span class="o">[</span><span class="kt">c</span><span class="o">]</span><span class="k">:</span> <span class="kt">Allowed</span><span class="o">[</span><span class="kt">c</span>, <span class="kt">Nil</span>, <span class="kt">True</span><span class="o">]</span> <span class="k">=</span> <span class="o">⊥</span>
</span><span class="line"><span class="k">implicit</span> <span class="k">def</span> <span class="n">allowedCons</span><span class="o">[</span><span class="kt">c</span>, <span class="kt">y</span>, <span class="kt">b1</span>, <span class="kt">ys</span>, <span class="kt">b2</span>, <span class="kt">b</span><span class="o">](</span><span class="k">implicit</span>
</span><span class="line">  <span class="n">c</span><span class="k">:</span> <span class="kt">Compatible</span><span class="o">[</span><span class="kt">c</span>, <span class="kt">y</span>, <span class="kt">b1</span><span class="o">],</span>
</span><span class="line">  <span class="n">allowed</span><span class="k">:</span> <span class="kt">Allowed</span><span class="o">[</span><span class="kt">c</span>, <span class="kt">ys</span>, <span class="kt">b2</span><span class="o">],</span>
</span><span class="line">  <span class="n">and</span><span class="k">:</span> <span class="kt">And</span><span class="o">[</span><span class="kt">b1</span>, <span class="kt">b2</span>, <span class="kt">b</span><span class="o">]</span>
</span><span class="line"><span class="o">)</span><span class="k">:</span> <span class="kt">Allowed</span><span class="o">[</span><span class="kt">c</span>, <span class="kt">y</span> <span class="kt">:::</span> <span class="kt">ys</span>, <span class="kt">b</span><span class="o">]</span> <span class="k">=</span> <span class="o">⊥</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="n">allowed</span><span class="o">[</span><span class="kt">c</span>, <span class="kt">cs</span>, <span class="kt">b</span><span class="o">](</span><span class="n">c</span><span class="k">:</span> <span class="kt">c</span><span class="o">,</span> <span class="n">cs</span><span class="k">:</span> <span class="kt">cs</span><span class="o">)(</span><span class="k">implicit</span> <span class="n">a</span><span class="k">:</span> <span class="kt">Allowed</span><span class="o">[</span><span class="kt">c</span>, <span class="kt">cs</span>, <span class="kt">b</span><span class="o">])</span><span class="k">:</span> <span class="kt">b</span> <span class="o">=</span> <span class="o">⊥</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">:type</span> <span class="kt">allowed</span><span class="o">(</span><span class="kt">⊥</span><span class="o">[</span><span class="kt">CubeRed</span><span class="o">],</span> <span class="o">⊥[</span><span class="kt">CubeBlue</span> <span class="kt">:::</span> <span class="kt">CubeRed</span> <span class="kt">:::</span> <span class="kt">Nil</span><span class="o">])</span>
</span><span class="line"><span class="nc">False</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="solution">Solution</h2>

<p>Now I’m ready to implement <em>solutions</em>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="c1">// Return a list of all ways of orienting each cube such that no side of</span>
</span><span class="line"><span class="c1">// the pile has two faces the same.</span>
</span><span class="line"><span class="k">def</span> <span class="n">solutions</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">Cube</span><span class="o">]</span> <span class="k">=&gt;</span> <span class="nc">Seq</span><span class="o">[</span><span class="kt">Seq</span><span class="o">[</span><span class="kt">Cube</span><span class="o">]]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class="line">  <span class="k">case</span> <span class="nc">Nil</span> <span class="k">=&gt;</span> <span class="nc">Seq</span><span class="o">(</span><span class="nc">Nil</span><span class="o">)</span>
</span><span class="line">  <span class="k">case</span> <span class="n">c</span> <span class="o">::</span> <span class="n">cs</span> <span class="k">=&gt;</span> <span class="k">for</span> <span class="o">{</span>
</span><span class="line">    <span class="nc">_cs</span> <span class="k">&lt;-</span> <span class="n">solutions</span><span class="o">(</span><span class="n">cs</span><span class="o">)</span>
</span><span class="line">    <span class="nc">_c</span> <span class="k">&lt;-</span> <span class="n">orientations</span><span class="o">(</span><span class="n">c</span><span class="o">)</span>
</span><span class="line">    <span class="k">if</span> <span class="n">allowed</span><span class="o">(</span><span class="nc">_c</span><span class="o">,</span> <span class="nc">_cs</span><span class="o">)</span>
</span><span class="line">  <span class="o">}</span> <span class="k">yield</span> <span class="nc">_c</span> <span class="o">+:</span> <span class="nc">_cs</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I will create a corresponding class <code>Sultions</code>, which takes a list of <code>Cube</code> as input, and returs a list of
possible solutions, where each solution is a list of <code>Cube</code> in allowed orientations.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">class</span> <span class="nc">Solutions</span><span class="o">[</span><span class="kt">cs</span>, <span class="kt">ss</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="nc">implicit</span> <span class="k">def</span> <span class="n">solutionsNil</span><span class="k">:</span> <span class="kt">Solutions</span><span class="o">[</span><span class="kt">Nil</span>, <span class="kt">Nil</span> <span class="kt">:::</span> <span class="kt">Nil</span><span class="o">]</span> <span class="k">=</span> <span class="o">⊥</span>
</span><span class="line"><span class="k">implicit</span> <span class="k">def</span> <span class="n">solutionsCons</span><span class="o">[</span><span class="kt">cs</span>, <span class="kt">sols</span>, <span class="kt">c</span>, <span class="kt">os</span>, <span class="kt">zs</span><span class="o">](</span><span class="k">implicit</span>
</span><span class="line">  <span class="n">s</span><span class="k">:</span> <span class="kt">Solutions</span><span class="o">[</span><span class="kt">cs</span>, <span class="kt">sols</span><span class="o">],</span>
</span><span class="line">  <span class="n">ap</span><span class="k">:</span> <span class="kt">Apply</span><span class="o">[</span><span class="kt">Orientations</span>, <span class="kt">c</span>, <span class="kt">os</span><span class="o">],</span>
</span><span class="line">  <span class="n">ac</span><span class="k">:</span> <span class="kt">AllowedCombinations</span><span class="o">[</span><span class="kt">os</span>, <span class="kt">sols</span>, <span class="kt">zs</span><span class="o">]</span>
</span><span class="line"><span class="o">)</span><span class="k">:</span> <span class="kt">Solutions</span><span class="o">[</span><span class="kt">c</span> <span class="kt">:::</span> <span class="kt">cs</span>, <span class="kt">zs</span><span class="o">]</span> <span class="k">=</span> <span class="o">⊥</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>AllowedCombinations</code> class recurses across the solutions so far, checking each against the given orientation.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">trait</span> <span class="nc">AllowedCombinations</span><span class="o">[</span><span class="kt">os</span>, <span class="kt">sols</span>, <span class="kt">zs</span><span class="o">]</span>
</span><span class="line"><span class="nc">implicit</span> <span class="k">def</span> <span class="n">allowedCombinationsNil</span><span class="o">[</span><span class="kt">os</span><span class="o">]</span><span class="k">:</span> <span class="kt">AllowedCombinations</span><span class="o">[</span><span class="kt">os</span>, <span class="kt">Nil</span>, <span class="kt">Nil</span><span class="o">]</span> <span class="k">=</span> <span class="o">⊥</span>
</span><span class="line"><span class="k">implicit</span> <span class="k">def</span> <span class="n">allowedCombinationsCons</span><span class="o">[</span><span class="kt">os</span>, <span class="kt">sols</span>, <span class="kt">as</span>, <span class="kt">s</span>, <span class="kt">bs</span>, <span class="kt">zs</span><span class="o">](</span><span class="k">implicit</span>
</span><span class="line">  <span class="n">ac</span><span class="k">:</span> <span class="kt">AllowedCombinations</span><span class="o">[</span><span class="kt">os</span>, <span class="kt">sols</span>, <span class="kt">as</span><span class="o">],</span>
</span><span class="line">  <span class="n">mo</span><span class="k">:</span> <span class="kt">MatchingOrientations</span><span class="o">[</span><span class="kt">os</span>, <span class="kt">s</span>, <span class="kt">bs</span><span class="o">],</span>
</span><span class="line">  <span class="n">lc</span><span class="k">:</span> <span class="kt">ListConcat</span><span class="o">[</span><span class="kt">as</span>, <span class="kt">bs</span>, <span class="kt">zs</span><span class="o">]</span>
</span><span class="line"><span class="o">)</span><span class="k">:</span> <span class="kt">AllowedCombinations</span><span class="o">[</span><span class="kt">os</span>, <span class="kt">s</span> <span class="kt">:::</span> <span class="kt">sols</span>, <span class="kt">zs</span><span class="o">]</span> <span class="k">=</span> <span class="o">⊥</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Finally <code>MatchingOrientations</code> class recurses across the orientations of the new cube,
checking each against a particular solution <em>sol</em>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">trait</span> <span class="nc">MatchingOrientations</span><span class="o">[</span><span class="kt">os</span>, <span class="kt">sols</span>, <span class="kt">zs</span><span class="o">]</span>
</span><span class="line"><span class="nc">implicit</span> <span class="k">def</span> <span class="n">matchingOrientationsNil</span><span class="o">[</span><span class="kt">sol</span><span class="o">]</span><span class="k">:</span> <span class="kt">MatchingOrientations</span><span class="o">[</span><span class="kt">Nil</span>, <span class="kt">sol</span>, <span class="kt">Nil</span><span class="o">]</span> <span class="k">=</span> <span class="o">⊥</span>
</span><span class="line"><span class="k">implicit</span> <span class="k">def</span> <span class="n">matchingOrientationsCons</span><span class="o">[</span><span class="kt">os</span>, <span class="kt">sol</span>, <span class="kt">as</span>, <span class="kt">o</span>, <span class="kt">b</span>, <span class="kt">zs</span><span class="o">](</span><span class="k">implicit</span>
</span><span class="line">  <span class="n">mo</span><span class="k">:</span> <span class="kt">MatchingOrientations</span><span class="o">[</span><span class="kt">os</span>, <span class="kt">sol</span>, <span class="kt">as</span><span class="o">],</span>
</span><span class="line">  <span class="n">a</span><span class="k">:</span> <span class="kt">Allowed</span><span class="o">[</span><span class="kt">o</span>, <span class="kt">sol</span>, <span class="kt">b</span><span class="o">],</span>
</span><span class="line">  <span class="n">apn</span><span class="k">:</span> <span class="kt">AppendIf</span><span class="o">[</span><span class="kt">b</span>, <span class="kt">o</span> <span class="kt">:::</span> <span class="kt">sol</span>, <span class="kt">as</span>, <span class="kt">zs</span><span class="o">]</span>
</span><span class="line"><span class="o">)</span><span class="k">:</span> <span class="kt">MatchingOrientations</span><span class="o">[</span><span class="kt">o</span> <span class="kt">:::</span> <span class="kt">os</span>, <span class="kt">sol</span>, <span class="kt">zs</span><span class="o">]</span> <span class="k">=</span> <span class="o">⊥</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If orientation is allowed, then the combination <em>o</em> is added to the existing solution <em>sol</em>, by forming the type <em>o ::: sol</em>.</p>

<p>Finally I can solve the puzzle for given cubes:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">type</span> <span class="kt">Cubes</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Cube1</span> <span class="o">:::</span> <span class="nc">Cube2</span> <span class="o">:::</span> <span class="nc">Cube3</span> <span class="o">:::</span> <span class="nc">Cube4</span> <span class="o">:::</span> <span class="nc">Nil</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="n">solutions</span><span class="o">[</span><span class="kt">cs</span>, <span class="kt">ss</span><span class="o">](</span><span class="n">cs</span><span class="k">:</span> <span class="kt">cs</span><span class="o">)(</span><span class="k">implicit</span> <span class="n">sol</span><span class="k">:</span> <span class="kt">Solutions</span><span class="o">[</span><span class="kt">cs</span>, <span class="kt">ss</span><span class="o">])</span><span class="k">:</span> <span class="kt">ss</span> <span class="o">=</span> <span class="o">⊥</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Unfortunately I still was not able to compute solution for four cubes, it’s still running (almost 24 hours).
I will update this post when it’s done. But without loss of generality I can compute all possible ways to
arrange a list with one single cube.</p>

<p>Computing solution for two cubes takes reasonable 10 minutes, but it generates so many possible arrangements,
and final type name is so long, that it breaks JVM class file size limitation.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">:type</span> <span class="kt">solutions</span><span class="o">(</span><span class="kt">⊥</span><span class="o">[</span><span class="kt">Cubes</span><span class="o">])</span>
</span><span class="line"><span class="c1">// It&#39;s already running for 24 hours</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">:type</span> <span class="kt">solutions</span><span class="o">(</span><span class="kt">⊥</span><span class="o">[</span><span class="kt">Cube1</span> <span class="kt">:::</span> <span class="kt">Nil</span><span class="o">])</span>
</span><span class="line">
</span><span class="line">    <span class="o">(</span><span class="nc">Cube</span><span class="o">[</span><span class="kt">B</span>,<span class="kt">G</span>,<span class="kt">W</span>,<span class="kt">G</span>,<span class="kt">B</span>,<span class="kt">R</span><span class="o">]</span> <span class="o">:::</span> <span class="nc">Nil</span><span class="o">)</span>
</span><span class="line"><span class="o">:::</span> <span class="o">(</span><span class="nc">Cube</span><span class="o">[</span><span class="kt">R</span>,<span class="kt">B</span>,<span class="kt">G</span>,<span class="kt">W</span>,<span class="kt">G</span>,<span class="kt">B</span><span class="o">]</span> <span class="o">:::</span> <span class="nc">Nil</span><span class="o">)</span>
</span><span class="line"><span class="o">:::</span> <span class="o">(</span><span class="nc">Cube</span><span class="o">[</span><span class="kt">G</span>,<span class="kt">W</span>,<span class="kt">B</span>,<span class="kt">B</span>,<span class="kt">R</span>,<span class="kt">G</span><span class="o">]</span> <span class="o">:::</span> <span class="nc">Nil</span><span class="o">)</span>
</span><span class="line"><span class="o">:::</span> <span class="o">(</span><span class="nc">Cube</span><span class="o">[</span><span class="kt">B</span>,<span class="kt">G</span>,<span class="kt">R</span>,<span class="kt">G</span>,<span class="kt">B</span>,<span class="kt">W</span><span class="o">]</span> <span class="o">:::</span> <span class="nc">Nil</span><span class="o">)</span>
</span><span class="line"><span class="o">:::</span> <span class="o">(</span><span class="nc">Cube</span><span class="o">[</span><span class="kt">W</span>,<span class="kt">B</span>,<span class="kt">G</span>,<span class="kt">R</span>,<span class="kt">G</span>,<span class="kt">B</span><span class="o">]</span> <span class="o">:::</span> <span class="nc">Nil</span><span class="o">)</span>
</span><span class="line"><span class="o">:::</span> <span class="o">(</span><span class="nc">Cube</span><span class="o">[</span><span class="kt">G</span>,<span class="kt">R</span>,<span class="kt">B</span>,<span class="kt">B</span>,<span class="kt">W</span>,<span class="kt">G</span><span class="o">]</span> <span class="o">:::</span> <span class="nc">Nil</span><span class="o">)</span>
</span><span class="line"><span class="o">:::</span> <span class="o">(</span><span class="nc">Cube</span><span class="o">[</span><span class="kt">B</span>,<span class="kt">W</span>,<span class="kt">G</span>,<span class="kt">B</span>,<span class="kt">G</span>,<span class="kt">R</span><span class="o">]</span> <span class="o">:::</span> <span class="nc">Nil</span><span class="o">)</span>
</span><span class="line"><span class="o">:::</span> <span class="o">(</span><span class="nc">Cube</span><span class="o">[</span><span class="kt">R</span>,<span class="kt">G</span>,<span class="kt">W</span>,<span class="kt">G</span>,<span class="kt">B</span>,<span class="kt">B</span><span class="o">]</span> <span class="o">:::</span> <span class="nc">Nil</span><span class="o">)</span>
</span><span class="line"><span class="o">:::</span> <span class="o">(</span><span class="nc">Cube</span><span class="o">[</span><span class="kt">G</span>,<span class="kt">B</span>,<span class="kt">B</span>,<span class="kt">R</span>,<span class="kt">W</span>,<span class="kt">G</span><span class="o">]</span> <span class="o">:::</span> <span class="nc">Nil</span><span class="o">)</span>
</span><span class="line"><span class="o">:::</span> <span class="o">(</span><span class="nc">Cube</span><span class="o">[</span><span class="kt">B</span>,<span class="kt">R</span>,<span class="kt">G</span>,<span class="kt">B</span>,<span class="kt">G</span>,<span class="kt">W</span><span class="o">]</span> <span class="o">:::</span> <span class="nc">Nil</span><span class="o">)</span>
</span><span class="line"><span class="o">:::</span> <span class="o">(</span><span class="nc">Cube</span><span class="o">[</span><span class="kt">W</span>,<span class="kt">G</span>,<span class="kt">R</span>,<span class="kt">G</span>,<span class="kt">B</span>,<span class="kt">B</span><span class="o">]</span> <span class="o">:::</span> <span class="nc">Nil</span><span class="o">)</span>
</span><span class="line"><span class="o">:::</span> <span class="o">(</span><span class="nc">Cube</span><span class="o">[</span><span class="kt">G</span>,<span class="kt">B</span>,<span class="kt">B</span>,<span class="kt">W</span>,<span class="kt">R</span>,<span class="kt">G</span><span class="o">]</span> <span class="o">:::</span> <span class="nc">Nil</span><span class="o">)</span>
</span><span class="line"><span class="o">:::</span> <span class="o">(</span><span class="nc">Cube</span><span class="o">[</span><span class="kt">B</span>,<span class="kt">G</span>,<span class="kt">B</span>,<span class="kt">G</span>,<span class="kt">W</span>,<span class="kt">R</span><span class="o">]</span> <span class="o">:::</span> <span class="nc">Nil</span><span class="o">)</span>
</span><span class="line"><span class="o">:::</span> <span class="o">(</span><span class="nc">Cube</span><span class="o">[</span><span class="kt">R</span>,<span class="kt">W</span>,<span class="kt">G</span>,<span class="kt">B</span>,<span class="kt">G</span>,<span class="kt">B</span><span class="o">]</span> <span class="o">:::</span> <span class="nc">Nil</span><span class="o">)</span>
</span><span class="line"><span class="o">:::</span> <span class="o">(</span><span class="nc">Cube</span><span class="o">[</span><span class="kt">G</span>,<span class="kt">B</span>,<span class="kt">R</span>,<span class="kt">W</span>,<span class="kt">B</span>,<span class="kt">G</span><span class="o">]</span> <span class="o">:::</span> <span class="nc">Nil</span><span class="o">)</span>
</span><span class="line"><span class="o">:::</span> <span class="o">(</span><span class="nc">Cube</span><span class="o">[</span><span class="kt">B</span>,<span class="kt">G</span>,<span class="kt">B</span>,<span class="kt">G</span>,<span class="kt">R</span>,<span class="kt">W</span><span class="o">]</span> <span class="o">:::</span> <span class="nc">Nil</span><span class="o">)</span>
</span><span class="line"><span class="o">:::</span> <span class="o">(</span><span class="nc">Cube</span><span class="o">[</span><span class="kt">W</span>,<span class="kt">R</span>,<span class="kt">G</span>,<span class="kt">B</span>,<span class="kt">G</span>,<span class="kt">B</span><span class="o">]</span> <span class="o">:::</span> <span class="nc">Nil</span><span class="o">)</span>
</span><span class="line"><span class="o">:::</span> <span class="o">(</span><span class="nc">Cube</span><span class="o">[</span><span class="kt">G</span>,<span class="kt">B</span>,<span class="kt">W</span>,<span class="kt">R</span>,<span class="kt">B</span>,<span class="kt">G</span><span class="o">]</span> <span class="o">:::</span> <span class="nc">Nil</span><span class="o">)</span>
</span><span class="line"><span class="o">:::</span> <span class="o">(</span><span class="nc">Cube</span><span class="o">[</span><span class="kt">B</span>,<span class="kt">B</span>,<span class="kt">G</span>,<span class="kt">W</span>,<span class="kt">G</span>,<span class="kt">R</span><span class="o">]</span> <span class="o">:::</span> <span class="nc">Nil</span><span class="o">)</span>
</span><span class="line"><span class="o">:::</span> <span class="o">(</span><span class="nc">Cube</span><span class="o">[</span><span class="kt">R</span>,<span class="kt">G</span>,<span class="kt">B</span>,<span class="kt">G</span>,<span class="kt">W</span>,<span class="kt">B</span><span class="o">]</span> <span class="o">:::</span> <span class="nc">Nil</span><span class="o">)</span>
</span><span class="line"><span class="o">:::</span> <span class="o">(</span><span class="nc">Cube</span><span class="o">[</span><span class="kt">G</span>,<span class="kt">R</span>,<span class="kt">W</span>,<span class="kt">B</span>,<span class="kt">B</span>,<span class="kt">G</span><span class="o">]</span> <span class="o">:::</span> <span class="nc">Nil</span><span class="o">)</span>
</span><span class="line"><span class="o">:::</span> <span class="o">(</span><span class="nc">Cube</span><span class="o">[</span><span class="kt">B</span>,<span class="kt">B</span>,<span class="kt">G</span>,<span class="kt">R</span>,<span class="kt">G</span>,<span class="kt">W</span><span class="o">]</span> <span class="o">:::</span> <span class="nc">Nil</span><span class="o">)</span>
</span><span class="line"><span class="o">:::</span> <span class="o">(</span><span class="nc">Cube</span><span class="o">[</span><span class="kt">W</span>,<span class="kt">G</span>,<span class="kt">B</span>,<span class="kt">G</span>,<span class="kt">R</span>,<span class="kt">B</span><span class="o">]</span> <span class="o">:::</span> <span class="nc">Nil</span><span class="o">)</span>
</span><span class="line"><span class="o">:::</span> <span class="o">(</span><span class="nc">Cube</span><span class="o">[</span><span class="kt">G</span>,<span class="kt">W</span>,<span class="kt">R</span>,<span class="kt">B</span>,<span class="kt">B</span>,<span class="kt">G</span><span class="o">]</span> <span class="o">:::</span> <span class="nc">Nil</span><span class="o">)</span>
</span><span class="line"><span class="o">:::</span> <span class="nc">Nil</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>For comparison, here is the solution generated by the pure Scala version:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
[GBWRBG, WGBWRR, RWRBGR, BRGGWW]
[GBRWBG, RRWBGW, RGBRWR, WWGGRB]
[GWRBBG, WBWRGR, RRBGWR, BGGWRW]
[GBBRWG, RGRWBW, RWGBRR, WRWGGB]
[GRBBWG, WWRGBR, RBGWRR, BGWRGW]
[GWBBRG, RBGRWW, RRWGBR, WGRWGB]
[GBBWRG, WRGBWR, RGWRBR, BWRGGW]
[GRWBBG, RWBGRW, RBRWGR, WGGRWB]
</pre></div>
</div>
 </figure></notextile></div>

<h1 id="conclusion">Conclusion</h1>

<p>We’ve seen how to use Scala Type System as a programming language to solve a given problem, and apparently
it’s as powerful as Haskell Type System.</p>

<p>Solving this kind of puzzles using type system is not very practical, it took me more then 24 hours to get
a solution, but it shows how expressing type system can be.</p>

<blockquote>
  <p>Full code for Type-Level Instant Insanity is on <a href="https://gist.github.com/ezhulenev/d741fa7c47d532ec9d1a1bf9aa12fbbc" target="_blank">Github</a></p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Optimizing Spark Machine Learning for Small Data]]></title>
    <link href="http://eugenezhulenev.com/blog/2015/09/16/spark-ml-for-big-and-small-data/"/>
    <updated>2015-09-16T07:04:25-07:00</updated>
    <id>http://eugenezhulenev.com/blog/2015/09/16/spark-ml-for-big-and-small-data</id>
    <content type="html"><![CDATA[<blockquote>
  <p><strong>Update 2015-10-08</strong>: Optimization “hack” described in this post still works, however we don’t use it in production anymore. 
With careful parallelism config, overhead introduced by distributed models is negligible.</p>
</blockquote>

<p>You’ve all probably already know how awesome is Spark for doing Machine Learning on Big Data. However I’m pretty sure
no one told you how bad (slow) it can be on Small Data. </p>

<p>As I mentioned in my <a href="http://eugenezhulenev.com/blog/2015/09/09/audience-modeling-with-spark-ml-pipelines">previous post</a>, we
extensively use Spark for doing machine learning and audience modeling. It turned out that in some cases, for example when
we are starting optimization for new client/campaign we simply don’t have enough positive examples to construct big enough dataset, so that
using Spark would make sense.</p>

<!-- more -->

<h3 id="spark-ml-from-10000-feet">Spark ML from 10000 feet</h3>

<p>Essentially every machine learning algorithm is a function minimization, where function value depends on some calculation using data in <code>RDD</code>.
For example logistic regression can calculate function value 1000 times before it will converge and find optimal parameters. It means that it will 
compute some <code>RDD</code> 1000 times. In case of <code>LogisticRegression</code> it’s doing <code>RDD.treeAggregate</code> which is supper efficient, but still it’s distributed 
computation.</p>

<p>Now imagine that all the data you have is 50000 rows, and you have for example 1000 partitions. It means that each partition has only 50 rows. And 
each <code>RDD.treeAggregate</code> on every iteration serializing closures, sending them to partitions and collecting result back. 
It’s <strong>HUGE OVERHEAD</strong> and huge load on a driver.</p>

<h3 id="throw-away-spark-and-use-pythonr">Throw Away Spark and use Python/R?</h3>

<p>It’s definitely an option, but we don’t want to build multiple systems for data of different size. Spark ML pipelines are awesome abstraction,
and we want to use it for all machine learning jobs. Also we want to use the same algorithm, so results would be consistent if dataset size
just crossed the boundary between small and big data.</p>

<h3 id="run-logisticregression-in-local-mode">Run LogisticRegression in ‘Local Mode’</h3>

<p>What if Spark could run the same machine learning algorithm, but instead of using <code>RDD</code> for storing input data, it would use <code>Arrays</code>?
It solves all the problems, you get consistent model, computed 10-20x faster because it doesn’t need distributed computations.</p>

<p>That’s exactly approach I used in <a href="https://github.com/collectivemedia/spark-ext">Spark Ext</a>, it’s called <a href="https://github.com/collectivemedia/spark-ext/blob/b61d73bbf6ce38c6b9fe37764934f37b640081fb/sparkext-mllib/src/main/scala/org/apache/spark/ml/classification/LocalLogisticRegression.scala">LocalLogisticRegression</a>.
It’s mostly copy-pasta from Spark <code>LogisticRegression</code>, but when input data frame has only single partition, it’s running
function optimization on one of the executors using <code>mapPartition</code> function, essentially using Spark as distributed executor service.</p>

<p>This approach is much better than collecting data to driver, because you are not limited by driver computational resources.</p>

<p>When <code>DataFrame</code> has more than 1 partition it just falls back to default distributed logistic regression.</p>

<p>Code for new <code>train</code> method looks like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">def</span> <span class="function">trainLocal</span>(
      <span class="key">instances</span>: <span class="predefined-type">Array</span>[(<span class="predefined-type">Double</span>, <span class="predefined-type">Vector</span>)]
    ): (LogisticRegressionModel, <span class="predefined-type">Array</span>[<span class="predefined-type">Double</span>]) = ...

def train(<span class="key">dataset</span>: DataFrame): LogisticRegressionModel = {

  <span class="keyword">if</span> (dataset.rdd.partitions.length == <span class="integer">1</span>) {
    log.info(s<span class="string"><span class="delimiter">&quot;</span><span class="content">Build LogisticRegression in local mode</span><span class="delimiter">&quot;</span></span>)

    val (model, objectiveHistory) = extractLabeledPoints(dataset).map {
      <span class="keyword">case</span> LabeledPoint(<span class="key">label</span>: <span class="predefined-type">Double</span>, <span class="key">features</span>: <span class="predefined-type">Vector</span>) =&gt; (label, features)
    }.mapPartitions { instances =&gt;
      Seq(trainLocal(instances.toArray)).toIterator
    }.first()

    val logRegSummary = <span class="keyword">new</span> BinaryLogisticRegressionTrainingSummary(
      model.transform(dataset),
      probabilityCol,
      labelCol,
      objectiveHistory)
    model.setSummary(logRegSummary)

  } <span class="keyword">else</span> {
    log.info(s<span class="string"><span class="delimiter">&quot;</span><span class="content">Fallback to distributed LogisticRegression</span><span class="delimiter">&quot;</span></span>)

    val that = classOf[LogisticRegression].getConstructor(classOf[<span class="predefined-type">String</span>]).newInstance(uid)
    val logisticRegression = copyValues(that)
    <span class="comment">// Scala Reflection magic to call protected train method</span>
    ...
    logisticRegression.train(dataset)
  }
}      
</pre></div>
</div>
 </figure></notextile></div>

<p>If input dataset size is less than 100000 rows, it will be placed inside single partition, and regression model will be trained in local mode.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
val <span class="key">base</span>: DataFrame = ...
val datasetPartitionSize = <span class="integer">100000</span>

<span class="comment">// Compute optimal partitions size based on base join</span>
val baseSize = base.count()
val numPartitions = (baseSize.toDouble / datasetPartitionSize).ceil.toInt
log.debug(s<span class="string"><span class="delimiter">&quot;</span><span class="content">Response base size: </span><span class="inline"><span class="inline-delimiter">$</span>baseSize</span><span class="delimiter">&quot;</span></span>)
log.debug(s<span class="string"><span class="delimiter">&quot;</span><span class="content">Repartition dataset using </span><span class="inline"><span class="inline-delimiter">$</span>numPartitions</span><span class="content"> partitions</span><span class="delimiter">&quot;</span></span>)
</pre></div>
</div>
 </figure></notextile></div>

<h2 id="results">Results</h2>

<p>With a little ingenuity (and copy paste) Spark became perfect tool for machine learning both on Small and Big Data. Most awesome thing is that this
new <code>LocalLogisticRegression</code> can be used as drop in replacement in Spark ML pipelines, producing exactly the same <code>LogisticRegressionModel</code> at the end.</p>

<p>It might be interesting idea to use this approach in Spark itself, because in this case it would be possible to do it
without doing so many code duplication. I’d love to see if anyone else had the same problem, and how solved it.</p>

<blockquote>
  <p>More cool Spark things in <a href="https://github.com/collectivemedia/spark-ext/">Github</a>.</p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Audience Modeling With Spark ML Pipelines]]></title>
    <link href="http://eugenezhulenev.com/blog/2015/09/09/audience-modeling-with-spark-ml-pipelines/"/>
    <updated>2015-09-09T06:04:25-07:00</updated>
    <id>http://eugenezhulenev.com/blog/2015/09/09/audience-modeling-with-spark-ml-pipelines</id>
    <content type="html"><![CDATA[<p>At <a href="http://collective.com">Collective</a> we are heavily relying on machine learning and predictive modeling to 
run digital advertising business. All decisions about what ad to show at this particular time to this particular user
are made by machine learning models (some of them are real time, and some of them are offline).</p>

<p>We have a lot of projects that uses machine learning, common name for all of them can be <strong>Audience Modeling</strong>, as they
all are trying to predict audience conversion (<em>CTR, Viewability Rate, etc…</em>) based on browsing history, behavioral segments and other type of 
predictors.</p>

<p>For most of new development we use <a href="https://spark.apache.org">Spark</a> and <a href="https://spark.apache.org/mllib/">Spark MLLib</a>. It is a awesome project,
however we found that some nice tools/libraries that are widely used for example in R are missing in Spark. In order to add missing
features that we would really like to have in Spark, we created <a href="https://github.com/collectivemedia/spark-ext">Spark Ext</a> - Spark Extensions
Library. </p>

<blockquote>
  <p>Spark Ext on Github: <a href="https://github.com/collectivemedia/spark-ext">https://github.com/collectivemedia/spark-ext</a></p>
</blockquote>

<p>I’m going to show simple example of combining <a href="https://github.com/collectivemedia/spark-ext">Spark Ext</a> with Spark ML pipelines for predicting user conversions based geo and browsing history data.</p>

<blockquote>
  <p>Spark ML pipeline example: <a href="https://github.com/collectivemedia/spark-ext/blob/master/sparkext-example/src/main/scala/com/collective/sparkext/example/SparkMlExtExample.scala">SparkMlExtExample.scala</a></p>
</blockquote>

<!-- more -->

<h2 id="predictors-data">Predictors Data</h2>

<p>I’m using dataset with 2 classes, that will be used for solving classification problem (user converted or not). It’s created with 
<a href="https://github.com/collectivemedia/spark-ext/blob/master/sparkext-example/src/main/scala/com/collective/sparkext/example/DataGenerator.scala">dummy data generator</a>, 
so that these 2 classes can be easily separated. It’s pretty similar to real data that usually available in digital advertising.</p>

<h3 id="browsing-history-log">Browsing History Log</h3>

<p>History of web sites that were visited by user.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
Cookie          | Site          | Impressions  
--------------- |-------------- | -------------
wKgQaV0lHZanDrp | live.com      | 24
wKgQaV0lHZanDrp | pinterest.com | 21
rfTZLbQDwbu5mXV | wikipedia.org | 14
rfTZLbQDwbu5mXV | live.com      | 1
rfTZLbQDwbu5mXV | amazon.com    | 1
r1CSY234HTYdvE3 | youtube.com   | 10
</pre></div>
</div>
 </figure></notextile></div>

<h3 id="geo-location-log">Geo Location Log</h3>

<p>Latitude/Longitude impression history.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
Cookie          | Lat     | Lng       | Impressions
--------------- |---------| --------- | ------------
wKgQaV0lHZanDrp | 34.8454 | 77.009742 | 13
wKgQaV0lHZanDrp | 31.8657 | 114.66142 | 1
rfTZLbQDwbu5mXV | 41.1428 | 74.039600 | 20
rfTZLbQDwbu5mXV | 36.6151 | 119.22396 | 4
r1CSY234HTYdvE3 | 42.6732 | 73.454185 | 4
r1CSY234HTYdvE3 | 35.6317 | 120.55839 | 5
20ep6ddsVckCmFy | 42.3448 | 70.730607 | 21
20ep6ddsVckCmFy | 29.8979 | 117.51683 | 1
</pre></div>
</div>
 </figure></notextile></div>

<h2 id="transforming-predictors-data">Transforming Predictors Data</h2>

<p>As you can see predictors data (sites and geo) is in <em>long</em> format, each <code>cookie</code> has multiple rows associated with it,
and it’s in general is not a good fit for machine learning.
We’d like <code>cookie</code> to be a primary key, and all other data should form <code>feature vector</code>.</p>

<h3 id="gather-transformer">Gather Transformer</h3>

<p>Inspired by R <code>tidyr</code> and <code>reshape2</code> packages. Convert <em>long</em> <code>DataFrame</code> with values
for each key into <em>wide</em> <code>DataFrame</code>, applying aggregation function if single
key has multiple values.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
val gather = <span class="keyword">new</span> Gather()
      .setPrimaryKeyCols(<span class="string"><span class="delimiter">&quot;</span><span class="content">cookie</span><span class="delimiter">&quot;</span></span>)
      .setKeyCol(<span class="string"><span class="delimiter">&quot;</span><span class="content">site</span><span class="delimiter">&quot;</span></span>)
      .setValueCol(<span class="string"><span class="delimiter">&quot;</span><span class="content">impressions</span><span class="delimiter">&quot;</span></span>)
      .setValueAgg(<span class="string"><span class="delimiter">&quot;</span><span class="content">sum</span><span class="delimiter">&quot;</span></span>)         <span class="comment">// sum impression by key</span>
      .setOutputCol(<span class="string"><span class="delimiter">&quot;</span><span class="content">sites</span><span class="delimiter">&quot;</span></span>)
val gatheredSites = gather.transform(siteLog)      
</pre></div>
</div>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
Cookie           | Sites
-----------------|----------------------------------------------
wKgQaV0lHZanDrp  | [
                 |  { site: live.com, impressions: 24.0 }, 
                 |  { site: pinterest.com, impressions: 21.0 }
                 | ]
rfTZLbQDwbu5mXV  | [
                 |  { site: wikipedia.org, impressions: 14.0 }, 
                 |  { site: live.com, impressions: 1.0 },
                 |  { site: amazon.com, impressions: 1.0 }
                 | ]
</pre></div>
</div>
 </figure></notextile></div>

<h3 id="google-s2-geometry-cell-id-transformer">Google S2 Geometry Cell Id Transformer</h3>

<p>The S2 Geometry Library is a spherical geometry library, very useful for manipulating regions on the sphere (commonly on Earth) 
and indexing geographic data. Basically it assigns unique cell id for each region on the earth. </p>

<blockquote>
  <p>Good article about S2 library: <a href="http://blog.christianperone.com/2015/08/googles-s2-geometry-on-the-sphere-cells-and-hilbert-curve/">Google’s S2, geometry on the sphere, cells and Hilbert curve</a></p>
</blockquote>

<p>For example you can combine S2 transformer with Gather to get from <code>lat</code>/<code>lon</code> to <code>K-V</code> pairs, where key will be <code>S2</code> cell id.
Depending on a level you can assign all people in Greater New York area (level = 4) into one cell, or you can index them block by block (level = 12).</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
<span class="comment">// Transform lat/lon into S2 Cell Id</span>
val s2Transformer = <span class="keyword">new</span> S2CellTransformer()
  .setLevel(<span class="integer">5</span>)
  .setCellCol(<span class="string"><span class="delimiter">&quot;</span><span class="content">s2_cell</span><span class="delimiter">&quot;</span></span>)

<span class="comment">// Gather S2 CellId log</span>
val gatherS2Cells = <span class="keyword">new</span> Gather()
  .setPrimaryKeyCols(<span class="string"><span class="delimiter">&quot;</span><span class="content">cookie</span><span class="delimiter">&quot;</span></span>)
  .setKeyCol(<span class="string"><span class="delimiter">&quot;</span><span class="content">s2_cell</span><span class="delimiter">&quot;</span></span>)
  .setValueCol(<span class="string"><span class="delimiter">&quot;</span><span class="content">impressions</span><span class="delimiter">&quot;</span></span>)
  .setOutputCol(<span class="string"><span class="delimiter">&quot;</span><span class="content">s2_cells</span><span class="delimiter">&quot;</span></span>)
  
val gatheredCells = gatherS2Cells.transform(s2Transformer.transform(geoDf))
</pre></div>
</div>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
Cookie           | S2 Cells
-----------------|----------------------------------------------
wKgQaV0lHZanDrp  | [
                 |  { s2_cell: d5dgds, impressions: 5.0 }, 
                 |  { s2_cell: b8dsgd, impressions: 1.0 }
                 | ]
rfTZLbQDwbu5mXV  | [
                 |  { s2_cell: d5dgds, impressions: 12.0 }, 
                 |  { s2_cell: b8dsgd, impressions: 3.0 },
                 |  { s2_cell: g7aeg3, impressions: 5.0 }
                 | ]
</pre></div>
</div>
 </figure></notextile></div>

<h2 id="assembling-feature-vector">Assembling Feature Vector</h2>

<p><code>K-V</code> pairs from result of <code>Gather</code> are cool, and groups all the information about cookie into single row, however they can’t be used
as input for machine learning. To be able to train a model, predictors data needs to be represented as a vector of doubles. If all features are continuous and
numeric it’s easy, but if some of them are categorical or in <code>gathered</code> shape, it’s not trivial.</p>

<h3 id="gather-encoder">Gather Encoder</h3>

<p>Encodes categorical key-value pairs using dummy variables. </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
<span class="comment">// Encode S2 Cell data</span>
val encodeS2Cells = <span class="keyword">new</span> GatherEncoder()
  .setInputCol(<span class="string"><span class="delimiter">&quot;</span><span class="content">s2_cells</span><span class="delimiter">&quot;</span></span>)
  .setOutputCol(<span class="string"><span class="delimiter">&quot;</span><span class="content">s2_cells_f</span><span class="delimiter">&quot;</span></span>)
  .setKeyCol(<span class="string"><span class="delimiter">&quot;</span><span class="content">s2_cell</span><span class="delimiter">&quot;</span></span>)
  .setValueCol(<span class="string"><span class="delimiter">&quot;</span><span class="content">impressions</span><span class="delimiter">&quot;</span></span>)
  .setCover(<span class="float">0.95</span>) <span class="comment">// dimensionality reduction</span>
</pre></div>
</div>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
Cookie           | S2 Cells
-----------------|----------------------------------------------
wKgQaV0lHZanDrp  | [
                 |  { s2_cell: d5dgds, impressions: 5.0 }, 
                 |  { s2_cell: b8dsgd, impressions: 1.0 }
                 | ]
rfTZLbQDwbu5mXV  | [
                 |  { s2_cell: d5dgds, impressions: 12.0 }, 
                 |  { s2_cell: g7aeg3, impressions: 5.0 }
                 | ]
</pre></div>
</div>
 </figure></notextile></div>

<p>Transformed into</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
Cookie           | S2 Cells Features
-----------------|------------------------
wKgQaV0lHZanDrp  | [ 5.0  ,  1.0 , 0   ]
rfTZLbQDwbu5mXV  | [ 12.0 ,  0   , 5.0 ]
</pre></div>
</div>
 </figure></notextile></div>

<p>Note that it’s 3 unique cell id values, that gives 3 columns in final feature vector.</p>

<p>Optionally apply dimensionality reduction using <code>top</code> transformation:</p>

<ul>
  <li>Top coverage, is selecting categorical values by computing the count of distinct users for each value,
sorting the values in descending order by the count of users, and choosing the top values from the resulting
list such that the sum of the distinct user counts over these values covers c percent of all users,
for example, selecting top sites covering 99% of users.</li>
</ul>

<h2 id="spark-ml-pipelines">Spark ML Pipelines</h2>

<p>Spark ML Pipeline - is new high level API for Spark MLLib. </p>

<blockquote>
  <p>A practical ML pipeline often involves a sequence of data pre-processing, feature extraction, model fitting, and validation stages. For example, classifying text documents might involve text segmentation and cleaning, extracting features, and training a classification model with cross-validation. <a href="https://databricks.com/blog/2015/01/07/ml-pipelines-a-new-high-level-api-for-mllib.html">Read More.</a> </p>
</blockquote>

<p>In Spark ML it’s possible to split ML pipeline in multiple independent stages, group them together in single pipeline and run it
with Cross Validation and Parameter Grid to find best set of parameters.</p>

<h3 id="put-it-all-together-with-spark-ml-pipelines">Put It All together with Spark ML Pipelines</h3>

<p>Gather encoder is a natural fit into Spark ML Pipeline API.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
<span class="comment">// Encode site data</span>
val encodeSites = <span class="keyword">new</span> GatherEncoder()
  .setInputCol(<span class="string"><span class="delimiter">&quot;</span><span class="content">sites</span><span class="delimiter">&quot;</span></span>)
  .setOutputCol(<span class="string"><span class="delimiter">&quot;</span><span class="content">sites_f</span><span class="delimiter">&quot;</span></span>)
  .setKeyCol(<span class="string"><span class="delimiter">&quot;</span><span class="content">site</span><span class="delimiter">&quot;</span></span>)
  .setValueCol(<span class="string"><span class="delimiter">&quot;</span><span class="content">impressions</span><span class="delimiter">&quot;</span></span>)

<span class="comment">// Encode S2 Cell data</span>
val encodeS2Cells = <span class="keyword">new</span> GatherEncoder()
  .setInputCol(<span class="string"><span class="delimiter">&quot;</span><span class="content">s2_cells</span><span class="delimiter">&quot;</span></span>)
  .setOutputCol(<span class="string"><span class="delimiter">&quot;</span><span class="content">s2_cells_f</span><span class="delimiter">&quot;</span></span>)
  .setKeyCol(<span class="string"><span class="delimiter">&quot;</span><span class="content">s2_cell</span><span class="delimiter">&quot;</span></span>)
  .setValueCol(<span class="string"><span class="delimiter">&quot;</span><span class="content">impressions</span><span class="delimiter">&quot;</span></span>)
  .setCover(<span class="float">0.95</span>)

<span class="comment">// Assemble feature vectors together</span>
val assemble = <span class="keyword">new</span> VectorAssembler()
  .setInputCols(<span class="predefined-type">Array</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">sites_f</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">s2_cells_f</span><span class="delimiter">&quot;</span></span>))
  .setOutputCol(<span class="string"><span class="delimiter">&quot;</span><span class="content">features</span><span class="delimiter">&quot;</span></span>)

<span class="comment">// Build logistic regression</span>
val lr = <span class="keyword">new</span> LogisticRegression()
  .setFeaturesCol(<span class="string"><span class="delimiter">&quot;</span><span class="content">features</span><span class="delimiter">&quot;</span></span>)
  .setLabelCol(<span class="string"><span class="delimiter">&quot;</span><span class="content">response</span><span class="delimiter">&quot;</span></span>)
  .setProbabilityCol(<span class="string"><span class="delimiter">&quot;</span><span class="content">probability</span><span class="delimiter">&quot;</span></span>)

<span class="comment">// Define pipeline with 4 stages</span>
val pipeline = <span class="keyword">new</span> Pipeline()
  .setStages(<span class="predefined-type">Array</span>(encodeSites, encodeS2Cells, assemble, lr))

val evaluator = <span class="keyword">new</span> BinaryClassificationEvaluator()
  .setLabelCol(Response.response)

val crossValidator = <span class="keyword">new</span> CrossValidator()
  .setEstimator(pipeline)
  .setEvaluator(evaluator)

val paramGrid = <span class="keyword">new</span> ParamGridBuilder()
  .addGrid(lr.elasticNetParam, <span class="predefined-type">Array</span>(<span class="float">0.1</span>, <span class="float">0.5</span>))
  .build()

crossValidator.setEstimatorParamMaps(paramGrid)
crossValidator.setNumFolds(<span class="integer">2</span>)

println(s<span class="string"><span class="delimiter">&quot;</span><span class="content">Train model on train set</span><span class="delimiter">&quot;</span></span>)
val cvModel = crossValidator.fit(trainSet)
</pre></div>
</div>
 </figure></notextile></div>

<h2 id="conclusion">Conclusion</h2>

<p>New Spark ML API makes machine learning much more easier. <a href="https://github.com/collectivemedia/spark-ext">Spark Ext</a> is good example of how is it possible to 
create custom transformers/estimators that later can be used as a part of bigger pipeline, and can be easily shared/reused by multiple projects.</p>

<blockquote>
  <p>Full code for example application is available on <a href="https://github.com/collectivemedia/spark-ext/blob/master/sparkext-example/src/main/scala/com/collective/sparkext/example/SparkMlExtExample.scala">Github</a>.</p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interactive Audience Analytics With Spark and HyperLogLog]]></title>
    <link href="http://eugenezhulenev.com/blog/2015/07/15/interactive-audience-analytics-with-spark-and-hyperloglog/"/>
    <updated>2015-07-15T19:07:44-07:00</updated>
    <id>http://eugenezhulenev.com/blog/2015/07/15/interactive-audience-analytics-with-spark-and-hyperloglog</id>
    <content type="html"><![CDATA[<p>At <a href="http://collective.com">Collective</a> we are working not only on cool things like 
<a href="http://eugenezhulenev.com/blog/2015/06/10/2015-06-10-feature-engineering-at-scale">Machine Learning and Predictive Modeling</a>, 
but also on reporting that can be tedious and boring. However at our scale even simple reporting 
application can become challenging engineering problem. This post is based on talk that 
I gave at <a href="http://www.meetup.com/ny-scala/events/223751768/">NY-Scala Meetup</a>. Slides are available <a href="http://eugenezhulenev.com/talks/interactive-audience-analytics/">here</a>.</p>

<blockquote>
  <p>Example application is available on github: <a href="https://github.com/collectivemedia/spark-hyperloglog">https://github.com/collectivemedia/spark-hyperloglog</a></p>
</blockquote>

<!-- more -->

<h2 id="impression-log">Impression Log</h2>

<p>We are building reporting application that is based on impression log. It’s not exactly the way how we get data from out partners,
it’s pre-aggregated by Ad, Site, Cookie. And even in this pre-aggregated format it takes hundreds of gigabytes per day on HDFS.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
Ad            | Site          | Cookie          | Impressions | Clicks | Segments                       
------------- |-------------- | --------------- | ----------- | ------ | -------------------------------
bmw_X5        | forbes.com    | 13e835610ff0d95 | 10          | 1      | [a.m, b.rk, c.rh, d.sn, ...]   
mercedes_2015 | forbes.com    | 13e8360c8e1233d | 5           | 0      | [a.f, b.rk, c.hs, d.mr, ...]   
nokia         | gizmodo.com   | 13e3c97d526839c | 8           | 0      | [a.m, b.tk, c.hs, d.sn, ...]   
apple_music   | reddit.com    | 1357a253f00c0ac | 3           | 1      | [a.m, b.rk, d.sn, e.gh, ...]   
nokia         | cnn.com       | 13b23555294aced | 2           | 1      | [a.f, b.tk, c.rh, d.sn, ...]   
apple_music   | facebook.com  | 13e8333d16d723d | 9           | 1      | [a.m, d.sn, g.gh, s.hr, ...]   
</pre></div>
</div>
 </figure></notextile></div>

<p>Each cookie id has assigned segments which are just 4-6 letters code, that represents some information about cookie, that we
get from 3rd party data providers such as <a href="http://www.bluekai.com">Blukai</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
- a.m  : Male
- a.f  : Female
- b.tk : $75k-$100k annual income
- b.rk : $100k-$150k annual income
- c.hs : High School
- c.rh : College
- d.sn : Single
- d.mr : Married
</pre></div>
</div>
 </figure></notextile></div>

<p>For example if cookie has assigned <code>a.m</code> segment, it means that we think (actually data provider thinks) that this cookie belongs to male.
The same thing for annual income level. </p>

<p>We don’t have precise information, to whom exactly particular cookie belongs, and what is real
annual income level, this segments are essentially probabilistic, but we can get very interesting insights from this data.</p>

<h3 id="what-we-can-do-with-this-data">What we can do with this data</h3>

<p>Using this impression log we can answer some interesting questions</p>

<ul>
  <li>We can calculate a given group’s prevalence in a campaign’s audience, eg. what role do <strong>males</strong> play in the optimized audience for a <strong>Goodyear Tires</strong> campaign?</li>
  <li>What is <strong>male/female</strong> ratio for people who have seen <strong>bmw_X5</strong> ad on <strong>forbes.com</strong></li>
  <li>Income distribution for people who have seen Apple Music ad</li>
  <li>Nokia click distribution across different education levels  </li>
</ul>

<p>Using this basic questions we can create so called “Audience Profile”, that describes what type of audience is prevailing in optimized campaign or partner web site.</p>

<p><img class="center" src="http://eugenezhulenev.com/talks/interactive-audience-analytics/affinity.png" /></p>

<p>Blue bar means that this particular segment tend to view ad/visit web site more than on average, and red bar mean less. For example for <strong>Goodyear Tires</strong> we expect to see
more <strong>male</strong> audience than <strong>female</strong>.</p>

<h2 id="solving-problem-with-sql">Solving problem with SQL</h2>

<p>SQL looks like an easy choice for this problem, however as I already mentioned we have hundreds of gigabytes of data every day, and we
need to get numbers based on 1 year history in seconds. Hive/Impala simply can’t solve this problem.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
<span class="class">select</span> <span class="predefined">count</span>(<span class="keyword">distinct</span> cookie_id) <span class="keyword">from</span> impressions
    <span class="keyword">where</span> site = <span class="string"><span class="delimiter">'</span><span class="content">forbes.com</span><span class="delimiter">'</span></span>
    <span class="keyword">and</span> ad = <span class="string"><span class="delimiter">'</span><span class="content">bmw_X5</span><span class="delimiter">'</span></span>
    <span class="keyword">and</span> segment contains <span class="string"><span class="delimiter">'</span><span class="content">a.m</span><span class="delimiter">'</span></span>
</pre></div>
</div>
 </figure></notextile></div>

<p>Unfortunately we have almost infinite combinations of filters that users can define, so it’s not feasible to pre-generate all possible reports.
Users can use any arbitrary ad, site, campaign, order filter combinations, and may want to know audience intersection with any segment.</p>

<h2 id="audience-cardinality-approximation-with-hyperloglog">Audience cardinality approximation with HyperLogLog</h2>

<p>We came up with different solution, instead of providing precise results for every query, we are providing approximated number, but with
very high precision. Usually error is around 2% which for this particular application is really good. We don’t need to know exact number of male/female
cookies in audience. To be able to say what audience is prevailing, approximated numbers are more than enough.</p>

<p>We use <a href="https://en.wikipedia.org/wiki/HyperLogLog">HyperLogLog</a>, which is algorithm for the count-distinct problem, 
approximating the number of distinct elements (cardinality). It uses finite space and has configurable precision. 
It able to estimate cardinalities of &gt;10^9 with a typical accuracy of 2%, using 1.5kB of memory.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
trait HyperLogLog {
    <span class="keyword">def</span> <span class="function">add</span>(<span class="key">cookieId</span>: <span class="predefined-type">String</span>): Unit
    <span class="comment">//   |A|</span>
    <span class="keyword">def</span> <span class="function">cardinality</span>(): <span class="predefined-type">Long</span>
    <span class="comment">//   |A ∪ B|</span>
    <span class="keyword">def</span> <span class="function">merge</span>(<span class="key">other</span>: HyperLogLog): HyperLogLog
    <span class="comment">//   |A ∩ B| = |A| + |B| - |A ∪ B|,</span>
    <span class="keyword">def</span> <span class="function">intersect</span>(<span class="key">other</span>: HyperLogLog): <span class="predefined-type">Long</span>
}
</pre></div>
</div>
 </figure></notextile></div>

<p>Here is roughly API that is provided by <code>HyperLogLog</code>. You can add new cookieId to it, get cardinality estimation of unique cookies that were 
already added to it, merge it with another <code>HyperLogLog</code>, and finally get intersection. It’s important to notice that
after <code>intersect</code> operation <code>HyperLogLog</code> object is lost, and you have only approximated intersection cardinality. 
So usually <code>HyperLogLog</code> intersection is the last step in computation.</p>

<p>I suggest you to watch awesome talk by <a href="https://twitter.com/avibryant">Avi Bryant</a> where he discusses not only HyperLogLog but lot’s of other
approximation data structures that can be useful for big-data analytics: <a href="http://www.infoq.com/presentations/abstract-algebra-analytics">http://www.infoq.com/presentations/abstract-algebra-analytics</a>.</p>

<h2 id="from-cookies-to-hyperloglog">From cookies to HyperLogLog</h2>

<p>We split out original impression log into two tables. </p>

<p>For ad impressions table we remove segment information and aggregate cookies, impressions and clicks by Ad and Site. <code>HyperLogLog</code> can 
be used in aggregation function exactly the same was as <code>sum</code> operation. Zero is empty <code>HyperLogLog</code>, and plus operation is <code>merge</code> (btw it’s exactly
properties required by <code>Monoid</code>)</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
Ad            | Site          | Cookies HLL        | Impressions | Clicks 
------------- | ------------- | ------------------ | ----------- | ------ 
bmw_X5        | forbes.com    | HyperLogLog@23sdg4 | 5468        | 35     
bmw_X5        | cnn.com       | HyperLogLog@84jdg4 | 8943        | 29     
</pre></div>
</div>
 </figure></notextile></div>

<p>For segments table we remove ad and site information, and aggregate data by segment.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
Segment       | Cookies HLL        | Impressions | Clicks
------------- | ------------------ | ----------- | ------
Male          | HyperLogLog@85sdg4 | 235468      | 335   
$100k-$150k   | HyperLogLog@35jdg4 | 569473      | 194   
</pre></div>
</div>
 </figure></notextile></div>

<h3 id="percent-of-college-and-high-school-education-in-bmw-campaign">Percent of college and high school education in BMW campaign</h3>

<p>If you imaging that we can load these tables into <code>Seq</code>, then audience intersection becomes really straightforward task, that can
be solved in couple line of functional scala operations.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">case</span> <span class="type">class</span> <span class="class">Audience</span>(<span class="key">ad</span>: <span class="predefined-type">String</span>, <span class="key">site</span>: <span class="predefined-type">String</span>, <span class="key">hll</span>: HyperLogLog, <span class="key">imp</span>: <span class="predefined-type">Long</span>, <span class="key">clk</span>: <span class="predefined-type">Long</span>)

<span class="keyword">case</span> <span class="type">class</span> <span class="class">Segment</span>(<span class="key">name</span>: <span class="predefined-type">String</span>, <span class="key">hll</span>: HyperLogLog, <span class="key">imp</span>: <span class="predefined-type">Long</span>, <span class="key">clk</span>: <span class="predefined-type">Long</span>)

val <span class="key">adImpressions</span>: Seq[Audience] = ...
val <span class="key">segmentImpressions</span>: Seq[<span class="predefined-type">Segment</span>] = ...

val <span class="key">bmwCookies</span>: HyperLogLog = adImpressions
    .filter(_.ad = <span class="string"><span class="delimiter">&quot;</span><span class="content">bmw_X5</span><span class="delimiter">&quot;</span></span>)
    .map(_.hll).reduce(_ merge _)

val <span class="key">educatedCookies</span>: HyperLogLog = segmentImpressions
    .filter(_.segment <span class="keyword">in</span> Seq(<span class="string"><span class="delimiter">&quot;</span><span class="content">College</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">High School</span><span class="delimiter">&quot;</span></span>))
    .map(_.hll).reduce( _ merge _)

val p = (bmwCookies intersect educatedCookies) / bmwCookies.count()
</pre></div>
</div>
 </figure></notextile></div>

<h2 id="spark-dataframes-with-hyperloglog">Spark DataFrames with HyperLogLog</h2>

<p>Obviously we can’t load all the data into scala <code>Seq</code> on single machine, because it’s huge, even after removing cookie level data
and transforming it into <code>HyperLogLog</code> objects, it’s around 1-2 gigabytes of data for single day.</p>

<p>So we have to use some distributed data processing framework to solve this problem, and we chose Spark.</p>

<h3 id="what-is-spark-dataframe">What is Spark DataFrame</h3>

<ul>
  <li>Inspired by R data.frame and Python/Pandas DataFrame</li>
  <li>Distributed collection of rows organized into named columns</li>
  <li>Used to be SchemaRDD in Spark &lt; 1.3.0</li>
</ul>

<h3 id="high-level-dataframe-operations">High-Level DataFrame Operations</h3>

<ul>
  <li>Selecting required columns</li>
  <li>Filtering</li>
  <li>Joining different data sets</li>
  <li>Aggregation (count, sum, average, etc)</li>
</ul>

<p>You can start from <a href="https://spark.apache.org/docs/1.3.0/sql-programming-guide.html">Spark DataFrame guide</a> or <a href="https://databricks.com/blog/2015/02/17/introducing-dataframes-in-spark-for-large-scale-data-science.html">DataBricks blog post</a>.</p>

<h3 id="ad-impressions-and-segments-in-dataframes">Ad impressions and segments in DataFrames</h3>

<p>We store all out data on HDFS using Parquet data format, and that’s how it looks after it’s loaded into Spark DataFrame.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
val <span class="key">adImpressions</span>: DataFrame = sqlContext.parquetFile(<span class="string"><span class="delimiter">&quot;</span><span class="content">/aa/audience</span><span class="delimiter">&quot;</span></span>)

adImpressions.printSchema()
<span class="comment">// root</span>
<span class="comment">//   | -- ad: string (nullable = true)</span>
<span class="comment">//   | -- site: string (nullable = true)</span>
<span class="comment">//   | -- hll: binary (nullable = true)</span>
<span class="comment">//   | -- impressions: long (nullable = true)</span>
<span class="comment">//   | -- clicks: long (nullable = true)</span>

val <span class="key">segmentImpressions</span>: DataFrame = sqlContext.parquetFile(<span class="string"><span class="delimiter">&quot;</span><span class="content">/aa/segments</span><span class="delimiter">&quot;</span></span>)

segmentImpressions.printSchema()
<span class="comment">// root</span>
<span class="comment">//   | -- segment: string (nullable = true)</span>
<span class="comment">//   | -- hll: binary (nullable = true)</span>
<span class="comment">//   | -- impressions: long (nullable = true)</span>
<span class="comment">//   | -- clicks: long (nullable = true)</span>
</pre></div>
</div>
 </figure></notextile></div>

<p><code>HyperLogLog</code> is essentially huge <code>Array[Byte]</code> with some clever hashing and math, so it’s straightforward to store it on HDFS in serialized form.</p>

<h2 id="working-with-spark-dataframe">Working with Spark DataFrame</h2>

<p>We want to know answer for the same question: “Percent of college and high school education in BMW campaign”.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">import</span> <span class="include">org.apache.spark.sql.functions._</span>
<span class="keyword">import</span> <span class="include">org.apache.spark.sql.HLLFunctions._</span>

val <span class="key">bmwCookies</span>: HyperLogLog = adImpressions
    .filter(col(<span class="string"><span class="delimiter">&quot;</span><span class="content">ad</span><span class="delimiter">&quot;</span></span>) === <span class="string"><span class="delimiter">&quot;</span><span class="content">bmw_X5</span><span class="delimiter">&quot;</span></span>)
    .select(mergeHll(col(<span class="string"><span class="delimiter">&quot;</span><span class="content">hll</span><span class="delimiter">&quot;</span></span>)).first() <span class="comment">// -- sum(clicks)</span>

val <span class="key">educatedCookies</span>: HyperLogLog = hllSegments
    .filter(col(<span class="string"><span class="delimiter">&quot;</span><span class="content">segment</span><span class="delimiter">&quot;</span></span>) <span class="keyword">in</span> Seq(<span class="string"><span class="delimiter">&quot;</span><span class="content">College</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">High School</span><span class="delimiter">&quot;</span></span>))
    .select(mergeHll(col(<span class="string"><span class="delimiter">&quot;</span><span class="content">hll</span><span class="delimiter">&quot;</span></span>)).first()

val p = (bmwCookies intersect educatedCookies) / bmwCookies.count()
</pre></div>
</div>
 </figure></notextile></div>

<p>It looks pretty familiar, not too far from example based on scala <code>Seq</code>. Only one unusual operation, that you might notice if you have some
experience with Spark is <code>mergeHLL</code>. It’s not available in Spark by default, it’s custom <code>PartialAggregate</code> function that can compute aggregates
for serialized <code>HyperLogLog</code> objects.</p>

<h3 id="writing-your-own-spark-aggregation-function">Writing your own Spark aggregation function</h3>

<p>To write you own aggregation function you need to define function that will be applied to each row in <code>RDD</code> partition, in this example
it’s called <code>MergeHLLPartition</code>. Then you need to define function that will take results from different partitions and merge them together, for <code>HyperLogLog</code>
it’s called <code>MergeHLLMerge</code>. And finally you need to tell Spark how you want it to split your computation across <code>RDD</code> (DataFrame is backed by <code>RDD[Row]</code>) </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">case</span> <span class="type">class</span> <span class="class">MergeHLLPartition</span>(<span class="key">child</span>: <span class="predefined-type">Expression</span>)
  <span class="directive">extends</span> AggregateExpression with trees.UnaryNode[<span class="predefined-type">Expression</span>] { ... }

<span class="keyword">case</span> <span class="type">class</span> <span class="class">MergeHLLMerge</span>(<span class="key">child</span>: <span class="predefined-type">Expression</span>)
  <span class="directive">extends</span> AggregateExpression with trees.UnaryNode[<span class="predefined-type">Expression</span>] { ... }

<span class="keyword">case</span> <span class="type">class</span> <span class="class">MergeHLL</span>(<span class="key">child</span>: <span class="predefined-type">Expression</span>)
  <span class="directive">extends</span> PartialAggregate with trees.UnaryNode[<span class="predefined-type">Expression</span>] {

  override <span class="keyword">def</span> <span class="key">asPartial</span>: SplitEvaluation = {
    val partial = Alias(MergeHLLPartition(child), <span class="string"><span class="delimiter">&quot;</span><span class="content">PartialMergeHLL</span><span class="delimiter">&quot;</span></span>)()

    SplitEvaluation(
      MergeHLLMerge(partial.toAttribute),
      partial :: Nil
    )
  }
}

<span class="keyword">def</span> <span class="function">mergeHLL</span>(<span class="key">e</span>: Column): Column = MergeHLL(e.expr)
</pre></div>
</div>
 </figure></notextile></div>

<p>After that writing aggregations becomes really easy task, and your expressions will look like “native” DataFrame code, which is really nice, and super
easy to read and reason about. </p>

<p>Also it works much faster then solving this problem with scala transformations on top of <code>RDD[Row]</code>, as Spark catalyst optimizer can executed optimized
plan and reduce amount of data that needs to be shuffled between spark nodes.</p>

<p>And finally it’s so much easier to manage mutable state. Spark encourage you to use immutable transformations, and it’s really cool until you need
extreme performance from your code. For example if you are using something like <code>reduce</code> or <code>aggregateByKey</code> you don’t really know when and where
your function instantiated and when it’s done with <code>RDD</code> partition and result transferred to another Spark node for merge operation. With <code>AggregateExpression</code> 
you have explicit control over mutable state, and it’s totally safe to accumulate mutable state during execution for single partition, and at the end when
you’ll need to send data to other node you can create immutable copy.</p>

<p>In this particular case using mutable <code>HyperLogLog</code> merge implementation helped to speed up computation time almost 10x times. For each partition <code>HyperLogLog</code> state
accumulated in single mutable <code>Array[Byte]</code> and at the end when data needs to be transferred somewhere else for merging with another partition, immutable copy is created.</p>

<h3 id="some-fancy-aggregates-with-dataframe-api">Some fancy aggregates with DataFrame Api</h3>

<p>You can write much more complicated aggregation functions, for example to compute aggregate based on multiple columns. Here is code sample from 
our audience analytics project.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>

<span class="keyword">case</span> <span class="type">class</span> <span class="class">SegmentEstimate</span>(<span class="key">cookieHLL</span>: HyperLogLog, <span class="key">clickHLL</span>: HyperLogLog)

type SegmentName = <span class="predefined-type">String</span>

val <span class="key">dailyEstimates</span>: RDD[(SegmentName, <span class="predefined-type">Map</span>[LocalDate, SegmentEstimate])] =
    segments.groupBy(segment_name).agg(
      segment_name,
      mergeDailySegmentEstimates(
        mkDailySegmentEstimate(      <span class="comment">// -- Map[LocalDate, SegmentEstimate]</span>
          dt,
          mkSegmentEstimate(         <span class="comment">// -- SegmentEstimate(cookieHLL, clickHLL)</span>
            cookie_hll,
            click_hll)
        )
      )
    )
</pre></div>
</div>
 </figure></notextile></div>

<p>This codes computes daily audience aggregated by segment. Using Spark <code>PartialAggregate</code> function 
saves a lot of network traffic and minimizes distributed shuffle size. </p>

<p>This aggregation is possible because of nice properties of <code>Monoid</code></p>

<ul>
  <li><code>HyperLogLog</code> is a <code>Monoid</code> (has <code>zero</code> and <code>plus</code> operations)</li>
  <li><code>SegmentEstimate</code> is a <code>Monoid</code> (tuple of two monoids)</li>
  <li><code>Map[K, SegmentEstimate]</code> is a <code>Monoid</code> (map with value monoid value type is monoid itself)</li>
</ul>

<h3 id="problems-with-custom-aggregation-functions">Problems with custom aggregation functions</h3>

<ul>
  <li>Right now it’s closed API, so you need to place all your code under <code>org.apache.spark.sql</code> package.</li>
  <li>It’s no guarantee that it will work in next Spark release.</li>
  <li>If you want to try, I suggest you to start with <code>org.apache.spark.sql.catalyst.expressions.Sum</code> as example.</li>
</ul>

<h2 id="spark-as-in-memory-sql-database">Spark as in-memory SQL database</h2>

<p>We use Spark as in-memory database that serves SQL (composed with DataFrame Api) queries. </p>

<p>People tend to think about spark with very batch oriented mindset. Start Spark cluster in Yarn, do computation, kill cluster. Submit you application to 
standalone Spark cluster (Mesos), kill it. Biggest problem with this approach that after your application is done, and JVM is killed, <code>SparkContext</code> is lost,
and even if you are running Spark in standalone mode, all data cached by your application is lost.</p>

<p>We use Spark in totally different way. We start Spark cluster in Yarn, load data to it from HDFS, cache it in memory, and <strong>do not shutdown</strong>. We
keep JVM running, it holds a reference to <code>SparkContext</code> and keeps all the data in memory on worker nodes.</p>

<p>Our backend application is essentially very simpre REST/JSON server built with Spray, that holds <code>SparkContext</code> reference, receive requests via
URL parameters, runs queries in Spark and return response in JSON.</p>

<p>Right now (July 2015) we have data starting from April, and it’s around 100g cached in 40 nodes. We need to keep 1 year history, so we don’t expect
more than 500g. And we are very confident that we can scale horizontally without seriously affecting performance. Right now average 
request response time is 1-2 seconds which is really good for our use case.</p>

<h2 id="spark-best-practices">Spark Best practices</h2>

<p>Here are configuration options that I found really useful for our specific task. You can find more details about each of them in Spark guide.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
- spark.scheduler.mode=FAIR
- spark.yarn.executor.memoryOverhead=4000
- spark.sql.autoBroadcastJoinThreshold=300000000 // ~300mb
- spark.serializer=org.apache.spark.serializer.KryoSerializer
- spark.speculation=true
</pre></div>
</div>
 </figure></notextile></div>

<p>Also I found that it’s really important to repartition your dataset if you are going to cache it and use for queries. Optimal number of partitions is
around 4-6 for each executor core, with 40 nodes and 6 executor cores we use 1000 partitions for best performance.</p>

<p>If you have too many partitions Spark will spend too much time for coordination, and receiving results from all partitions. If too small, you might have
problems with too big block during shuffle that can kill not only performance, but all your cluster: <a href="https://issues.apache.org/jira/browse/SPARK-1476">SPARK-1476</a></p>

<h2 id="other-options">Other Options</h2>

<p>Before starting this project we were evaluating some other options</p>

<h3 id="hive">Hive</h3>

<p>Obviously it’s too slow for interactive UI backend, but we found it really useful for batch data processing. We use it to process raw logs
and build aggregated tables with <code>HyperLogLog</code> inside.</p>

<h3 id="impala">Impala</h3>

<p>To get good performance out of Impala it’s required to write C++ user defined functions, and it’s was not the task that I wanted to do. Also 
I’m not confident that even with custom C++ function Impala can show performance that we need.</p>

<h4 id="druid">Druid</h4>

<p><a href="http://druid.io/">Druid</a> is really interesting project, and it’s used in another project at Collective for slightly different problem, 
but it’s not in production yet.</p>

<ul>
  <li>Managing separate Druid cluster - it’s not the task that I want to do</li>
  <li>We have batch oriented process - and druid data ingestion is stream based</li>
  <li>Bad support for some of type of queries that we need - if I need to know intersection of some particular ad with all segments, in case of druid it will be 10k (number of segments) queries, and it will obviously fail to complete in 1-2 seconds </li>
  <li>Not clear how get data back from Druid - it’s hard to get data back from Druid later, if it will turn out that it doesn’t solve out problems well</li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>Spark is Awesome! I didn’t have any major issues with it, and it just works! New DataFrame API is amazing, and we are going to build lot’s of new cool projects at Collective
with Spar MLLib and GraphX, and I’m pretty sure they all will be successful.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Feature Engineering at Scale With Spark]]></title>
    <link href="http://eugenezhulenev.com/blog/2015/06/10/feature-engineering-at-scale/"/>
    <updated>2015-06-10T20:02:45-07:00</updated>
    <id>http://eugenezhulenev.com/blog/2015/06/10/feature-engineering-at-scale</id>
    <content type="html"><![CDATA[<blockquote>
  <p>Check Model Matrix <a href="http://collectivemedia.github.io/modelmatrix/">Website</a> and <a href="https://github.com/collectivemedia/modelmatrix">Github project</a>.</p>
</blockquote>

<p>At <a href="http://collective.com">Collective</a> we are in programmatic advertisement business, it means that all our
advertisement decisions (what ad to show, to whom and at what time) are driven by models. We do a lot of 
machine learning, build thousands predictive models and use them to make millions decision per second.</p>

<h4 id="how-do-we-get-the-most-out-of-our-data-for-predictive-modeling">How do we get the most out of our data for predictive modeling?</h4>

<p>Success of all Machine Learning algorithms depends on data that you put into it, the better the features you choose, the
better the results you will achieve.</p>

<blockquote>
  <p>Feature Engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work better.</p>
</blockquote>

<p>In Ad-Tech it’s finite pieces of information about users that we can put into our models, and it’s 
almost the same across all companies in industry, we don’t have access to any anonymous data
like real name and age, interests on Facebook etc. It really matter how creative you are to get maximum from the data you have,
and how fast you can iterate and test new idea.</p>

<p>In 2014 Collective data science team published <a href="http://arxiv.org/abs/1402.6076">Machine Learning at Scale</a> paper that
describes our approach and trade-offs for audience optimization. In 2015 we solve the same problems, but
using new technologies (Spark and Spark MLLib) at even bigger scale. I want to show the tool that I built specifically 
to handle feature engineering/selection problem, and which is open sources now.</p>

<h2 id="model-matrix">Model Matrix</h2>

<!-- more -->

<h3 id="feature-transformation">Feature Transformation</h3>

<p>Imagine impression log that is used to train predictive model</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
visitor_id  | ad_campaign     | ad_id | ad_ctr     | pub_site            | state | city         | price | timestamp     
----------- | --------------- | ----- | ---------- | ------------------- | ----- | ------------ | ----- | ------------- 
bob         | Nike_Sport      | 1     | 0.01       | http://bbc.com      | NY    | New York     | 0.17  | 1431032702135  
bill        | Burgers_Co      | 2     | 0.005      | http://cnn.com      | CA    | Los Angeles  | 0.42  | 1431032705167 
mary        | Macys           | 3     | 0.015      | http://fashion.com  | CA    | Los Angeles  | 0.19  | 1431032708384 
</pre></div>
</div>
 </figure></notextile></div>

<p>Producing a feature vector for every visitor (cookie) row and every piece of information about a 
visitor as an p-size vector, where p is the number of predictor variables multiplied by cardinality 
of each variable (number of states in US, number of unique websites, etc …). It is impractical 
both from the data processing standpoint and because the resulting vector would only have 
about 1 in 100,000 non-zero elements.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
 visitor_id  | Nike_Sport | Burgers_Co | Macys | NY  | CA  | ... 
 ----------- | ---------- | ---------- | ----- | --- | --- | --- 
 bob         | 1.0        |            |       | 1.0 |     | ... 
 bill        |            | 1.0        |       |     | 1.0 | ... 
 mary        |            |            | 1.0   |     | 1.0 | ... 
</pre></div>
</div>
 </figure></notextile></div>

<p>Model Matrix uses feature transformations (top, index, binning) to reduce dimensionality to arrive 
at between one and two thousand predictor variables, with data sparsity of about 1 in 10. It removes 
irrelevant and low frequency predictor values from the model, and transforms continuous 
variable into bins of the same size.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>   
 visitor_id  | Nike | OtherAd | NY  | OtherState | price ∈ [0.01, 0.20) | price ∈ [0.20, 0.90) | ... 
 ----------- | ---- | ------- | --- | ---------- | -------------------- | -------------------- | --- 
 bob         | 1.0  |         | 1.0 |            | 1.0                  |                      | ... 
 bill        |      | 1.0     |     | 1.0        |                      | 1.0                  | ... 
 mary        |      | 1.0     |     | 1.0        |                      | 1.0                  | ... 
</pre></div>
</div>
 </figure></notextile></div>

<p>Transformation definitions in scala:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
sealed trait Transform

<span class="comment">/**
 * Absence of transformation
 */</span>
<span class="keyword">case</span> object <span class="predefined-type">Identity</span> <span class="directive">extends</span> Transform

<span class="comment">/**
 * For distinct values of the column, find top values
 * by a quantity that cumulatively cover a given percentage
 * of this quantity. For example, find the top DMAs that
 * represent 99% of cookies, or find top sites that
 * are responsible for 90% of impressions.
 *
 * @param cover      cumulative cover percentage
 * @param allOther   include feature for all other values
 */</span>
<span class="keyword">case</span> <span class="type">class</span> <span class="class">Top</span>(<span class="key">cover</span>: <span class="predefined-type">Double</span>, <span class="key">allOther</span>: <span class="predefined-type">Boolean</span>) <span class="directive">extends</span> Transform

<span class="comment">/**
 * For distinct values of the column, find the values
 * with at least the minimum support in the data set.
 * Support for a value is defined as the percentage of a
 * total quantity that have that value. For example,
 * find segments that appear for at least 1% of the cookies.
 *
 * @param support    support percentage
 * @param allOther   include feature for all other values
 */</span>
<span class="keyword">case</span> <span class="type">class</span> <span class="class">Index</span>(<span class="key">support</span>: <span class="predefined-type">Double</span>, <span class="key">allOther</span>: <span class="predefined-type">Boolean</span>) <span class="directive">extends</span> Transform

<span class="comment">/**
 * Break the values in the column into bins with roughly the same number of points.
 *
 * @param nbins target number of bins
 * @param minPoints minimum number of points in single bin
 * @param minPercents minimum percent of points in a bin (0-100).
 *                    The larger of absolute number and percent points is used.
 */</span>
<span class="keyword">case</span> <span class="type">class</span> <span class="class">Bins</span>(<span class="key">nbins</span>: Int, <span class="key">minPoints</span>: Int = <span class="integer">0</span>, <span class="key">minPercents</span>: <span class="predefined-type">Double</span> = <span class="float">0.0</span>) <span class="directive">extends</span> Transform
</pre></div>
</div>
 </figure></notextile></div>

<h3 id="transformed-columns">Transformed Columns</h3>

<h4 id="categorical-transformation">Categorical Transformation</h4>

<p>A column calculated by applying top or index transform function, each columns id corresponds 
to one unique value from input data set. SourceValue is encoded as ByteVector unique value from 
input column and used later for featurization. </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
<span class="type">class</span> <span class="class">CategoricalTransformer</span>(
  <span class="key">features</span>: DataFrame <span class="error">@</span><span class="error">@</span> <span class="predefined-type">Transformer</span>.Features
) <span class="directive">extends</span> <span class="predefined-type">Transformer</span>(features) {

  <span class="keyword">def</span> <span class="function">transform</span>(<span class="key">feature</span>: TypedModelFeature): Seq[CategoricalColumn]
  
}
</pre></div>
</div>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
sealed trait CategoricalColumn {
  <span class="keyword">def</span> <span class="key">columnId</span>: Int
  <span class="keyword">def</span> <span class="key">count</span>: <span class="predefined-type">Long</span>
  <span class="keyword">def</span> <span class="key">cumulativeCount</span>: <span class="predefined-type">Long</span>
}

object CategoricalColumn {

  <span class="keyword">case</span> <span class="type">class</span> <span class="class">CategoricalValue</span>(
    <span class="key">columnId</span>: Int,
    <span class="key">sourceName</span>: <span class="predefined-type">String</span>,
    <span class="key">sourceValue</span>: ByteVector,
    <span class="key">count</span>: <span class="predefined-type">Long</span>,
    <span class="key">cumulativeCount</span>: <span class="predefined-type">Long</span>
  ) <span class="directive">extends</span> CategoricalColumn 

  <span class="keyword">case</span> <span class="type">class</span> <span class="class">AllOther</span>(
    <span class="key">columnId</span>: Int,
    <span class="key">count</span>: <span class="predefined-type">Long</span>,
    <span class="key">cumulativeCount</span>: <span class="predefined-type">Long</span>
  ) <span class="directive">extends</span> CategoricalColumn 
  
}
</pre></div>
</div>
 </figure></notextile></div>

<h4 id="bin-column">Bin Column</h4>

<p>A column calculated by applying binning transform function.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
<span class="type">class</span> <span class="class">BinsTransformer</span>(
  <span class="key">input</span>: DataFrame <span class="error">@</span><span class="error">@</span> <span class="predefined-type">Transformer</span>.Features
) <span class="directive">extends</span> <span class="predefined-type">Transformer</span>(input) with Binner {

  <span class="keyword">def</span> <span class="function">transform</span>(<span class="key">feature</span>: TypedModelFeature): Seq[BinColumn] = {
  
}
</pre></div>
</div>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">case</span> <span class="type">class</span> <span class="class">BinValue</span>(
    <span class="key">columnId</span>: Int,
    <span class="key">low</span>: <span class="predefined-type">Double</span>,
    <span class="key">high</span>: <span class="predefined-type">Double</span>,
    <span class="key">count</span>: <span class="predefined-type">Long</span>,
    <span class="key">sampleSize</span>: <span class="predefined-type">Long</span>
  ) 
</pre></div>
</div>
 </figure></notextile></div>

<h3 id="building-model-matrix-instance">Building Model Matrix Instance</h3>

<p>Model Matrix instance contains information about shape of the training data, what transformations (categorical and binning)
are required to apply to input data in order to obtain feature vector that will got into machine learning
algorithm.</p>

<p>Building model matrix instance described well in <a href="http://collectivemedia.github.io/modelmatrix/doc/cli.html">command line interface documentation</a>.</p>

<h3 id="featurizing-your-data">Featurizing your data</h3>

<p>When you have model matrix instance, you can apply it to multiple input data sets. For example in Collective
we build model matrix instance once a week or even month, and use it for building models from daily/hourly data.
It gives us nice property: all models have the same columns, and it’s easy to compare them.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>

<span class="comment">// Similar to Spark LabeledPoint</span>
<span class="keyword">case</span> <span class="type">class</span> <span class="class">IdentifiedPoint</span>(<span class="key">id</span>: Any, <span class="key">features</span>: <span class="predefined-type">Vector</span>)

<span class="type">class</span> <span class="class">Featurization</span>(<span class="key">features</span>: Seq[ModelInstanceFeature]) <span class="directive">extends</span> <span class="predefined-type">Serializable</span> {

  <span class="comment">// Check that all input features belong to the same model instance</span>
  <span class="directive">private</span> val instances = features.map(_.modelInstanceId).toSet
  require(instances.size == <span class="integer">1</span>, 
    s<span class="string"><span class="delimiter">&quot;</span><span class="content">Features belong to different model instances: </span><span class="inline"><span class="inline-delimiter">$</span>instances</span><span class="delimiter">&quot;</span></span>)

  <span class="comment">// Maximum columns id in instance features</span>
  <span class="directive">private</span> val totalNumberOfColumns = features.flatMap {
    <span class="keyword">case</span> ModelInstanceIdentityFeature(_, _, _, _, columnId) =&gt; Seq(columnId)
    <span class="keyword">case</span> ModelInstanceTopFeature(_, _, _, _, cols) =&gt; cols.map(_.columnId)
    <span class="keyword">case</span> ModelInstanceIndexFeature(_, _, _, _, cols) =&gt; cols.map(_.columnId)
    <span class="keyword">case</span> ModelInstanceBinsFeature(_, _, _, _, cols) =&gt; cols.map(_.columnId)
  }.max


  <span class="comment">/**
   * Featurize input dataset
   *
   * @return id data type and featurized rows
   */</span>
  <span class="keyword">def</span> <span class="function">featurize</span>(
    <span class="key">input</span>: DataFrame <span class="error">@</span><span class="error">@</span> FeaturesWithId, 
    <span class="key">idColumn</span>: <span class="predefined-type">String</span>
  ): (DataType, RDD[IdentifiedPoint]) = {
  
    log.info(s<span class="string"><span class="delimiter">&quot;</span><span class="content">Extract features from input DataFrame with id column: </span><span class="inline"><span class="inline-delimiter">$</span>idColumn</span><span class="content">. </span><span class="delimiter">&quot;</span></span> + 
             s<span class="string"><span class="delimiter">&quot;</span><span class="content">Total number of columns: </span><span class="inline"><span class="inline-delimiter">$</span>totalNumberOfColumns</span><span class="delimiter">&quot;</span></span>)
    
    ...
    
  }
}
</pre></div>
</div>
 </figure></notextile></div>

<h3 id="results">Results</h3>

<p>Model Matrix is open sourced, and available on <a href="https://github.com/collectivemedia/modelmatrix">Github</a>, lot’s of 
documentation on <a href="http://collectivemedia.github.io/modelmatrix/">Website</a>.</p>

<p>We use it at <a href="http://collective.com">Collective</a> to define our models and it works for us really well.</p>

<p>You can continue your reading with <a href="http://arxiv.org/abs/1402.6076">Machine Learning at Scale</a> paper, 
to get more data science focused details about our modeling approach.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Twitter Live Stream Analytics With Spark and Cassandra]]></title>
    <link href="http://eugenezhulenev.com/blog/2014/11/20/twitter-analytics-with-spark/"/>
    <updated>2014-11-20T17:01:15-08:00</updated>
    <id>http://eugenezhulenev.com/blog/2014/11/20/twitter-analytics-with-spark</id>
    <content type="html"><![CDATA[<blockquote>
  <p>This is repost of my article from <a href="http://io.pellucid.com/blog/building-twitter-live-stream-analytics-with-spark-and-cassandra">Pellucid Tech Blog</a></p>
</blockquote>

<h3 id="background">Background</h3>

<p>At <a href="http://pellucid.com">Pellucid Analytics</a> we we are building a platform that
automates and simplifies the creation of data-driven chartbooks, so that it takes
minutes instead of hours to get from raw data to powerful visualizations and compelling stories.</p>

<p>One of industries we are focusing on is Investment Banking. We are helping IB advisory
professionals build pitch-books, and provide them with analytical and quantitative support
to sell their ideas. Comparable Companies Analysis is central to this business.</p>

<blockquote>
  <p>Comparable company analysis starts with establishing a peer group consisting of similar companies of similar size in the same industry and region.</p>
</blockquote>

<p>The problem we are faced with is finding a scalable solution to establish a peer group for any chosen company.</p>

<!-- more -->

<h3 id="approaches-that-we-tried">Approaches That We Tried</h3>

<h4 id="company-industry">Company Industry</h4>

<p>Data vendors provide <a href="http://en.wikipedia.org/wiki/Industry_classification">industry classification</a>
for each company, and it helps a lot in industries like retail (Wal-Mart is good comparable to Costco),
energy (Chevron and Exxon Mobil) but it stumbles with many other companies. People tend to compare
Amazon with Google as a two major players in it business, but data vendors tend to put Amazon in retail industry with Wal-Mart/Costco as comparables.</p>

<h4 id="company-financials-and-valuation-multiples">Company Financials and Valuation Multiples</h4>

<p>We tried cluster analysis and k-nearest neighbors to group companies based on their
financials (Sales, Revenue) and valuation multiples (EV/EBIDTA, P/E). However assumptions
that similar companies will have similar valuations multiples is wrong. People compare
Twitter with Facebook as two biggest companies in social media, but based on their financials
they don’t have too much in common. Facebook 2013 revenue is almost $8 billion and Twitter has only $600 million.</p>

<h3 id="novel-approach">Novel Approach</h3>

<p>We came up with an idea that if companies are often mentioned in news articles and tweets together, it’s probably a sign that people think about them as comparable companies. In this post I’ll show how we built proof of concept for this idea with Spark, Spark Streaming and Cassandra. We use only Twitter live stream data for now, accessing high quality news data is a bit more complicated problem.</p>

<!-- more -->

<p>Let’s take for example this tweet from CNN:</p>

<blockquote class="twitter-tweet" lang="en"><p>Trying to spot the next <a href="https://twitter.com/search?q=%24FB&amp;src=ctag">$FB</a> or <a href="https://twitter.com/search?q=%24TWTR&amp;src=ctag">$TWTR</a>? These 10 startups are worth keeping an eye on <a href="http://t.co/FEKNtm7QqB">http://t.co/FEKNtm7QqB</a></p>&mdash; CNN Public Relations (@CNNPR) <a href="https://twitter.com/CNNPR/status/518083527863435264">October 3, 2014</a></blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>From this tweet we can derive 2 mentions for 2 companies. For Facebook it will be Twitter and vice-versa. If we collect tweets for all companies over some period of time, and take a ratio of joint appearance in same tweet as a measure of “similarity”, we can build comparable company recommendations based on this measure.</p>

<h3 id="data-model">Data Model</h3>

<p>We use <a href="http://cassandra.apache.org/">Cassandra</a> to store all mentions, aggregates and final recommendations.
We use <a href="https://github.com/websudos/phantom">Phantom DSL</a> for scala to define schema
and for most of Cassandra operations (spark integration is not yet supported in Phantom).</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
<span class="comment">/**
 * Mention of focus company
 *
 * @param ticker   ticker of focus company
 * @param source   source of this mention (Twitter, RSS, etc...)
 * @param sourceId source specific id
 * @param time     time
 * @param mentions set of other tickers including focus ticker itself
 */</span>
<span class="keyword">case</span> <span class="type">class</span> <span class="class">Mention</span>(<span class="key">ticker</span>: Ticker, <span class="key">source</span>: <span class="predefined-type">String</span>, <span class="key">sourceId</span>: <span class="predefined-type">String</span>, <span class="key">time</span>: DateTime, <span class="key">mentions</span>: <span class="predefined-type">Set</span>[Ticker])

sealed <span class="type">class</span> <span class="class">MentionRecord</span> <span class="directive">extends</span> CassandraTable[MentionRecord, Mention] with <span class="predefined-type">Serializable</span> {

  override val <span class="key">tableName</span>: <span class="predefined-type">String</span> = <span class="string"><span class="delimiter">&quot;</span><span class="content">mention</span><span class="delimiter">&quot;</span></span>

  object ticker    <span class="directive">extends</span> StringColumn    (<span class="local-variable">this</span>)  with PartitionKey[<span class="predefined-type">String</span>]
  object source    <span class="directive">extends</span> StringColumn    (<span class="local-variable">this</span>)  with PrimaryKey[<span class="predefined-type">String</span>]
  object time      <span class="directive">extends</span> DateTimeColumn  (<span class="local-variable">this</span>)  with PrimaryKey[DateTime]
  object source_id <span class="directive">extends</span> StringColumn    (<span class="local-variable">this</span>)  with PrimaryKey[<span class="predefined-type">String</span>]
  object mentions  <span class="directive">extends</span> SetColumn[MentionRecord, Mention, <span class="predefined-type">String</span>] (<span class="local-variable">this</span>)

  <span class="keyword">def</span> <span class="function">fromRow</span>(<span class="key">r</span>: Row): Mention = {
    Mention(Ticker(ticker(r)), source(r), source_id(r), time(r), mentions(r) map Ticker)
  }
}
</pre></div>
</div>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
<span class="comment">/**
 * Count mentions for each ticker pair
 *
 * @param ticker        ticker of focus company
 * @param mentionedWith mentioned with this ticker
 * @param count         number of mentions
 */</span>
<span class="keyword">case</span> <span class="type">class</span> <span class="class">MentionsAggregate</span>(<span class="key">ticker</span>: Ticker, <span class="key">mentionedWith</span>: Ticker, <span class="key">count</span>: <span class="predefined-type">Long</span>)

sealed <span class="type">class</span> <span class="class">MentionsAggregateRecord</span> <span class="directive">extends</span> CassandraTable[MentionsAggregateRecord, MentionsAggregate] {

  override val <span class="key">tableName</span>: <span class="predefined-type">String</span> = <span class="string"><span class="delimiter">&quot;</span><span class="content">mentions_aggregate</span><span class="delimiter">&quot;</span></span>

  object ticker         <span class="directive">extends</span> StringColumn (<span class="local-variable">this</span>) with PartitionKey[<span class="predefined-type">String</span>]
  object mentioned_with <span class="directive">extends</span> StringColumn (<span class="local-variable">this</span>) with PrimaryKey[<span class="predefined-type">String</span>]
  object counter        <span class="directive">extends</span> LongColumn   (<span class="local-variable">this</span>)

  <span class="keyword">def</span> <span class="function">fromRow</span>(<span class="key">r</span>: Row): MentionsAggregate = {
    MentionsAggregate(Ticker(ticker(r)), Ticker(mentioned_with(r)), counter(r))
  }
}
</pre></div>
</div>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
<span class="comment">/**
 * Recommendation built based on company mentions with other companies
 *
 * @param ticker         focus company ticker
 * @position             recommendation position
 * @param recommendation recommended company ticker
 * @param p              number of times recommended company mentioned together
 *                       with focus company divided by total focus company mentions
 */</span>
<span class="keyword">case</span> <span class="type">class</span> <span class="class">Recommendation</span>(<span class="key">ticker</span>: Ticker, <span class="key">position</span>: <span class="predefined-type">Long</span>, <span class="key">recommendation</span>: Ticker, <span class="key">p</span>: <span class="predefined-type">Double</span>)

sealed <span class="type">class</span> <span class="class">RecommendationRecord</span> <span class="directive">extends</span> CassandraTable[RecommendationRecord, Recommendation] {

  override val <span class="key">tableName</span>: <span class="predefined-type">String</span> = <span class="string"><span class="delimiter">&quot;</span><span class="content">recommendation</span><span class="delimiter">&quot;</span></span>

  object ticker         <span class="directive">extends</span> StringColumn (<span class="local-variable">this</span>) with PartitionKey[<span class="predefined-type">String</span>]
  object position       <span class="directive">extends</span> LongColumn   (<span class="local-variable">this</span>) with PrimaryKey[<span class="predefined-type">Long</span>]
  object recommendation <span class="directive">extends</span> StringColumn (<span class="local-variable">this</span>)
  object p              <span class="directive">extends</span> DoubleColumn (<span class="local-variable">this</span>)

  <span class="keyword">def</span> <span class="function">fromRow</span>(<span class="key">r</span>: Row): Recommendation = {
    Recommendation(Ticker(ticker(r)), position(r), Ticker(recommendation(r)), p(r))
  }
}
</pre></div>
</div>
 </figure></notextile></div>

<h3 id="ingest-real-time-twitter-stream">Ingest Real-Time Twitter Stream</h3>

<p>We use <a href="https://spark.apache.org/streaming/">Spark Streaming</a> Twitter integration to subscribe for
real-time twitter updates, then we extract company mentions and put them to Cassandra. Unfortunately Phantom
doesn’t support Spark yet, so we used <a href="https://github.com/datastax/spark-cassandra-connector">Datastax Spark Cassandra Connector</a>
with custom type mappers to map from Phantom-record types into Cassandra tables.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
<span class="type">class</span> <span class="class">MentionStreamFunctions</span>(<span class="annotation">@transient</span> <span class="key">stream</span>: DStream[Mention]) <span class="directive">extends</span> <span class="predefined-type">Serializable</span> {

  <span class="keyword">import</span> <span class="include">TickerTypeConverter._</span>

  TypeConverter.registerConverter(StringToTickerTypeConverter)
  TypeConverter.registerConverter(TickerToStringTypeConverter)

  implicit object MentionMapper <span class="directive">extends</span> DefaultColumnMapper[Mention](<span class="predefined-type">Map</span>(
    <span class="string"><span class="delimiter">&quot;</span><span class="content">ticker</span><span class="delimiter">&quot;</span></span>        -&gt; <span class="string"><span class="delimiter">&quot;</span><span class="content">ticker</span><span class="delimiter">&quot;</span></span>,
    <span class="string"><span class="delimiter">&quot;</span><span class="content">source</span><span class="delimiter">&quot;</span></span>        -&gt; <span class="string"><span class="delimiter">&quot;</span><span class="content">source</span><span class="delimiter">&quot;</span></span>,
    <span class="string"><span class="delimiter">&quot;</span><span class="content">sourceId</span><span class="delimiter">&quot;</span></span>      -&gt; <span class="string"><span class="delimiter">&quot;</span><span class="content">source_id</span><span class="delimiter">&quot;</span></span>,
    <span class="string"><span class="delimiter">&quot;</span><span class="content">time</span><span class="delimiter">&quot;</span></span>          -&gt; <span class="string"><span class="delimiter">&quot;</span><span class="content">time</span><span class="delimiter">&quot;</span></span>,
    <span class="string"><span class="delimiter">&quot;</span><span class="content">mentions</span><span class="delimiter">&quot;</span></span>      -&gt; <span class="string"><span class="delimiter">&quot;</span><span class="content">mentions</span><span class="delimiter">&quot;</span></span>
  ))

  <span class="keyword">def</span> <span class="function">saveMentionsToCassandra</span>(<span class="key">keyspace</span>: <span class="predefined-type">String</span>) = {
    stream.saveToCassandra(keyspace, MentionRecord.tableName)
  }
}
</pre></div>
</div>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
  <span class="directive">private</span> val filters = Companies.load().map(c =&gt; s<span class="string"><span class="delimiter">&quot;</span><span class="content">$</span><span class="content">$</span><span class="inline"><span class="inline-delimiter">${</span>c.ticker.value<span class="inline-delimiter">}</span></span><span class="delimiter">&quot;</span></span>)

  val sc = <span class="keyword">new</span> SparkContext(sparkConf)
  val ssc = <span class="keyword">new</span> StreamingContext(sc, Seconds(<span class="integer">2</span>))

  val stream = TwitterUtils.createStream(ssc, None, filters = filters)

  <span class="comment">// Save Twitter Stream to cassandra</span>
  stream.foreachRDD(updates =&gt; log.info(s<span class="string"><span class="delimiter">&quot;</span><span class="content">Received Twitter stream updates. Count: </span><span class="inline"><span class="inline-delimiter">${</span>updates.count()<span class="inline-delimiter">}</span></span><span class="delimiter">&quot;</span></span>))
  stream.extractMentions.saveMentionsToCassandra(keySpace)

  <span class="comment">// Start Streaming Application</span>
  ssc.start()
</pre></div>
</div>
 </figure></notextile></div>

<h3 id="spark-for-aggregation-and-recommendation">Spark For Aggregation and Recommendation</h3>

<p>To come up with comparable company recommendation we use 2-step process.</p>

<h5 id="count-mentions-for-each-pair-of-tickers">1. Count mentions for each pair of tickers</h5>

<p>After <code>Mentions</code> table loaded in Spark as <code>RDD[Mention]</code> we extract pairs of tickers,
and it enables bunch of aggregate and reduce functions from Spark <code>PairRDDFunctions</code>.
With <code>aggregateByKey</code> and given combine functions we efficiently build counter map <code>Map[Ticker, Long]</code> for each
ticker distributed in cluster. From single <code>Map[Ticker, Long]</code> we emit multiple aggregates for each ticket pair.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
<span class="type">class</span> <span class="class">AggregateMentions</span>(<span class="annotation">@transient</span> <span class="key">sc</span>: SparkContext, <span class="key">keyspace</span>: <span class="predefined-type">String</span>)
  <span class="directive">extends</span> CassandraMappers with <span class="predefined-type">Serializable</span> {

  <span class="directive">private</span> type Counter = <span class="predefined-type">Map</span>[Ticker, <span class="predefined-type">Long</span>]

  <span class="directive">private</span> implicit lazy val summ = Semigroup.instance[<span class="predefined-type">Long</span>](_ + _)

  <span class="directive">private</span> lazy val <span class="key">seqOp</span>: (Counter, Ticker) =&gt; Counter = {
    <span class="keyword">case</span> (counter, ticker) <span class="keyword">if</span> counter.isDefinedAt(ticker) =&gt; counter.updated(ticker, counter(ticker) + <span class="integer">1</span>)
    <span class="keyword">case</span> (counter, ticker) =&gt; counter + (ticker -&gt; <span class="integer">1</span>)
  }

  <span class="directive">private</span> lazy val <span class="key">combOp</span>: (Counter, Counter) =&gt; Counter = {
    <span class="keyword">case</span> (l, r) =&gt; implicitly[Monoid[Counter]].append(l, r)
  }

  <span class="keyword">def</span> <span class="function">aggregate</span>(): Unit = {
    <span class="comment">// Emit pairs of (Focus Company Ticker, Mentioned With)</span>
    val pairs = sc.cassandraTable[Mention](keyspace, MentionRecord.tableName).
      flatMap(mention =&gt; mention.mentions.map((mention.ticker, _)))

    <span class="comment">// Calculate mentions for each ticker</span>
    val aggregated = pairs.aggregateByKey(<span class="predefined-type">Map</span>.empty[Ticker, <span class="predefined-type">Long</span>])(seqOp, combOp)

    <span class="comment">// Build MentionsAggregate from counters</span>
    val mentionsAggregate = aggregated flatMap {
      <span class="keyword">case</span> (ticker, counter) =&gt; counter map {
        <span class="keyword">case</span> (mentionedWith, count) =&gt; MentionsAggregate(ticker, mentionedWith, count)
      }
    }

    mentionsAggregate.saveToCassandra(keyspace, MentionsAggregateRecord.tableName)
  }
}
</pre></div>
</div>
 </figure></notextile></div>

<h5 id="sort-aggregates-and-build-recommendations">2. Sort aggregates and build recommendations</h5>

<p>After aggregates computed, we sort them globally and then group them by key (Ticker). After
all aggregates grouped we produce <code>Recommendation</code> in single traverse distributed for each key.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
<span class="type">class</span> <span class="class">Recommend</span>(<span class="annotation">@transient</span> <span class="key">sc</span>: SparkContext, <span class="key">keyspace</span>: <span class="predefined-type">String</span>)
  <span class="directive">extends</span> CassandraMappers with <span class="predefined-type">Serializable</span> {

  <span class="directive">private</span> <span class="keyword">def</span> <span class="key">toRecommendation</span>: (MentionsAggregate, Int) =&gt; Recommendation = {
    var <span class="key">totalMentions</span>: <span class="predefined-type">Option</span>[<span class="predefined-type">Long</span>] = None

    {
      <span class="keyword">case</span> (aggregate, idx) <span class="keyword">if</span> totalMentions.isEmpty =&gt;
        totalMentions = Some(aggregate.count)
        Recommendation(aggregate.ticker, idx, aggregate.mentionedWith, <span class="integer">1</span>)

      <span class="keyword">case</span> (aggregate, idx) =&gt;
        Recommendation(aggregate.ticker, idx,
                       aggregate.mentionedWith,
                       aggregate.count.toDouble / totalMentions.get)
    }
  }

  <span class="keyword">def</span> <span class="function">recommend</span>(): Unit = {
    val aggregates = sc.
               cassandraTable[MentionsAggregate](keyspace, MentionsAggregateRecord.tableName).
               sortBy(_.count, ascending = <span class="predefined-constant">false</span>)

    val recommendations = aggregates.
      groupBy(_.ticker).
      mapValues(_.zipWithIndex).
      flatMapValues(_ map toRecommendation.tupled).values

    recommendations.saveToCassandra(keyspace, RecommendationRecord.tableName)
  }
}
</pre></div>
</div>
 </figure></notextile></div>

<h3 id="results">Results</h3>

<p>You can check comparable company recommendations build from Twitter stream using <a href="http://pellucidanalytics.github.io/tweet-driven-comparable-companies/comparables/comps.html">this link</a>.</p>

<p>Cassandra and Spark works perfectly together and allows you to build scalable data-driven applications, that are super easy to scale out and handle gigabytes and terabytes of data. In this particular case, it’s probably an overkill. Twitter doesn’t have enough finance-related activity to produce serious load. However it’s easy to extend this application and add other streams: Bloomberg News Feed, Thompson Reuters, etc.</p>

<blockquote>
  <p>The code for this application app can be found on <a href="https://github.com/ezhulenev/tweet-driven-comparable-companies">Github</a></p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stock Price Prediction With Big Data and Machine Learning]]></title>
    <link href="http://eugenezhulenev.com/blog/2014/11/14/stock-price-prediction-with-big-data-and-machine-learning/"/>
    <updated>2014-11-14T18:03:35-08:00</updated>
    <id>http://eugenezhulenev.com/blog/2014/11/14/stock-price-prediction-with-big-data-and-machine-learning</id>
    <content type="html"><![CDATA[<p>Apache Spark and Spark MLLib for building price movement prediction model from order log data.</p>

<blockquote>
  <p>The code for this application app can be found on <a href="https://github.com/ezhulenev/orderbook-dynamics">Github</a></p>
</blockquote>

<h3 id="synopsis">Synopsis</h3>

<p>This post is based on <a href="https://raw.github.com/ezhulenev/scala-openbook/master/assets/Modeling-high-frequency-limit-order-book-dynamics-with-support-vector-machines.pdf">Modeling high-frequency limit order book dynamics with support vector machines</a> paper.
Roughly speaking I’m implementing ideas introduced in this paper in scala with <a href="https://spark.apache.org/">Spark</a> and <a href="https://spark.apache.org/mllib/">Spark MLLib</a>.
Authors are using sampling, I’m going to use full order log from <a href="http://www.nyxdata.com/Data-Products/NYSE-OpenBook-History">NYSE</a> (sample data is available from <a href="ftp://ftp.nyxdata.com/Historical%20Data%20Samples/TAQ%20NYSE%20OpenBook/">NYSE FTP</a>), just because
I can easily do it with Spark. Instead of using SVM, I’m going to use <a href="http://spark.apache.org/docs/latest/mllib-decision-tree.html">Decision Tree</a> algorithm for classification,
because in Spark MLLib it supports multiclass classification out of the box.</p>

<p>If you want to get deep understanding of the problem and proposed solution, you need to read the paper.
I’m going to give high level overview of the problem in less academic language, in one or two paragraphs.</p>

<blockquote>
  <p>Predictive modelling is the process by which a model is created or chosen to try to best predict the probability of an outcome.</p>
</blockquote>

<!-- more -->

<h4 id="model-architecture">Model Architecture</h4>

<p>Authors are proposing framework for extracting feature vectors from from raw order log data, that can be used as input to
machine learning classification method (SVM or Decision Tree for example) to predict price movement (Up, Down, Stationary). Given a set of training data
with assigned labels (price movement) classification algorithm builds a model that assigns new examples into one of pre-defined categories.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
Time(sec)            Price($)   Volume      Event Type      Direction
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
34203.011926972      598.68     10          submission      ask
34203.011926973      594.47     15          submission      bid
34203.011926974      594.49     20          submission      bid
34203.011926981      597.68     30          submission      ask
34203.011926991      594.47     15          execution       ask
34203.011927072      597.68     10          cancellation    ask
34203.011927082      599.88     12          submission      ask
34203.011927097      598.38     11          submission      ask
</pre></div>
</div>
 </figure></notextile></div>

<p>In the table, each row of the message book represents a trading event that could be either a order submission,
order cancellation, or order execution. The arrival time measured from midnight,
is in seconds and nanoseconds; price is in US dollars, and the Volume is in number of shares.
Ask - I’m selling and asking for this price, Bid - I want to buy for this price.</p>

<p>From this log it’s very easy to reconstruct state of order book after each entry. You can read more about <a href="http://www.investopedia.com/terms/o/order-book.asp">order book</a>
and <a href="http://www.investopedia.com/university/intro-to-order-types/limit-orders.asp">limit order book</a> in Investopedia,
I’m not going to dive into details. Concepts are super easy for understanding.</p>

<blockquote>
  <p>An electronic list of buy and sell orders for a specific security or financial instrument, organized by price level.</p>
</blockquote>

<h4 id="feature-extraction-and-training-data-preparation">Feature Extraction and Training Data Preparation</h4>

<p>After order books are reconstructed from order log, we can derive attributes, that will form feature vectors used as input to <code>classification model</code>.</p>

<p>Attributes are divided into three categories: basic, time-insensitive, and time-sensitive, all of which can be directly computed from the data.
Attributes in the basic set are the prices and volumes at both ask and bid sides up to n = 10 different levels (that is, price levels in the order book at a given moment),
which can be directly fetched from the order book. Attributes in the time-insensitive set are easily computed from the basic set at a single point in time.
Of this, bid-ask spread and mid-price, price ranges, as well as average price and volume at different price levels are calculated in feature sets <code>v2</code>, <code>v3</code>, and <code>v5</code>, respectively;
while <code>v5</code> is designed to track the accumulated differences of price and volume between ask and bid sides. By further taking the recent history of current data into consideration,
we devise the features in the time-sensitive set. More about calculating other attributes can be found in <a href="https://raw.github.com/ezhulenev/scala-openbook/master/assets/Modeling-high-frequency-limit-order-book-dynamics-with-support-vector-machines.pdf">original paper</a>.</p>

<p><img class="center" src="https://raw.github.com/ezhulenev/scala-openbook/master/assets/features.png" /></p>

<h4 id="labeling-training-data">Labeling Training Data</h4>

<p>To prepare training data for machine learning it’s also required to label each point with price movement observed over some time horizon (1 second fo example).
It’s straightforward task that only requires two order books: current order book and order book after some period of time.</p>

<p>I’m going to use <code>MeanPriceMove</code> label that can be: <code>Stationary</code>, <code>Up</code> or <code>Down</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>

trait <span class="predefined-type">Label</span>[L] <span class="directive">extends</span> <span class="predefined-type">Serializable</span> { label =&gt;
  <span class="keyword">def</span> <span class="function">apply</span>(<span class="key">current</span>: OrderBook, <span class="key">future</span>: OrderBook): <span class="predefined-type">Option</span>[L]
}

sealed trait MeanPriceMove

object MeanPriceMove {
  <span class="keyword">case</span> object Up <span class="directive">extends</span> MeanPriceMove
  <span class="keyword">case</span> object Down <span class="directive">extends</span> MeanPriceMove
  <span class="keyword">case</span> object Stationary <span class="directive">extends</span> MeanPriceMove
}

object MeanPriceMovementLabel <span class="directive">extends</span> <span class="predefined-type">Label</span>[MeanPriceMove] {

  <span class="directive">private</span>[<span class="local-variable">this</span>] val basicSet = BasicSet.apply(BasicSet.Config.default)

  <span class="keyword">def</span> <span class="function">apply</span>(<span class="key">current</span>: OrderBook, <span class="key">future</span>: OrderBook): <span class="predefined-type">Option</span>[MeanPriceMove] = {
    val currentMeanPrice = basicSet.meanPrice(current)
    val futureMeanPrice = basicSet.meanPrice(future)

    val <span class="key">cell</span>: Cell[MeanPriceMove] =
       currentMeanPrice.zipMap(futureMeanPrice) {
        (currentMeanValue, futureMeanValue) =&gt;
          <span class="keyword">if</span> (currentMeanValue == futureMeanValue)
            MeanPriceMove.Stationary
          <span class="keyword">else</span> <span class="keyword">if</span> (currentMeanValue &gt; futureMeanValue)
            MeanPriceMove.Down
          <span class="keyword">else</span>
            MeanPriceMove.Up
        }

    cell.toOption
  }
}
</pre></div>
</div>
 </figure></notextile></div>

<h3 id="order-log-data">Order Log Data</h3>

<p>I’m going to use <a href="http://www.nyxdata.com/Data-Products/NYSE-OpenBook-History">NYSE TAQ OpenBook</a> orders data, and parse it with <a href="https://github.com/ezhulenev/scala-openbook">Scala OpenBook</a>
library. It’s easiest data set to get, free sample data for 2 trading days is available for download at <a href="ftp://ftp.nyxdata.com/Historical%20Data%20Samples/TAQ%20NYSE%20OpenBook/">NYSE FTP</a>.</p>

<blockquote>
  <p>TAQ (Trades and Quotes) historical data products provide a varying range of market depth on a T+1 basis for covered markets.
TAQ data products are used to develop and backtest trading strategies, analyze market trends as seen in a real-time ticker plant environment, and research markets for regulatory or audit activity.</p>
</blockquote>

<h3 id="prepare-training-data">Prepare Training Data</h3>

<p><code>OrderBook</code> is two sorted maps, where key is price and value is volume.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">case</span> <span class="type">class</span> <span class="class">OrderBook</span>(<span class="key">symbol</span>: <span class="predefined-type">String</span>,
                     <span class="key">buy</span>: <span class="predefined-type">TreeMap</span>[Int, Int] = <span class="predefined-type">TreeMap</span>.empty,
                     <span class="key">sell</span>: <span class="predefined-type">TreeMap</span>[Int, Int] = <span class="predefined-type">TreeMap</span>.empty)
</pre></div>
</div>
 </figure></notextile></div>

<h4 id="feature-sets">Feature Sets</h4>

<p>I’m using <code>Cell</code> from <a href="https://github.com/pellucidanalytics/framian">Framian</a> library to represent extracted feature values. It can be <code>Value</code>, <code>NA</code> or <code>NM</code>.</p>

<p>As defined in original paper we have three feature sets, first two calculated from <code>OrderBook</code>, last one requires <code>OrdersTrail</code> which effectively is
window computation over raw order log.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
sealed trait <span class="predefined-type">BasicAttribute</span>[T] <span class="directive">extends</span> <span class="predefined-type">Serializable</span> { self =&gt;
  <span class="keyword">def</span> <span class="function">apply</span>(<span class="key">orderBook</span>: OrderBook): Cell[T]

  <span class="keyword">def</span> map[T2](<span class="key">f</span>: T =&gt; T2): <span class="predefined-type">BasicAttribute</span>[T2] = <span class="keyword">new</span> <span class="predefined-type">BasicAttribute</span>[T2] {
    <span class="keyword">def</span> <span class="function">apply</span>(<span class="key">orderBook</span>: OrderBook): Cell[T2] = self(orderBook).map(f)
  }
}
</pre></div>
</div>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
sealed trait TimeInsensitiveAttribute[T] <span class="directive">extends</span> <span class="predefined-type">Serializable</span> { self =&gt;
  <span class="keyword">def</span> <span class="function">apply</span>(<span class="key">orderBook</span>: OrderBook): Cell[T]

  <span class="keyword">def</span> map[T2](<span class="key">f</span>: T =&gt; T2): TimeInsensitiveAttribute[T2] = <span class="keyword">new</span> TimeInsensitiveAttribute[T2] {
    <span class="keyword">def</span> <span class="function">apply</span>(<span class="key">orderBook</span>: OrderBook): Cell[T2] = self(orderBook).map(f)
  }
}
</pre></div>
</div>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
trait TimeSensitiveAttribute[T] <span class="directive">extends</span> <span class="predefined-type">Serializable</span> { self =&gt;
  <span class="keyword">def</span> <span class="function">apply</span>(<span class="key">ordersTrail</span>: <span class="predefined-type">Vector</span>[OpenBookMsg]): Cell[T]

  <span class="keyword">def</span> map[T2](<span class="key">f</span>: T =&gt; T2): TimeSensitiveAttribute[T2] = <span class="keyword">new</span> TimeSensitiveAttribute[T2] {
    <span class="keyword">def</span> <span class="function">apply</span>(<span class="key">ordersTrail</span>: <span class="predefined-type">Vector</span>[OpenBookMsg]): Cell[T2] = self(ordersTrail).map(f)
  }
}
</pre></div>
</div>
 </figure></notextile></div>

<p>and it’s how features calculation looks like</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
<span class="type">class</span> <span class="class">BasicSet</span> <span class="directive">private</span>[attribute] (val <span class="key">config</span>: BasicSet.Config) <span class="directive">extends</span> <span class="predefined-type">Serializable</span> {
  <span class="directive">private</span>[attribute] <span class="keyword">def</span> <span class="function">askPrice</span>(<span class="key">orderBook</span>: OrderBook)(<span class="key">i</span>: Int): Cell[Int] = {
    Cell.fromOption {
      orderBook.sell.keySet.drop(i - <span class="integer">1</span>).headOption
    }
  }

  <span class="directive">private</span>[attribute] <span class="keyword">def</span> <span class="function">bidPrice</span>(<span class="key">orderBook</span>: OrderBook)(<span class="key">i</span>: Int): Cell[Int] = {
    Cell.fromOption {
      val bidPrices = orderBook.buy.keySet
      <span class="keyword">if</span> (bidPrices.size &gt;= i) {
        bidPrices.drop(bidPrices.size - i).headOption
      } <span class="keyword">else</span> None
    }
  }

  <span class="directive">private</span> <span class="keyword">def</span> attribute[T](<span class="key">f</span>: OrderBook =&gt; Cell[T]): <span class="predefined-type">BasicAttribute</span>[T] = <span class="keyword">new</span> <span class="predefined-type">BasicAttribute</span>[T] {
    <span class="keyword">def</span> <span class="function">apply</span>(<span class="key">orderBook</span>: OrderBook): Cell[T] = f(orderBook)
  }

  <span class="keyword">def</span> <span class="function">askPrice</span>(<span class="key">i</span>: Int): <span class="predefined-type">BasicAttribute</span>[Int] = attribute(askPrice(_)(i))

  <span class="keyword">def</span> <span class="function">bidPrice</span>(<span class="key">i</span>: Int): <span class="predefined-type">BasicAttribute</span>[Int] = attribute(bidPrice(_)(i))

 val <span class="key">meanPrice</span>: <span class="predefined-type">BasicAttribute</span>[<span class="predefined-type">Double</span>] = {
    val ask1 = askPrice(<span class="integer">1</span>)
    val bid1 = bidPrice(<span class="integer">1</span>)
    <span class="predefined-type">BasicAttribute</span>.from(orderBook =&gt;
      ask1(orderBook).zipMap(bid1(orderBook)) {
        (ask, bid) =&gt; (ask.toDouble + bid.toDouble) / <span class="integer">2</span>
      })
  }
}
</pre></div>
</div>
 </figure></notextile></div>

<h4 id="label-training-data">Label Training Data</h4>

<p>To extract labeled data from orders I’m using <code>LabeledPointsExtractor</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
<span class="type">class</span> <span class="class">LabeledPointsExtractor</span>[<span class="key">L</span>: LabelEncode] {

  <span class="keyword">def</span> <span class="function">labeledPoints</span>(<span class="key">orders</span>: <span class="predefined-type">Vector</span>[OpenBookMsg]): <span class="predefined-type">Vector</span>[LabeledPoint] = {
    log.debug(s<span class="string"><span class="delimiter">&quot;</span><span class="content">Extract labeled points from orders log. Log size: </span><span class="inline"><span class="inline-delimiter">${</span>orders.size<span class="inline-delimiter">}</span></span><span class="delimiter">&quot;</span></span>)

    <span class="comment">// ...</span>
  }
}
</pre></div>
</div>
 </figure></notextile></div>

<p>and it can be constructed nicely with builder</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
val extractor = {
    <span class="keyword">import</span> <span class="include">com.scalafi.dynamics.attribute.LabeledPointsExtractor._</span>
    (LabeledPointsExtractor.newBuilder()
      += basic(_.askPrice(<span class="integer">1</span>))
      += basic(_.bidPrice(<span class="integer">1</span>))
      += basic(_.meanPrice)
      ).result(symbol, MeanPriceMovementLabel, LabeledPointsExtractor.Config(<span class="integer">1</span>.millisecond))
  }
</pre></div>
</div>
 </figure></notextile></div>

<p>This <code>extractor</code> will prepare labeled points using <code>MeanPriceMovementLabel</code> with 3 features: ask price, bid price and mean price</p>

<h3 id="run-classification-model">Run Classification Model</h3>

<p>In “real” application I’m using 36 features from all 3 feature sets. I run my tests with sample data from NYSE ftp,
<code>EQY_US_NYSE_BOOK_20130403</code> for model training and <code>EQY_US_NYSE_BOOK_20130404</code> for model validation.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
object DecisionTreeDynamics <span class="directive">extends</span> App with ConfiguredSparkContext with FeaturesExtractor {
  <span class="directive">private</span> val log = LoggerFactory.getLogger(<span class="local-variable">this</span>.getClass)

  <span class="keyword">case</span> <span class="type">class</span> <span class="class">Config</span>(<span class="key">training</span>: <span class="predefined-type">String</span> = <span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>,
                    <span class="key">validation</span>: <span class="predefined-type">String</span> = <span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>,
                    <span class="key">filter</span>: <span class="predefined-type">Option</span>[<span class="predefined-type">String</span>] = None,
                    <span class="key">symbol</span>: <span class="predefined-type">Option</span>[<span class="predefined-type">String</span>] = None)

  val parser = <span class="keyword">new</span> OptionParser[Config](<span class="string"><span class="delimiter">&quot;</span><span class="content">Order Book Dynamics</span><span class="delimiter">&quot;</span></span>) {
    <span class="comment">// ....</span>
  }

  parser.parse(args, Config()) map { implicit config =&gt;
    val trainingFiles = openBookFiles(<span class="string"><span class="delimiter">&quot;</span><span class="content">Training</span><span class="delimiter">&quot;</span></span>, config.training, config.filter)
    val validationFiles = openBookFiles(<span class="string"><span class="delimiter">&quot;</span><span class="content">Validation</span><span class="delimiter">&quot;</span></span>, config.validation, config.filter)

    val trainingOrderLog = orderLog(trainingFiles)
    log.info(s<span class="string"><span class="delimiter">&quot;</span><span class="content">Training order log size: </span><span class="inline"><span class="inline-delimiter">${</span>trainingOrderLog.count()<span class="inline-delimiter">}</span></span><span class="delimiter">&quot;</span></span>)

    <span class="comment">// Configure DecisionTree model</span>
    val labelEncode = implicitly[LabelEncode[MeanPriceMove]]
    val numClasses = labelEncode.numClasses
    val categoricalFeaturesInfo = <span class="predefined-type">Map</span>.empty[Int, Int]
    val impurity = <span class="string"><span class="delimiter">&quot;</span><span class="content">gini</span><span class="delimiter">&quot;</span></span>
    val maxDepth = <span class="integer">5</span>
    val maxBins = <span class="integer">100</span>

    val trainingData = trainingOrderLog.extractLabeledData(featuresExtractor(<span class="key">_</span>: <span class="predefined-type">String</span>))
    val trainedModels = (trainingData map { <span class="keyword">case</span> LabeledOrderLog(symbol, labeledPoints) =&gt;
      log.info(s<span class="string"><span class="delimiter">&quot;</span><span class="inline"><span class="inline-delimiter">$</span>symbol</span><span class="content">: Train Decision Tree model. Training data size: </span><span class="inline"><span class="inline-delimiter">${</span>labeledPoints.count()<span class="inline-delimiter">}</span></span><span class="delimiter">&quot;</span></span>)
      val model = DecisionTree.trainClassifier(labeledPoints, numClasses, categoricalFeaturesInfo, impurity, maxDepth, maxBins)
      val labelCounts = labeledPoints.map(_.label).countByValue().map {
        <span class="keyword">case</span> (key, count) =&gt; (labelEncode.decode(key.toInt), count)
      }
      log.info(s<span class="string"><span class="delimiter">&quot;</span><span class="inline"><span class="inline-delimiter">$</span>symbol</span><span class="content">: Label counts: [</span><span class="inline"><span class="inline-delimiter">${</span>labelCounts.mkString(<span class="string"><span class="delimiter">&quot;</span><span class="content">, </span><span class="delimiter">&quot;</span></span>)<span class="inline-delimiter">}</span></span><span class="content">]</span><span class="delimiter">&quot;</span></span>)
      symbol -&gt; model
    }).toMap

    val validationOrderLog = orderLog(validationFiles)
    log.info(s<span class="string"><span class="delimiter">&quot;</span><span class="content">Validation order log size: </span><span class="inline"><span class="inline-delimiter">${</span>validationOrderLog.count()<span class="inline-delimiter">}</span></span><span class="delimiter">&quot;</span></span>)
    val validationData = validationOrderLog.extractLabeledData(featuresExtractor(<span class="key">_</span>: <span class="predefined-type">String</span>))

    <span class="comment">// Evaluate model on validation data and compute training error</span>
    validationData.map { <span class="keyword">case</span> LabeledOrderLog(symbol, labeledPoints) =&gt;

      val model = trainedModels(symbol)

      log.info(s<span class="string"><span class="delimiter">&quot;</span><span class="inline"><span class="inline-delimiter">$</span>symbol</span><span class="content">: Evaluate model on validation data. Validation data size: </span><span class="inline"><span class="inline-delimiter">${</span>labeledPoints.count()<span class="inline-delimiter">}</span></span><span class="delimiter">&quot;</span></span>)
      log.info(s<span class="string"><span class="delimiter">&quot;</span><span class="inline"><span class="inline-delimiter">$</span>symbol</span><span class="content">: Learned classification tree model: </span><span class="inline"><span class="inline-delimiter">$</span>model</span><span class="delimiter">&quot;</span></span>)

      val labelAndPrediction = labeledPoints.map { point =&gt;
        val prediction = model.predict(point.features)
        (point.label, prediction)
      }
      val trainingError = labelAndPrediction.filter(r =&gt; r._1 != r._2).count().toDouble / labeledPoints.count
      log.info(s<span class="string"><span class="delimiter">&quot;</span><span class="inline"><span class="inline-delimiter">$</span>symbol</span><span class="content">: Training Error = </span><span class="delimiter">&quot;</span></span> + trainingError)
    }
  }
}
</pre></div>
</div>
 </figure></notextile></div>

<h4 id="training-error">Training Error</h4>

<p>Output of running Decision Tree classification for single symbol <code>ORCL</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
ORCL: Train Decision Tree model. Training data size: 64064
ORCL: Trained model in 3740 millis
ORCL: Label counts: [Stationary -&gt; 42137, Down -&gt; 10714, Up -&gt; 11213]
ORCL: Evaluate model on validation data. Validation data size: 54749
ORCL: Training Error = 0.28603262160039455
</pre></div>
</div>
 </figure></notextile></div>

<p>As you can see this pretty simple model was able to successfully classify ~70% of the data.</p>

<p><strong>Remark:</strong> Despite the fact, that this model shows very good success rate, it doesn’t mean that it
can be successfully used to build profitable automated trading strategy. First of all I don’t check
if it’s 95% success predicting stationary and 95% error rate predicting any price movement with
average 70% success rate. It doesn’t measure “strength” of price movement, it has to be sufficient to cover
transaction costs. And many other details that matters for building real trading system.</p>

<p>For sure it’s huge room for improvement and result validation. Unfortunately it’s hard do get enough data,
2 trading days is to small data set to draw conclusions and start building system to earn all the money in the world.
However I think it’ a good starting point.</p>

<h3 id="results">Results</h3>

<p>I was able to relatively easy reproduce fairly complicated research project at much lager scale than in original paper.</p>

<p>Latest Big Data technologies allows to build models using all available data, and stop doing samplings.
Using all of the data helps to build best possible models and capture all details from full data set.</p>

<blockquote>
  <p>The code for this application app can be found on <a href="https://github.com/ezhulenev/orderbook-dynamics">Github</a></p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scalaz-Stream: Feed `Process` Through the Given Effectful `Channel` Concurrently]]></title>
    <link href="http://eugenezhulenev.com/blog/2014/04/01/scalaz-stream-concurrent-process/"/>
    <updated>2014-04-01T19:03:03-07:00</updated>
    <id>http://eugenezhulenev.com/blog/2014/04/01/scalaz-stream-concurrent-process</id>
    <content type="html"><![CDATA[<p>Let’s assume that we have some input process, and want to run some ‘heavy computation’ on each element.
Obviously we want utilize all available cores and use thread pool. However scalaz-stream by default is deterministic
and in following example all computation steps will run consecutively.</p>

<!-- more -->

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line">  <span class="k">val</span> <span class="n">timeFormat</span> <span class="k">=</span> <span class="nc">DateTimeFormat</span><span class="o">.</span><span class="n">forPattern</span><span class="o">(</span><span class="s">&quot;HH:mm:ss:SSS&quot;</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">  <span class="k">val</span> <span class="n">counter</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">AtomicInteger</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// ThreadPool for running effectful functions</span>
</span><span class="line">  <span class="k">val</span> <span class="n">executor</span> <span class="k">=</span> <span class="nc">Executors</span><span class="o">.</span><span class="n">newFixedThreadPool</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// channel of effectful functions</span>
</span><span class="line">  <span class="k">val</span> <span class="n">effectfulChannel</span> <span class="k">=</span> <span class="n">channel</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">Int</span><span class="o">]</span> <span class="o">{</span>
</span><span class="line">    <span class="n">in</span> <span class="k">=&gt;</span> <span class="nc">Task</span> <span class="o">{</span>
</span><span class="line">      <span class="k">val</span> <span class="n">taskN</span> <span class="k">=</span> <span class="n">counter</span><span class="o">.</span><span class="n">incrementAndGet</span><span class="o">()</span>
</span><span class="line">
</span><span class="line">      <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;${Thread.currentThread().getName}: &quot;</span> <span class="o">+</span>
</span><span class="line">        <span class="n">s</span><span class="s">&quot;Run for $in, &quot;</span> <span class="o">+</span>
</span><span class="line">        <span class="n">s</span><span class="s">&quot;TaskN = $taskN &quot;</span> <span class="o">+</span>
</span><span class="line">        <span class="n">s</span><span class="s">&quot;(time = ${timeFormat.print(System.currentTimeMillis())})&quot;</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">      <span class="c1">// Long running computation</span>
</span><span class="line">      <span class="k">val</span> <span class="n">computed</span> <span class="k">=</span> <span class="o">{</span>
</span><span class="line">        <span class="nc">Thread</span><span class="o">.</span><span class="n">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">)</span>
</span><span class="line">        <span class="n">in</span> <span class="o">*</span> <span class="n">in</span>
</span><span class="line">      <span class="o">}</span>
</span><span class="line">      <span class="n">computed</span>
</span><span class="line">    <span class="o">}(</span><span class="n">executor</span><span class="o">)</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">val</span> <span class="n">start</span> <span class="k">=</span> <span class="nc">System</span><span class="o">.</span><span class="n">currentTimeMillis</span><span class="o">()</span>
</span><span class="line">  <span class="k">val</span> <span class="n">output</span> <span class="k">=</span> <span class="nc">Process</span><span class="o">.</span><span class="n">range</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">11</span><span class="o">).</span><span class="n">through</span><span class="o">(</span><span class="n">effectfulChannel</span><span class="o">).</span><span class="n">runLog</span><span class="o">.</span><span class="n">run</span>
</span><span class="line">  <span class="k">val</span> <span class="n">end</span> <span class="k">=</span> <span class="nc">System</span><span class="o">.</span><span class="n">currentTimeMillis</span><span class="o">()</span>
</span><span class="line">  <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;Output = $output, in ${end-start} ms&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="deterministic-output">Deterministic Output</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">pool-1-thread-1: Run for 1, TaskN = 1   (time = 22:59:14:720)
</span><span class="line">pool-1-thread-2: Run for 2, TaskN = 2   (time = 22:59:15:811)
</span><span class="line">pool-1-thread-3: Run for 3, TaskN = 3   (time = 22:59:16:813)
</span><span class="line">pool-1-thread-3: Run for 4, TaskN = 4   (time = 22:59:17:815)
</span><span class="line">pool-1-thread-3: Run for 5, TaskN = 5   (time = 22:59:18:817)
</span><span class="line">pool-1-thread-3: Run for 6, TaskN = 6   (time = 22:59:19:818)
</span><span class="line">pool-1-thread-3: Run for 7, TaskN = 7   (time = 22:59:20:819)
</span><span class="line">pool-1-thread-3: Run for 8, TaskN = 8   (time = 22:59:21:821)
</span><span class="line">pool-1-thread-3: Run for 9, TaskN = 9   (time = 22:59:22:822)
</span><span class="line">pool-1-thread-3: Run for 10, TaskN = 10 (time = 22:59:23:823)
</span><span class="line">Output = Vector(1, 4, 9, 16, 25, 36, 49, 64, 81, 100), in 10196 ms</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="concurrent-process">Concurrent Process</h3>

<p>To run effectful functions concurrently, with controlled number of queued tasks we can use <code>scalaz.stream.merge.mergeN</code> which is for now available only in <code>snapshot-0.4</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line">  <span class="k">val</span> <span class="n">P</span> <span class="k">=</span> <span class="n">scalaz</span><span class="o">.</span><span class="n">stream</span><span class="o">.</span><span class="nc">Process</span>
</span><span class="line">
</span><span class="line">  <span class="k">implicit</span> <span class="k">class</span> <span class="nc">ConcurrentProcess</span><span class="o">[</span><span class="kt">O</span><span class="o">](</span><span class="k">val</span> <span class="n">process</span><span class="k">:</span> <span class="kt">Process</span><span class="o">[</span><span class="kt">Task</span>, <span class="kt">O</span><span class="o">])</span> <span class="o">{</span>
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * Run process through channel with given level of concurrency</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="k">def</span> <span class="n">concurrently</span><span class="o">[</span><span class="kt">O2</span><span class="o">](</span><span class="n">concurrencyLevel</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>
</span><span class="line">                        <span class="o">(</span><span class="n">f</span><span class="k">:</span> <span class="kt">Channel</span><span class="o">[</span><span class="kt">Task</span>, <span class="kt">O</span>, <span class="kt">O2</span><span class="o">])</span><span class="k">:</span> <span class="kt">Process</span><span class="o">[</span><span class="kt">Task</span>, <span class="kt">O2</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class="line">      <span class="k">val</span> <span class="n">actions</span> <span class="k">=</span>
</span><span class="line">        <span class="n">process</span><span class="o">.</span>
</span><span class="line">          <span class="n">zipWith</span><span class="o">(</span><span class="n">f</span><span class="o">)((</span><span class="n">data</span><span class="o">,</span> <span class="n">f</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">f</span><span class="o">(</span><span class="n">data</span><span class="o">))</span>
</span><span class="line">
</span><span class="line">      <span class="k">val</span> <span class="n">nestedActions</span> <span class="k">=</span>
</span><span class="line">        <span class="n">actions</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">P</span><span class="o">.</span><span class="n">eval</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">      <span class="n">merge</span><span class="o">.</span><span class="n">mergeN</span><span class="o">(</span><span class="n">concurrencyLevel</span><span class="o">)(</span><span class="n">nestedActions</span><span class="o">)</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line">  <span class="k">val</span> <span class="n">output</span> <span class="k">=</span> <span class="nc">Process</span><span class="o">.</span><span class="n">range</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">11</span><span class="o">)</span>
</span><span class="line">               <span class="o">.</span><span class="n">concurrently</span><span class="o">(</span><span class="mi">5</span><span class="o">)(</span><span class="n">effectfulChannel</span><span class="o">).</span><span class="n">runLog</span><span class="o">.</span><span class="n">run</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="concurrent-process-output">Concurrent Process Output</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">pool-1-thread-1: Run for 1, TaskN = 1 (time = 12:00:15:625)
</span><span class="line">pool-1-thread-3: Run for 3, TaskN = 3 (time = 12:00:15:626)
</span><span class="line">pool-1-thread-2: Run for 2, TaskN = 2 (time = 12:00:15:626)
</span><span class="line">pool-1-thread-3: Run for 4, TaskN = 4 (time = 12:00:16:683)
</span><span class="line">pool-1-thread-1: Run for 5, TaskN = 5 (time = 12:00:16:683)
</span><span class="line">pool-1-thread-2: Run for 6, TaskN = 6 (time = 12:00:16:693)
</span><span class="line">pool-1-thread-3: Run for 7, TaskN = 7 (time = 12:00:17:684)
</span><span class="line">pool-1-thread-1: Run for 8, TaskN = 8 (time = 12:00:17:684)
</span><span class="line">pool-1-thread-2: Run for 9, TaskN = 9 (time = 12:00:17:694)
</span><span class="line">pool-1-thread-3: Run for 10, TaskN = 10 (time = 12:00:18:685)
</span><span class="line">Output = Vector(4, 9, 1, 25, 16, 36, 49, 64, 81, 100), in 4234 ms</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="result">Result</h3>

<p>As you can see in second case computations run concurrently and total time spent is much smaller, and final result is the same, as expected.</p>

<p>Full code for this post is available in <a href="https://gist.github.com/ezhulenev/9916972">Gist</a>.</p>
]]></content>
  </entry>
  
</feed>
